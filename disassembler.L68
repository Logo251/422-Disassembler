00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/16/2021 9:32:39 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : Logan and Victor  
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program 
00001000                             9  
00001000  =000A0000                 10  stack   EQU     $000A0000
00001000  =0000000C                 11  shift   EQU     $C
00001000  =00000001                 12  task1   EQU     $01
00001000  =00000002                 13  task2   EQU     $02
00001000  =00000005                 14  task5   EQU     $05
00001000  =0000000D                 15  task13  EQU     $0D
00001000  =0000000E                 16  task14  EQU     $0E
00001000  =00000059                 17  input_Y EQU     $59
00001000  =00000079                 18  input_yl EQU     $79
00001000  =0000004E                 19  input_N EQU     $4E
00001000  =0000004E                 20  input_nl EQU     $4E
00001000  =0000001D                 21  linesOnScreen   EQU     29
00001000  =00000040                 22  bufferSize   EQU      64   
00001000  =0000000C                 23  right12     EQU     12      ; Extract op code
00001000  =00000008                 24  right8      EQU     8       ; Extract 2nd nibble
00001000  =00000006                 25  right6      EQU     6       ; Extract dest mode
00001000  =00000004                 26  right4      EQU     4       ; Extract 3rd Nibble
00001000  =00000003                 27  right3      EQU     3       ; Extract the scr mode
00001000                            28  
00001000  =00000F00                 29  nibble2     EQU     $0F00   ; Extract 2nd nibble
00001000  =000000F0                 30  nibble3     EQU     $00F0   ; Extract 3rd nibble
00001000  =000001C0                 31  destmode    EQU     $01C0   ; Extract the dest mode
00001000  =00000038                 32  srcmode     EQU     $0038   ; Extract the scr mode
00001000  =000000C0                 33  size        EQU     $00C0   ; Extract the size
00001000                            34  
00001000                            35  MAIN:
00001000  4FF9 000A0000             36          LEA     stack, SP
00001006                            37  WELCOME: 
00001006  43F9 000023F9             38          LEA     WELCOME_MESS, A1
0000100C  103C 000E                 39          MOVE.B  #task14,D0
00001010  4E4F                      40          TRAP    #15             Display  Openning Message 
00001012                            41  
00001012                            42  ; ----------------------------------------------------------------------------
00001012                            43  ;   User Interface 
00001012                            44  ; ----------------------------------------------------------------------------  
00001012                            45  USER_INPUT:
00001012  4EF9 00001036             46          JMP     START_ADDR
00001018                            47          
00001018                            48  RESTART_PROGRAM: 
00001018  7200                      49          MOVEQ   #0,D1
0000101A  227C 00000000             50          MOVEA.L #$0, A1
00001020  267C 00000000             51          MOVEA.L #$0, A3
00001026  2A7C 00000000             52          MOVEA.L #$0, A5
0000102C  2C7C 00000000             53          MOVEA.L #$0, A6
00001032  7600                      54          MOVEQ   #0,D3       
00001034  7000                      55          MOVEQ   #0,D0
00001036                            56                  
00001036                            57  START_ADDR:
00001036  7400                      58          MOVEQ   #0,D2
00001038                            59          ; Prompt a start address
00001038  43F9 0000241F             60          LEA     START_MESS, A1
0000103E  103C 000E                 61          MOVE.B  #task14,D0
00001042  4E4F                      62          TRAP    #15           Display  Start_Addr Message
00001044                            63  
00001044  227C 00000000             64          MOVEA.L #$0, A1 
0000104A                            65          ; read a start address 
0000104A  103C 0002                 66          MOVE.B  #task2,D0     Gets input from the user
0000104E  4E4F                      67          TRAP    #15
00001050                            68          
00001050  4EB9 00002372             69          JSR     ATOI
00001056                            70          
00001056                            71          ; Validate start address       
00001056  7200                      72          MOVEQ   #0,D1
00001058  B6BC FFFFFFFF             73          CMP.L   #-1,D3
0000105E  6700 1370                 74          BEQ     ERROR_START_ADDR
00001062                            75          
00001062                            76                          
00001062  E29B                      77          ROR.L   #1, D3          ; Checks for odd number
00001064  6500 136A                 78          BCS     ERROR_START_ADDR
00001068  E39B                      79          ROL.L   #1, D3
0000106A  2A43                      80          MOVEA.L D3,A5           ; A5 = start address
0000106C  5442                      81          ADDQ    #2,D2        
0000106E                            82  END_ADDR:         
0000106E                            83          ; Prompt end address
0000106E  7600                      84          MOVEQ   #0,D3       ; Reset D3 Register
00001070  7200                      85          MOVEQ   #0,D1
00001072                            86          
00001072  43F9 00002484             87          LEA     END_MESS, A1
00001078  103C 000E                 88          MOVE.B  #task14,D0
0000107C  4E4F                      89          TRAP    #15           Display  END_Addr Message
0000107E                            90          
0000107E  227C 00000000             91          MOVEA.L #$0, A1 
00001084  103C 0002                 92          MOVE.B  #task2,D0     Gets input from the user
00001088  4E4F                      93          TRAP    #15
0000108A                            94          
0000108A                            95          ; Read the end address
0000108A  4EB9 00002372             96          JSR     ATOI
00001090  7200                      97          MOVEQ   #0,D1
00001092  B6BC FFFFFFFF             98          CMP.L   #-1,D3
00001098  6700 1346                 99          BEQ     ERROR_END_ADDR
0000109C                           100          
0000109C                           101          ; Validate end address & check if its greater than start
0000109C  E29B                     102          ROR.L   #1, D3
0000109E  6500 1340                103          BCS     ERROR_END_ADDR
000010A2  E39B                     104          ROL.L   #1, D3
000010A4                           105          
000010A4  B6BC 00FFFFFF            106          CMP.L   #$000FFFFFF, D3 
000010AA  6C00 1334                107          BGE     ERROR_END_ADDR
000010AE                           108          
000010AE  7202                     109          MOVEQ   #2, D1
000010B0  BBC3                     110          CMP.L   D3, A5 
000010B2  6C00 132C                111          BGE     ERROR_END_ADDR
000010B6  2C43                     112          MOVEA.L D3,A6       ; A6 = end address
000010B8  5442                     113          ADDQ    #2,D2
000010BA  4EF9 000010C2            114          JMP     DECODE_LOOP
000010C0                           115        
000010C0                           116  ; ----------------------------------------------------------------------------
000010C0                           117  ;   OP Code Start
000010C0                           118  ; ----------------------------------------------------------------------------          
000010C0                           119  DECODE_START: 
000010C0  4282                     120          CLR.L   D2      ; D2 = Screen line counter
000010C2                           121             
000010C2                           122  DECODE_LOOP:
000010C2                           123          ; Decoding the current address
000010C2  284B                     124          MOVEA.L A3, A4      ; Save the current start address of the string we are printing 
000010C4  4EB9 00001112            125          JSR     OP_START
000010CA                           126          
000010CA  16FC 0000                127          MOVE.B  #$00, (A3)+
000010CE  224C                     128          MOVEA.L A4, A1      
000010D0  103C 000D                129          MOVE.B  #task13, D0     ; Printing out decoded instruction 
000010D4  4E4F                     130          TRAP    #15
000010D6                           131          
000010D6                           132          ; Check if a decode finished
000010D6  BDCD                     133          CMP.L   A5, A6          ; Checks if the program is done
000010D8  6F00 008A                134          BLE     REPEAT_PROGRAM
000010DC                           135          
000010DC                           136          ; Check if the screen filled
000010DC  5202                     137          ADDQ.B  #1,D2           ; Adds one to the total # of lines on the screen 
000010DE  B43C 001D                138          CMP.B   #linesOnScreen, D2  ; Check if it exceds the max 
000010E2  6700 0004                139          BEQ     DECODE_PAUSE
000010E6                           140  
000010E6  60DA                     141          BRA     DECODE_LOOP
000010E8                           142          
000010E8                           143  DECODE_PAUSE:   
000010E8  43F9 00002563            144          LEA     MAX_SCREEN_OUTPUT,  A1
000010EE  103C 000E                145          MOVE.B  #task14, D0     ; Display the input that it exceeds 
000010F2  4E4F                     146          TRAP    #15 
000010F4                           147          
000010F4  103C 0005                148          MOVE.B  #task5, D0      ; Ask for the user to input to continue 
000010F8  4E4F                     149          TRAP    #15
000010FA                           150          
000010FA                           151          ; Branch b/c user enter any key 
000010FA  4EB9 00001102            152          JSR     CLEAR_SCREEN
00001100                           153          ; Program is is ready to continue the program
00001100  60BE                     154          BRA     DECODE_START
00001102                           155          
00001102                           156  CLEAR_SCREEN: 
00001102                           157          ; Clear output for the screen 
00001102  4282                     158          CLR.L   D2
00001104  43F9 000023F6            159          LEA     BLANK,  A1
0000110A  103C 000D                160          MOVE.B  #task13, D0     ; Display the input that it exceeds 
0000110E  4E4F                     161          TRAP    #15 
00001110  4E75                     162          RTS
00001112                           163             
00001112                           164  OP_START: 
00001112  48E7 2002                165          MOVEM.L  D2/A6, -(SP)    ; D2 (Screen line), A6 Ending Address
00001116                           166          
00001116  4EB9 00001140            167          JSR     OP_DATA_CLR
0000111C                           168          ; LEA     A3, buffer    ; Loads the message in 
0000111C                           169          
0000111C  41F9 000011C2            170          LEA      OP_JMP_TABLE, A0
00001122  4280                     171          CLR.L    D0
00001124  4281                     172          CLR.L    D1
00001126  301D                     173          MOVE.W   (A5)+,D0       ; Loads current word instruction to D0
00001128                           174          
00001128                           175          ; Load long address into D7 
00001128  2E1D                     176          MOVE.L   (A5)+,D7
0000112A                           177          
0000112A  2200                     178          MOVE.L   D0,D1          ; Move word instruct to D1
0000112C  143C 000C                179          MOVE.B   #right12, D2   
00001130  E469                     180          LSR.W    D2, D1         ; D1 = op code
00001132  C2FC 0006                181          MULU     #6,D1          ; Computing jmp displacement
00001136  4EF0 1000                182          JMP      0(A0,D1)       ; 
0000113A                           183         
0000113A                           184  OP_FINISH: 
0000113A  4CDF 4004                185          MOVEM.L (SP)+,D2/A6, 
0000113E  4E75                     186          RTS
00001140                           187           
00001140                           188  ;-------------------------------------------
00001140                           189      ;According to instructions, need to 
00001140                           190      ;clear buffer before decoding questions 
00001140                           191  ;-------------------------------------------
00001140                           192  OP_DATA_CLR: 
00001140  4283                     193          CLR.L   D3
00001142  163C 0040                194          MOVE.B  #bufferSize ,D3
00001146  47F9 00002523            195          LEA     buffer,A3
0000114C                           196          
0000114C  4EB9 00001156            197          JSR     OP_DATA_CLR_LOOP
00001152                           198          
00001152  284B                     199          MOVEA.L A3, A4      ; Save the start of the address  
00001154  4E75                     200          RTS
00001156                           201          
00001156                           202  OP_DATA_CLR_LOOP:
00001156  2678 0000                203          MOVEA.L $0, A3
0000115A  16FC 0000                204          MOVE.B  #0,(A3)+
0000115E  5343                     205          SUBI    #1,D3
00001160  6EF4                     206          BGT     OP_DATA_CLR_LOOP
00001162  4E75                     207          RTS
00001164                           208          
00001164                           209  REPEAT_PROGRAM: 
00001164                           210          ; Output text to continue 
00001164  43F9 00002437            211          LEA     REPEAT_MESS, A1
0000116A  103C 000E                212          MOVE.B  #task14,D0
0000116E  4E4F                     213          TRAP    #15           Display  message asking to repeat 
00001170                           214          
00001170  4281                     215          CLR.L   D1
00001172                           216          ; Ask for input 
00001172  227C 00000000            217          MOVEA.L #$0, A1 
00001178                           218          ; read a start address 
00001178  103C 0005                219          MOVE.B  #task5,D0     Gets input from the user
0000117C  4E4F                     220          TRAP    #15
0000117E                           221          ; If y = go to user input
0000117E  B27C 0059                222          CMP.W   #input_Y, D1
00001182  6700 0030                223          BEQ     RESTART_PROGRAM_START
00001186                           224  
00001186  B27C 0079                225          CMP.W   #input_yl, D1
0000118A  6700 0028                226          BEQ     RESTART_PROGRAM_START        
0000118E                           227          ; if n = stop program. 
0000118E                           228          
0000118E  B27C 004E                229          CMP.W   #input_N, D1
00001192  6700 0028                230          BEQ     END_PROGRAM
00001196                           231          
00001196  B27C 004E                232          CMP.W   #input_nl, D1
0000119A  6700 0020                233          BEQ     END_PROGRAM
0000119E                           234          
0000119E                           235          ; Error Retry: 
0000119E  227C 00000000            236          MOVEA.L #$0, A1 
000011A4  43F9 0000246B            237          LEA     INVALID_MESS, A1
000011AA  103C 000E                238          MOVE.B  #task14,D0
000011AE  4E4F                     239          TRAP    #15           Display  Error Message
000011B0                           240          
000011B0  4EF8 1164                241          JMP     REPEAT_PROGRAM
000011B4                           242          
000011B4                           243  RESTART_PROGRAM_START: 
000011B4  4EB8 1102                244          JSR     CLEAR_SCREEN
000011B8  4EF8 1018                245          JMP     RESTART_PROGRAM
000011BC                           246          
000011BC                           247  END_PROGRAM: 
000011BC  4EF9 000023F0            248         JMP      DONE 
000011C2                           249      
000011C2                           250  OP_JMP_TABLE:
000011C2  4EF9 00001222            251          JMP     INDEX0000        ; ORI
000011C8  4EF9 00001240            252          JMP     INDEX0001        ; MOVE BYTE
000011CE  4EF9 00001268            253          JMP     INDEX0010        ; MOVE WORD / MOVEA
000011D4  4EF9 000012A8            254          JMP     INDEX0011        ; MOVE LONG / MOVEA
000011DA  4EF9 000012E8            255          JMP     INDEX0100        ; NOP, MOVEM, LEA
000011E0  4EF9 00001306            256          JMP     INDEX0101        ; ADDQ
000011E6  4EF9 00001322            257          JMP     INDEX0110        ; BRA, BSR
000011EC  4EF9 00001340            258          JMP     INDEX0111        ; MOVEQ
000011F2  4EF9 00001350            259          JMP     INDEX1000        ; DIVU
000011F8  4EF9 00001370            260          JMP     INDEX1001        ; SUB
000011FE  4EF9 00001386            261          JMP     INDEX1010
00001204  4EF9 0000138C            262          JMP     INDEX1011        ; CMP 
0000120A  4EF9 000013B0            263          JMP     INDEX1100        ; MULU
00001210  4EF9 000013DC            264          JMP     INDEX1101        ; ADD, ADDA
00001216  4EF9 000013F6            265          JMP     INDEX1110        ; ASL, ASR
0000121C  4EF9 00001434            266          JMP     INDEX1111        ; Unsupported    
00001222                           267  
00001222                           268  ; ------------------------------------
00001222                           269  ;   OP ORI 
00001222                           270  ; ------------------------------------        
00001222                           271  INDEX0000: 
00001222  41F9 0000143A            272          LEA   OP_0000_TABLE, A0  
00001228  4281                     273          CLR.L   D1
0000122A  4282                     274          CLR.L   D2
0000122C  2200                     275          MOVE.L  D0,D1               ; Current instruct word
0000122E  0241 0F00                276          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001232  143C 0008                277          MOVE.B  #right8, D2         
00001236  E469                     278          LSR.W   D2,D1               ; D1 = 2nd nibble
00001238  C2FC 0006                279          MULU    #6,D1               
0000123C  4EF0 1000                280          JMP      0(A0,D1)
00001240                           281          
00001240                           282  ; ------------------------------------
00001240                           283  ;   OP MOVE.B 
00001240                           284  ; ------------------------------------
00001240                           285  INDEX0001: 
00001240  4283                     286          CLR.L   D3
00001242  163C 0001                287          MOVE.B   #1, D3        ; byte size
00001246  16FC 004D                288          MOVE.B  #'M', (A3)+
0000124A  16FC 004F                289          MOVE.B  #'O', (A3)+
0000124E  16FC 0056                290          MOVE.B  #'V', (A3)+    
00001252  16FC 0045                291          MOVE.B  #'E', (A3)+
00001256  16FC 002E                292          MOVE.B  #'.', (A3)+ 
0000125A  16FC 0042                293          MOVE.B  #'B', (A3)+
0000125E                           294          
0000125E                           295          ; Call MOVE EA 
0000125E  4EB9 00001C42            296          JSR     MOVEA_EA
00001264  4EF8 113A                297          JMP     OP_FINISH
00001268                           298          
00001268                           299  ; ------------------------------------
00001268                           300  ;   OP MOVEA / MOVE long
00001268                           301  ; ------------------------------------
00001268                           302  INDEX0010:
00001268  4283                     303          CLR.L   D3
0000126A  4282                     304          CLR.L   D2
0000126C  163C 0004                305          MOVE.B   #4, D3        ; Long  size
00001270                           306          
00001270  16FC 004D                307          MOVE.B  #'M', (A3)+
00001274  16FC 004F                308          MOVE.B  #'O', (A3)+
00001278  16FC 0056                309          MOVE.B  #'V', (A3)+
0000127C  16FC 0045                310          MOVE.B  #'E', (A3)+
00001280                           311          
00001280  4281                     312          CLR.L   D1
00001282  2200                     313          MOVE.L  D0,D1               ; Current instruct word
00001284  0241 01C0                314          ANDI.W  #destmode,D1         ; Extract dest mode
00001288  143C 0006                315          MOVE.B  #right6, D2         
0000128C  E469                     316          LSR.W   D2,D1 
0000128E                           317  
0000128E  B23C 0001                318          CMP.B   #1, D1
00001292  6700 0436                319          BEQ     OP_MOVEAL               
00001296                           320  
00001296  16FC 002E                321          MOVE.B  #'.', (A3)+
0000129A  16FC 004C                322          MOVE.B  #'L', (A3)+
0000129E                           323          
0000129E                           324          ; Call MOVE EA
0000129E  4EB9 00001C42            325          JSR     MOVEA_EA
000012A4  4EF8 113A                326          JMP     OP_FINISH
000012A8                           327          
000012A8                           328  ; ------------------------------------
000012A8                           329  ;   OP MOVEA / MOVE word  
000012A8                           330  ; ------------------------------------
000012A8                           331  INDEX0011:
000012A8  4283                     332          CLR.L   D3
000012AA  4281                     333          CLR.L   D1
000012AC  4282                     334          CLR.L   D2
000012AE  163C 0002                335          MOVE.B   #2, D3        ; word 
000012B2                           336          
000012B2  16FC 004D                337          MOVE.B  #'M', (A3)+
000012B6  16FC 004F                338          MOVE.B  #'O', (A3)+
000012BA  16FC 0056                339          MOVE.B  #'V', (A3)+
000012BE  16FC 0045                340          MOVE.B  #'E', (A3)+
000012C2                           341          
000012C2  2200                     342          MOVE.L  D0,D1                ; Current instruct word
000012C4  0241 01C0                343          ANDI.W  #destmode,D1         ; Extract dest mode
000012C8  143C 0006                344          MOVE.B  #right6, D2         
000012CC  E469                     345          LSR.W   D2,D1 
000012CE                           346          
000012CE  B23C 0001                347          CMP.B   #1, D1
000012D2  6700 03E0                348          BEQ     OP_MOVEAW
000012D6                           349          
000012D6  16FC 002E                350          MOVE.B  #'.', (A3)+
000012DA  16FC 0057                351          MOVE.B  #'W', (A3)+
000012DE                           352          
000012DE                           353          ; Call MOVE EA
000012DE  4EB9 00001C42            354          JSR     MOVEA_EA
000012E4  4EF8 113A                355          JMP     OP_FINISH
000012E8                           356          
000012E8                           357  ; ------------------------------------
000012E8                           358  ;   OP  NOP, MOVEM, LEA 
000012E8                           359  ; ------------------------------------ 
000012E8                           360  INDEX0100: 
000012E8  4281                     361          CLR.L   D1
000012EA  4282                     362          CLR.L   D2
000012EC  41F9 0000149A            363          LEA     OP_01000_TABLE, A0
000012F2  2200                     364          MOVE.L  D0,D1               ; Current instruct word
000012F4  0241 0F00                365          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
000012F8  143C 0008                366          MOVE.B  #right8, D2         
000012FC  E469                     367          LSR.W   D2,D1               ; D1 = 2nd nibble
000012FE  C2FC 0006                368          MULU    #6,D1               
00001302  4EF0 1000                369          JMP      0(A0,D1)           ; JMP to table
00001306                           370  
00001306                           371  ; -------------------------------
00001306                           372  ;   OP ADDQ / SUBQ  
00001306                           373  ; --------------------------------
00001306                           374  INDEX0101:
00001306  4281                     375          CLR.L   D1 
00001308  4282                     376          CLR.L   D2
0000130A  2200                     377          MOVE.L  D0,D1               ; Current instruct word
0000130C  0241 0F00                378          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001310  143C 0008                379          MOVE.B  #right8, D2         
00001314  E469                     380          LSR.W   D2,D1               ; D1 = 2nd nibble
00001316                           381      
00001316  0201 0001                382          ANDI.B  #1, D1
0000131A  6700 04F2                383          BEQ     OP_SUBQ             ; If last bit = 1 --> SUBQ 
0000131E  6600 0508                384          BNE     OP_ADDQ             ; If lat bit = 0 --> ADDQ
00001322                           385          
00001322                           386          
00001322                           387  ; ------------------------------------
00001322                           388  ;   OP BRA,BSR  
00001322                           389  ; ------------------------------------
00001322                           390  INDEX0110: 
00001322  41F9 000014FA            391          LEA     OP_0110_TABLE, A0
00001328                           392          
00001328  4282                     393          CLR.L   D2
0000132A  4281                     394          CLR.L   D1
0000132C  2200                     395          MOVE.L  D0,D1               ; Current instruct word
0000132E  0241 0F00                396          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001332  143C 0008                397          MOVE.B  #right8, D2         
00001336  E469                     398          LSR.W   D2,D1               ; D1 = 2nd nibble
00001338  C2FC 0006                399          MULU    #6,D1               
0000133C  4EF0 1000                400          JMP     0(A0,D1)
00001340                           401  
00001340                           402  ; ------------------------------------
00001340                           403  ;   OP MOVEQ --> DONE
00001340                           404  ; ------------------------------------
00001340                           405  INDEX0111: 
00001340  4283                     406          CLR.L   D3
00001342  163C 0004                407          MOVE.B   #4, D3        ; long 
00001346                           408          
00001346  4EB9 00001C9C            409          JSR     MOVEQ_EA
0000134C  4EF8 113A                410          JMP     OP_FINISH
00001350                           411  
00001350                           412  ; ----------------------------------------------------------
00001350                           413  ;   OP DIVU, DIVS   -->  DONE
00001350                           414  ; ---------------------------------------------------------
00001350                           415  INDEX1000: 
00001350  4283                     416          CLR.L   D3
00001352  163C 0002                417          MOVE.B   #2, D3        ; word
00001356                           418          
00001356  4281                     419          CLR.L   D1
00001358  2200                     420          MOVE.L  D0,D1               ; Current instruct word
0000135A  0241 0100                421          ANDI.W  #$0100,D1         ; Extract 2nd nibble
0000135E  143C 0008                422          MOVE.B  #right8, D2         
00001362  E469                     423          LSR.W   D2,D1               ; D1 = 2nd nibble
00001364                           424  
00001364  B23C 0001                425          CMP.B  #1, D1
00001368  6700 06BE                426          BEQ     OP_DIVS           ; If last bit = 1 --> DIVS 
0000136C  6600 06D4                427          BNE     OP_DIVU            ; If lat bit = 0 --> DIVU
00001370                           428                  
00001370                           429  ; ------------------------------------
00001370                           430  ;   OP SUB --> Need to Implement
00001370                           431  ; ------------------------------------ 
00001370                           432  INDEX1001: 
00001370  16FC 0053                433          MOVE.B  #'S', (A3)+
00001374  16FC 0055                434          MOVE.B  #'U', (A3)+
00001378  16FC 0042                435          MOVE.B  #'B', (A3)+  
0000137C  16FC 002E                436          MOVE.B  #'.', (A3)+   
00001380                           437  
00001380  4EF9 000018A8            438          JMP     OP_SUB
00001386                           439  
00001386                           440  ; ------------------------------------
00001386                           441  ;   OP Code not supported 
00001386                           442  ; ------------------------------------         
00001386                           443  INDEX1010: 
00001386  4EF9 00001BAA            444          JMP     OP_UNSUPPORTED
0000138C                           445          
0000138C                           446  ; ------------------------------------
0000138C                           447  ;   OP CMP --> Forgot to do this one lol 
0000138C                           448  ; ------------------------------------         
0000138C                           449  INDEX1011: 
0000138C  16FC 0043                450          MOVE.B  #'C', (A3)+
00001390  16FC 004D                451          MOVE.B  #'M', (A3)+
00001394  16FC 0050                452          MOVE.B  #'P', (A3)+
00001398  16FC 002E                453          MOVE.B  #'.', (A3)+
0000139C                           454          
0000139C  4281                     455          CLR.L   D1 
0000139E  2200                     456          MOVE.L  D0,D1               ; Current instruct word
000013A0  0241 00C0                457          ANDI.W  #size,D1         ; Extract 2nd nibble
000013A4  143C 0008                458          MOVE.B  #right8, D2         
000013A8  E469                     459          LSR.W   D2,D1               ; D1 = 2nd nibble
000013AA                           460          
000013AA  4EF9 00001A5C            461          JMP     OP_CMP
000013B0                           462          
000013B0                           463  ; ------------------------------------
000013B0                           464  ;   OP MULU --> Done
000013B0                           465  ; ------------------------------------ 
000013B0                           466  INDEX1100: 
000013B0  16FC 004D                467          MOVE.B  #'M', (A3)+
000013B4  16FC 0055                468          MOVE.B  #'U', (A3)+
000013B8  16FC 004C                469          MOVE.B  #'L', (A3)+    
000013BC                           470          
000013BC  4283                     471          CLR.L   D3
000013BE  163C 0002                472          MOVE.B   #2, D3
000013C2                           473  
000013C2  4281                     474          CLR.L   D1
000013C4  2200                     475          MOVE.L  D0,D1               ; Current instruct word
000013C6  0241 0100                476          ANDI.W  #$100,D1         ; Extract 2nd nibble
000013CA  143C 0008                477          MOVE.B  #right8, D2         
000013CE  E469                     478          LSR.W   D2,D1               ; 
000013D0                           479          
000013D0  B23C 0001                480          CMP.B   #1, D1
000013D4  6700 0644                481          BEQ     OP_MULS  
000013D8  6600 0632                482          BNE     OP_MULU
000013DC                           483          
000013DC                           484  ; ------------------------------------
000013DC                           485  ;   OP ADD,ADDA     --> Needs a lot of work 
000013DC                           486  ; ------------------------------------
000013DC                           487  INDEX1101:
000013DC  4281                     488          CLR.L   D1 
000013DE  2200                     489          MOVE.L  D0,D1               ; Current instruct word
000013E0  0241 00C0                490          ANDI.W  #size,D1         ; Extract dest mode
000013E4  143C 0006                491          MOVE.B  #right6, D2         
000013E8  E469                     492          LSR.W   D2,D1
000013EA                           493      
000013EA  B23C 0003                494          CMP.B   #3,D1
000013EE  6700 0524                495          BEQ     OP_ADDA
000013F2  6600 0576                496          BNE     OP_ADD
000013F6                           497          
000013F6                           498  ; ------------------------------------
000013F6                           499  ;   OP ASL,ASR    --> Figure out Rotation 
000013F6                           500  ; ------------------------------------ 
000013F6                           501  INDEX1110:       
000013F6                           502  
000013F6                           503          ; Extract the size (7 -8 )
000013F6  4281                     504          CLR.L   D1 
000013F8  2200                     505          MOVE.L  D0,D1               ; Current instruct word
000013FA  0241 00C0                506          ANDI.W  #size,D1         ; Extract 2nd nibble
000013FE  143C 0006                507          MOVE.B  #right6, D2             
00001402  E469                     508          LSR.W   D2,D1               ; 
00001404                           509          
00001404  4283                     510          CLR.L   D3
00001406  1601                     511          MOVE.B   D1, D3 
00001408                           512  
00001408  B63C 0003                513          CMP.B #3, D3 
0000140C  6700 0008                514          BEQ     INDEX1110_MEM
00001410                           515  
00001410  4EF9 00001ADE            516          JMP     OP_ROTATION_CHECK
00001416                           517  INDEX1110_MEM:
00001416                           518          ; Memory Register Shift 11  
00001416  41F9 0000155A            519          LEA     OP_1110_TABLE, A0  
0000141C  4281                     520          CLR.L   D1
0000141E  4282                     521          CLR.L   D2
00001420  2200                     522          MOVE.L  D0,D1               ; Current instruct word
00001422  0241 0F00                523          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001426  143C 0008                524          MOVE.B  #right8, D2         
0000142A  E469                     525          LSR.W   D2,D1               ; D1 = 2nd nibble
0000142C  C2FC 0006                526          MULU    #6,D1               
00001430  4EF0 1000                527          JMP     0(A0,D1)
00001434                           528  ; ------------------------------------
00001434                           529  ;   OP Code not supported 
00001434                           530  ; ------------------------------------         
00001434                           531  INDEX1111:
00001434  4EF9 00001BAA            532          JMP     OP_UNSUPPORTED
0000143A                           533          
0000143A                           534  ; ------------------------------------
0000143A                           535  ;   JUMP Tables for OP codes 
0000143A                           536  ; ------------------------------------         
0000143A                           537  OP_0000_TABLE: 
0000143A  4EF9 000015BA            538          JMP     OP_ORI              ; 0: ORI
00001440  4EF9 00001BAA            539          JMP     OP_UNSUPPORTED      ; 1: Not supported  
00001446  4EF9 000015D0            540          JMP     OP_ANDI             ; 2: Not supported      ANDI
0000144C  4EF9 00001BAA            541          JMP     OP_UNSUPPORTED      ; 3: Not supported      
00001452  4EF9 000015EA            542          JMP     OP_SUBI             ; 4: Not supported      SUBI
00001458  4EF9 00001BAA            543          JMP     OP_UNSUPPORTED      ; 5: Not supported
0000145E  4EF9 00001604            544          JMP     OP_ADDI             ; 6: Not supported      ADDI
00001464  4EF9 00001BAA            545          JMP     OP_UNSUPPORTED      ; 7: Not supported
0000146A  4EF9 00001BAA            546          JMP     OP_UNSUPPORTED      ; 8: Not supported
00001470  4EF9 00001BAA            547          JMP     OP_UNSUPPORTED      ; 9: Not supported
00001476  4EF9 0000161E            548          JMP     OP_EORI             ; A: Not supported      EORI
0000147C  4EF9 00001BAA            549          JMP     OP_UNSUPPORTED      ; B: Not supported
00001482  4EF9 00001638            550          JMP     OP_CMPI             ; C: Not supported      CMPI
00001488  4EF9 00001BAA            551          JMP     OP_UNSUPPORTED      ; D: Not supported
0000148E  4EF9 00001BBA            552          JMP     OP_ERROR            ; E: Not supported      INVALID
00001494  4EF9 00001BAA            553          JMP     OP_UNSUPPORTED      ; F: Not supported  
0000149A                           554  
0000149A                           555  OP_01000_TABLE: 
0000149A  4EF9 00001BAA            556          JMP     OP_UNSUPPORTED      ; 0: Not supported      MOVE to SR , NEGX
000014A0  4EF9 000016E0            557          JMP     OP_LEA              ; 1: LEA An = 0   
000014A6  4EF9 00001BAA            558          JMP     OP_UNSUPPORTED      ; 2: Not supported      CLR
000014AC  4EF9 000016E0            559          JMP     OP_LEA              ; 3: LEA An = 1      
000014B2  4EF9 00001BAA            560          JMP     OP_UNSUPPORTED      ; 4: Not supported      NEG , MOVE to CCR    
000014B8  4EF9 000016E0            561          JMP     OP_LEA              ; 5: LEA An = 2     
000014BE  4EF9 00001BAA            562          JMP     OP_UNSUPPORTED      ; 6: Not supported      NOT      
000014C4  4EF9 000016E0            563          JMP     OP_LEA              ; 7: LEA An = 3
000014CA  4EF9 0000171E            564          JMP     OP_MOVEM0           ; 8: MOVEM D = 0     
000014D0  4EF9 000016E0            565          JMP     OP_LEA              ; 9: LEA An = 4
000014D6  4EF9 00001BAA            566          JMP     OP_UNSUPPORTED      ; A: Not supported      
000014DC  4EF9 000016E0            567          JMP     OP_LEA              ; B: LEA An = 5
000014E2  4EF9 000016FC            568          JMP     OP_MOVEM1           ; C: MOVEM D = 1      
000014E8  4EF9 000016E0            569          JMP     OP_LEA              ; D: LEA An = 6
000014EE  4EF9 00001786            570          JMP     OP_NOP_RTS_RTE      ; E: NOP, RTE,RTS, STOP    
000014F4  4EF9 000016E0            571          JMP     OP_LEA              ; F: LEA An = 7
000014FA                           572      
000014FA                           573  OP_0110_TABLE: 
000014FA  4EF9 000019F6            574          JMP     OP_BRA              ; 0: BRA
00001500  4EF9 000019E0            575          JMP     OP_BSR              ; 1: BSR  
00001506  4EF9 00001BAA            576          JMP     OP_UNSUPPORTED      ; 2: Not supported      BHI
0000150C  4EF9 00001BAA            577          JMP     OP_UNSUPPORTED      ; 3: Not supported      BLS
00001512  4EF9 00001BAA            578          JMP     OP_UNSUPPORTED      ; 4: Not supported      BCC
00001518  4EF9 00001BAA            579          JMP     OP_UNSUPPORTED      ; 5: Not supported      BCS
0000151E  4EF9 00001BAA            580          JMP     OP_UNSUPPORTED      ; 6: Not supported      BNE
00001524  4EF9 00001BAA            581          JMP     OP_UNSUPPORTED      ; 7: Not supported      BEQ
0000152A  4EF9 00001BAA            582          JMP     OP_UNSUPPORTED      ; 8: Not supported      BVC
00001530  4EF9 00001BAA            583          JMP     OP_UNSUPPORTED      ; 9: Not supported      BVS
00001536  4EF9 00001BAA            584          JMP     OP_UNSUPPORTED      ; A: Not supported      BPL
0000153C  4EF9 00001BAA            585          JMP     OP_UNSUPPORTED      ; B: Not supported      BMI
00001542  4EF9 00001BAA            586          JMP     OP_UNSUPPORTED      ; C: Not supported      BGE
00001548  4EF9 00001BAA            587          JMP     OP_UNSUPPORTED      ; D: Not supported      BLT
0000154E  4EF9 00001BAA            588          JMP     OP_UNSUPPORTED      ; E: Not supported      BGT
00001554  4EF9 00001BAA            589          JMP     OP_UNSUPPORTED      ; F: Not supported      BLE
0000155A                           590          
0000155A                           591  OP_1110_TABLE: 
0000155A  4EF9 00001ACC            592          JMP     OP_ASR_M              ; 0: ASR
00001560  4EF9 00001ABA            593          JMP     OP_ASL_M              ; 1: ASL  
00001566  4EF9 00001BAA            594          JMP     OP_UNSUPPORTED      ; 2: Not Supported      LSR     
0000156C  4EF9 00001BAA            595          JMP     OP_UNSUPPORTED      ; 3: Not Supported      LSL      
00001572  4EF9 00001BAA            596          JMP     OP_UNSUPPORTED      ; 4: Not Supported      ROXR     
00001578  4EF9 00001BAA            597          JMP     OP_UNSUPPORTED      ; 5: Not supported      ROXL      
0000157E  4EF9 00001BAA            598          JMP     OP_UNSUPPORTED      ; 6: Not supported      ROR
00001584  4EF9 00001BAA            599          JMP     OP_UNSUPPORTED      ; 7: Not supported      ROL
0000158A  4EF9 00001BBA            600          JMP     OP_ERROR            ; 8: Error     
00001590  4EF9 00001BBA            601          JMP     OP_ERROR            ; 9: Error       
00001596  4EF9 00001BBA            602          JMP     OP_ERROR            ; A: Error       
0000159C  4EF9 00001BBA            603          JMP     OP_ERROR            ; B: Error        
000015A2  4EF9 00001BBA            604          JMP     OP_ERROR            ; C: Error        
000015A8  4EF9 00001BBA            605          JMP     OP_ERROR            ; D: Error        
000015AE  4EF9 00001BBA            606          JMP     OP_ERROR            ; E: Error        
000015B4  4EF9 00001BBA            607          JMP     OP_ERROR            ; F: Error        
000015BA                           608  
000015BA                           609  ;---------------------------------------------------
000015BA                           610  ; ORI. Gathering instruct size and calling EA
000015BA                           611  ;-------------------------------------------------      
000015BA                           612  OP_ORI:
000015BA  16FC 004F                613          MOVE.B  #'O', (A3)+
000015BE  16FC 0052                614          MOVE.B  #'R', (A3)+
000015C2  16FC 0049                615          MOVE.B  #'I', (A3)+
000015C6  16FC 002E                616          MOVE.B  #'.', (A3)+
000015CA  4EF9 00001652            617          JMP     OP_ORI_SIZE_EXTACT
000015D0                           618  
000015D0                           619  OP_ANDI:     
000015D0  16FC 0041                620          MOVE.B  #'A', (A3)+
000015D4  16FC 004E                621          MOVE.B  #'N', (A3)+
000015D8  16FC 0044                622          MOVE.B  #'D', (A3)+
000015DC  16FC 0049                623          MOVE.B  #'I', (A3)+
000015E0  16FC 002E                624          MOVE.B  #'.', (A3)+
000015E4  4EF9 00001652            625          JMP     OP_ORI_SIZE_EXTACT
000015EA                           626  
000015EA                           627  OP_SUBI:     
000015EA  16FC 0053                628          MOVE.B  #'S', (A3)+
000015EE  16FC 0055                629          MOVE.B  #'U', (A3)+
000015F2  16FC 0042                630          MOVE.B  #'B', (A3)+
000015F6  16FC 0049                631          MOVE.B  #'I', (A3)+
000015FA  16FC 002E                632          MOVE.B  #'.', (A3)+
000015FE  4EF9 00001652            633          JMP     OP_ORI_SIZE_EXTACT
00001604                           634          
00001604                           635  OP_ADDI:     
00001604  16FC 0041                636          MOVE.B  #'A', (A3)+
00001608  16FC 0044                637          MOVE.B  #'D', (A3)+
0000160C  16FC 0044                638          MOVE.B  #'D', (A3)+
00001610  16FC 0049                639          MOVE.B  #'I', (A3)+
00001614  16FC 002E                640          MOVE.B  #'.', (A3)+
00001618  4EF9 00001652            641          JMP     OP_ORI_SIZE_EXTACT
0000161E                           642          
0000161E                           643  OP_EORI:     
0000161E  16FC 0045                644          MOVE.B  #'E', (A3)+
00001622  16FC 004F                645          MOVE.B  #'O', (A3)+
00001626  16FC 0052                646          MOVE.B  #'R', (A3)+
0000162A  16FC 0049                647          MOVE.B  #'I', (A3)+
0000162E  16FC 002E                648          MOVE.B  #'.', (A3)+
00001632  4EF9 00001652            649          JMP     OP_ORI_SIZE_EXTACT
00001638                           650  
00001638                           651  OP_CMPI:     
00001638  16FC 0043                652          MOVE.B  #'C', (A3)+
0000163C  16FC 004D                653          MOVE.B  #'M', (A3)+
00001640  16FC 0050                654          MOVE.B  #'P', (A3)+
00001644  16FC 0049                655          MOVE.B  #'I', (A3)+
00001648  16FC 002E                656          MOVE.B  #'.', (A3)+
0000164C  4EF9 00001652            657          JMP     OP_ORI_SIZE_EXTACT   
00001652                           658       
00001652                           659  OP_ORI_SIZE_EXTACT:     
00001652  4281                     660          CLR.L   D1    
00001654  2200                     661          MOVE.L  D0,D1               ; Current instruct word
00001656  0241 00C0                662          ANDI.W  #size,D1         ; Extract 2nd nibble
0000165A  143C 0006                663          MOVE.B  #right6, D2         
0000165E  E469                     664          LSR.W   D2,D1               ; D1 = 2nd nibble
00001660                           665  
00001660  B23C 0000                666          CMP.B   #0,D1       
00001664  6700 0012                667          BEQ     HELPER_ORIB             ;--> BYTE
00001668                           668          
00001668  B23C 0001                669          CMP.B   #1, D1      ;--> Word
0000166C  6700 001E                670          BEQ     HELPER_ORIW
00001670                           671          
00001670  B23C 0002                672          CMP.B   #2, D1      ; --> Long
00001674  6700 002A                673          BEQ     HELPER_ORIL
00001678                           674          
00001678                           675  
00001678                           676              
00001678                           677  HELPER_ORIB:
00001678  4283                     678          CLR.L   D3
0000167A  163C 0001                679          MOVE.B   #1, D3
0000167E  16FC 0042                680          MOVE.B  #'B', (A3)+
00001682                           681               
00001682  4EB9 00001BCA            682          JSR     IMMEDIATE_EA  
00001688  4EF8 113A                683          JMP     OP_FINISH
0000168C                           684      
0000168C                           685  HELPER_ORIW:
0000168C  4283                     686          CLR.L   D3
0000168E  163C 0002                687          MOVE.B   #2, D3
00001692  16FC 0057                688          MOVE.B  #'W', (A3)+
00001696                           689      
00001696  4EB9 00001BCA            690          JSR     IMMEDIATE_EA   
0000169C  4EF8 113A                691          JMP     OP_FINISH
000016A0                           692          
000016A0                           693  HELPER_ORIL:
000016A0  4283                     694          CLR.L   D3
000016A2  163C 0004                695          MOVE.B   #4, D3
000016A6  16FC 004C                696          MOVE.B  #'L', (A3)+
000016AA                           697      
000016AA  4EB9 00001BCA            698          JSR     IMMEDIATE_EA     
000016B0  4EF8 113A                699          JMP     OP_FINISH
000016B4                           700  ;---------------------------------------------------
000016B4                           701  ; MOVEA . calling EA
000016B4                           702  ;-------------------------------------------------         
000016B4                           703  OP_MOVEAW: 
000016B4  16FC 0041                704          MOVE.B  #'A', (A3)+
000016B8  16FC 002E                705          MOVE.B  #'.', (A3)+
000016BC  16FC 0057                706          MOVE.B  #'W', (A3)+
000016C0                           707  
000016C0  4EB9 00001C42            708          JSR     MOVEA_EA
000016C6  4EF8 113A                709          JMP     OP_FINISH
000016CA                           710          
000016CA                           711  OP_MOVEAL: 
000016CA  16FC 0041                712          MOVE.B  #'A', (A3)+
000016CE  16FC 002E                713          MOVE.B  #'.', (A3)+
000016D2  16FC 004C                714          MOVE.B  #'L', (A3)+
000016D6                           715  
000016D6                           716          ; Call EA for MOVEA
000016D6  4EB9 00001C42            717          JSR     MOVEA_EA
000016DC  4EF8 113A                718          JMP     OP_FINISH
000016E0                           719     
000016E0                           720  ;---------------------------------------------------
000016E0                           721  ; LEA . calling EA
000016E0                           722  ;-------------------------------------------------        
000016E0                           723  OP_LEA: 
000016E0  16FC 004C                724          MOVE.B  #'L', (A3)+
000016E4  16FC 0045                725          MOVE.B  #'E', (A3)+
000016E8  16FC 0041                726          MOVE.B  #'A', (A3)+
000016EC                           727      
000016EC                           728          ; Long Size 
000016EC  4283                     729          CLR.L   D3
000016EE  163C 0004                730          MOVE.B   #4, D3
000016F2                           731         
000016F2                           732          ; Call EA for LEA 
000016F2  4EB9 00001CD0            733          JSR     LEA_EA
000016F8  4EF8 113A                734          JMP     OP_FINISH
000016FC                           735          
000016FC                           736  ;---------------------------------------------------
000016FC                           737  ; MOVEM . calling EA and calculating instruct SIZE
000016FC                           738  ;-------------------------------------------------      
000016FC                           739  OP_MOVEM1: 
000016FC  16FC 004D                740          MOVE.B  #'M', (A3)+
00001700  16FC 004F                741          MOVE.B  #'O', (A3)+
00001704  16FC 0056                742          MOVE.B  #'V', (A3)+
00001708  16FC 0045                743          MOVE.B  #'E', (A3)+
0000170C  16FC 004D                744          MOVE.B  #'M', (A3)+
00001710  16FC 002E                745          MOVE.B  #'.', (A3)+
00001714                           746          
00001714  4284                     747          CLR.L   D4
00001716  183C 0001                748          MOVE.B   #1, D4
0000171A                           749          
0000171A  6000 0024                750          BRA     MOVEM_SIZE_CALC 
0000171E                           751  OP_MOVEM0: 
0000171E  16FC 004D                752          MOVE.B  #'M', (A3)+
00001722  16FC 004F                753          MOVE.B  #'O', (A3)+
00001726  16FC 0056                754          MOVE.B  #'V', (A3)+
0000172A  16FC 0045                755          MOVE.B  #'E', (A3)+
0000172E  16FC 004D                756          MOVE.B  #'M', (A3)+
00001732  16FC 002E                757          MOVE.B  #'.', (A3)+    
00001736                           758          
00001736  4284                     759          CLR.L   D4
00001738  183C 0000                760          MOVE.B   #0, D4
0000173C                           761          
0000173C  6000 0002                762          BRA     MOVEM_SIZE_CALC  
00001740                           763  
00001740                           764  MOVEM_SIZE_CALC: 
00001740  4281                     765          CLR.L   D1
00001742  2200                     766          MOVE.L  D0,D1               ; Current instruct word
00001744  0241 0040                767          ANDI.W  #$0040,D1         ; Extract S 
00001748  143C 0006                768          MOVE.B  #right6, D2         
0000174C  E469                     769          LSR.W   D2,D1               ; 
0000174E                           770          
0000174E  B23C 0000                771          CMP.B   #0, D1
00001752  6700 000A                772          BEQ     MOVEM_W
00001756                           773          
00001756  B23C 0001                774          CMP.B   #1, D1
0000175A  6700 0016                775          BEQ     MOVEM_L
0000175E                           776          
0000175E                           777  MOVEM_W: 
0000175E  16FC 0057                778          MOVE.B  #'W', (A3)+
00001762  4283                     779          CLR.L   D3 
00001764  163C 0002                780          MOVE.B   #2,D3 
00001768                           781          
00001768                           782          ; CALL MOVEM EA
00001768  4EB9 00001C84            783          JSR     MOVEM_EA
0000176E  4EF8 113A                784          JMP     OP_FINISH
00001772                           785          
00001772                           786  MOVEM_L: 
00001772  16FC 004C                787          MOVE.B  #'L', (A3)+
00001776  4283                     788          CLR.L   D3 
00001778  163C 0004                789          MOVE.B   #4,D3 
0000177C                           790          
0000177C                           791          ; CALL MOVEM EA 
0000177C  4EB9 00001C84            792          JSR     MOVEM_EA
00001782  4EF8 113A                793          JMP     OP_FINISH       
00001786                           794  ;---------------------------------------------------
00001786                           795  ; NOP, RTS, RTE, STOP
00001786                           796  ;-------------------------------------------------      
00001786                           797  OP_NOP_RTS_RTE: 
00001786  4281                     798          CLR.L   D1
00001788  2200                     799          MOVE.L  D0,D1               ; Current instruct word
0000178A                           800          
0000178A                           801          ; Check third 3 nibble for 0111 if not error 
0000178A  0241 0FF0                802          ANDI.W  #$0FF0, D1
0000178E  143C 0004                803          MOVE.B  #right4, D2         
00001792  E469                     804          LSR.W   D2,D1               ; D1 = 2nd nibble
00001794                           805          
00001794  B27C 0E70                806          CMP.W   #$E70, D1
00001798  6700 0420                807          BEQ     OP_ERROR
0000179C                           808          
0000179C  4281                     809          CLR.L   D1
0000179E  2200                     810          MOVE.L  D0,D1               ; Current instruct word
000017A0                           811          
000017A0                           812          ; Check last 4 bits 
000017A0  0241 000F                813          ANDI.W  #$000F, D1
000017A4                           814  
000017A4  B23C 0001                815          CMP.B   #1, D1       NOP --> 0001 
000017A8  6700 0020                816          BEQ     OP_NOP
000017AC                           817  
000017AC  B23C 0002                818          CMP.B   #2, D1       NOP --> 0001 
000017B0  6700 0028                819          BEQ     OP_STOP
000017B4                           820          
000017B4  B23C 0003                821          CMP.B   #3, D1      RTE --> 0011 
000017B8  6700 0034                822          BEQ     OP_RTE
000017BC                           823  
000017BC  B23C 0005                824          CMP.B   #5, D1      RTS --> 0101
000017C0  6700 003C                825          BEQ     OP_RTS       
000017C4                           826  
000017C4  4EF9 00001BBA            827          JMP     OP_ERROR    ERROR CODE
000017CA                           828  
000017CA                           829  OP_NOP: 
000017CA  16FC 004E                830          MOVE.B  #'N', (A3)+
000017CE  16FC 004F                831          MOVE.B  #'O', (A3)+
000017D2  16FC 0050                832          MOVE.B  #'P', (A3)+
000017D6                           833          
000017D6                           834          ; Loop back into OP Decode
000017D6  4EF8 113A                835          JMP     OP_FINISH
000017DA                           836  OP_STOP: 
000017DA  16FC 0053                837          MOVE.B  #'S', (A3)+
000017DE  16FC 0054                838          MOVE.B  #'T', (A3)+
000017E2  16FC 004F                839          MOVE.B  #'O', (A3)+
000017E6  16FC 0050                840          MOVE.B  #'P', (A3)+     
000017EA                           841  
000017EA  4EF8 113A                842          JMP     OP_FINISH   
000017EE                           843  OP_RTE: 
000017EE  16FC 0052                844          MOVE.B  #'R', (A3)+
000017F2  16FC 0054                845          MOVE.B  #'T', (A3)+
000017F6  16FC 0045                846          MOVE.B  #'E', (A3)+
000017FA                           847          
000017FA  4EF8 113A                848          JMP     OP_FINISH
000017FE                           849  OP_RTS: 
000017FE  16FC 0052                850          MOVE.B  #'R', (A3)+
00001802  16FC 0054                851          MOVE.B  #'T', (A3)+
00001806  16FC 0053                852          MOVE.B  #'S', (A3)+
0000180A                           853          
0000180A  4EF8 113A                854          JMP     OP_FINISH
0000180E                           855          
0000180E                           856  ;---------------------------------------------------
0000180E                           857  ; SUBQ and ADDQ. Gathering instruct size and calling EA
0000180E                           858  ;-------------------------------------------------        
0000180E                           859  OP_SUBQ: 
0000180E  16FC 0053                860          MOVE.B  #'S', (A3)+
00001812  16FC 0055                861          MOVE.B  #'U', (A3)+
00001816  16FC 0042                862          MOVE.B  #'B', (A3)+
0000181A  16FC 0051                863          MOVE.B  #'Q', (A3)+
0000181E  16FC 002E                864          MOVE.B  #'.', (A3)+         
00001822  4EF9 00001842            865          JMP     HELPER__ADDSUBQ_SIZE_CAL      
00001828                           866          
00001828                           867          
00001828                           868  OP_ADDQ:    
00001828  16FC 0041                869          MOVE.B  #'A', (A3)+
0000182C  16FC 0044                870          MOVE.B  #'D', (A3)+
00001830  16FC 0044                871          MOVE.B  #'D', (A3)+
00001834  16FC 0051                872          MOVE.B  #'Q', (A3)+
00001838  16FC 002E                873          MOVE.B  #'.', (A3)+         
0000183C  4EF9 00001842            874          JMP     HELPER__ADDSUBQ_SIZE_CAL
00001842                           875  
00001842                           876  HELPER__ADDSUBQ_SIZE_CAL:
00001842  4281                     877          CLR.L   D1 
00001844  2200                     878          MOVE.L  D0,D1               ; Current instruct word
00001846  0241 00C0                879          ANDI.W  #size,D1         ; Extract 2nd nibble
0000184A  143C 0006                880          MOVE.B  #right6, D2         
0000184E  E469                     881          LSR.W   D2,D1               ; D1 = 2nd nibble
00001850                           882          
00001850  4283                     883          CLR.L   D3
00001852  1601                     884          MOVE.B   D1, D3  
00001854                           885  
00001854  B63C 0002                886          CMP.B   #2, D3
00001858  6700 0012                887          BEQ     HELPER_ADDSUBQ_CONVERT_L
0000185C                           888          
0000185C  B63C 0001                889          CMP.B   #1, D3
00001860  6700 001E                890          BEQ     HELPER_ADDSUBQ_CONVERT_W
00001864                           891          
00001864  B63C 0000                892          CMP.B   #0, D3   
00001868  6700 002A                893          BEQ     HELPER_ADDSUBQ_CONVERT_B
0000186C                           894          
0000186C                           895  HELPER_ADDSUBQ_CONVERT_L: 
0000186C  4283                     896          CLR.L   D3
0000186E  163C 0004                897          MOVE.B  #4, D3 
00001872  16FC 004C                898          MOVE.B  #'L', (A3)+   
00001876                           899          
00001876                           900          ; CALL EA 
00001876  4EB9 00001DA8            901          JSR     ADDQ_EA
0000187C  4EF8 113A                902          JMP     OP_FINISH
00001880                           903          
00001880                           904  HELPER_ADDSUBQ_CONVERT_W: 
00001880  4283                     905          CLR.L   D3
00001882  163C 0002                906          MOVE.B  #2, D3 
00001886  16FC 0057                907          MOVE.B  #'W', (A3)+   
0000188A                           908          
0000188A                           909          ; CALL EA
0000188A  4EB9 00001DA8            910          JSR     ADDQ_EA
00001890  4EF8 113A                911          JMP     OP_FINISH  
00001894                           912        
00001894                           913  HELPER_ADDSUBQ_CONVERT_B: 
00001894  4283                     914          CLR.L   D3
00001896  163C 0001                915          MOVE.B  #1, D3 
0000189A  16FC 0042                916          MOVE.B  #'B', (A3)+ 
0000189E                           917          
0000189E                           918          ; CALL EA  
0000189E  4EB9 00001DA8            919          JSR     ADDQ_EA
000018A4  4EF8 113A                920          JMP     OP_FINISH
000018A8                           921  ;---------------------------------------------------
000018A8                           922  ; SUB. Gathering instruct size and calling EA
000018A8                           923  ;-------------------------------------------------  
000018A8                           924  OP_SUB:
000018A8  4EF9 000018AE            925          JMP     HELPER_SUB_SIZE_CAL
000018AE                           926  
000018AE                           927  HELPER_SUB_SIZE_CAL:
000018AE  4281                     928          CLR.L   D1 
000018B0  2200                     929          MOVE.L  D0,D1               ; Current instruct word
000018B2  0241 00C0                930          ANDI.W  #size,D1         ; Extract 2nd nibble
000018B6  143C 0006                931          MOVE.B  #right6, D2         
000018BA  E469                     932          LSR.W   D2,D1               ; D1 = 2nd nibble
000018BC                           933          
000018BC  4283                     934          CLR.L   D3
000018BE  1601                     935          MOVE.B   D1, D3  
000018C0                           936  
000018C0  B63C 0002                937          CMP.B   #2, D3
000018C4  6700 0012                938          BEQ     HELPER_SUB_CONVERT_L
000018C8                           939          
000018C8  B63C 0001                940          CMP.B   #1, D3
000018CC  6700 001E                941          BEQ     HELPER_SUB_CONVERT_W
000018D0                           942          
000018D0  B63C 0000                943          CMP.B   #0, D3   
000018D4  6700 002A                944          BEQ     HELPER_SUB_CONVERT_B
000018D8                           945          
000018D8                           946  HELPER_SUB_CONVERT_L: 
000018D8  4283                     947          CLR.L   D3
000018DA  163C 0004                948          MOVE.B  #4, D3 
000018DE  16FC 004C                949          MOVE.B  #'L', (A3)+   
000018E2                           950  
000018E2                           951          ; CALL EA  
000018E2  4EB9 00001D76            952          JSR     SUB_EA
000018E8  4EF8 113A                953          JMP     OP_FINISH  
000018EC                           954          
000018EC                           955  HELPER_SUB_CONVERT_W: 
000018EC  4283                     956          CLR.L   D3
000018EE  163C 0002                957          MOVE.B  #2, D3 
000018F2  16FC 0057                958          MOVE.B  #'W', (A3)+   
000018F6                           959  
000018F6                           960          ; CALL EA
000018F6  4EB9 00001D76            961          JSR     SUB_EA
000018FC  4EF8 113A                962          JMP     OP_FINISH  
00001900                           963          
00001900                           964  HELPER_SUB_CONVERT_B: 
00001900  4283                     965          CLR.L   D3
00001902  163C 0001                966          MOVE.B  #1, D3 
00001906  16FC 0042                967          MOVE.B  #'B', (A3)+   
0000190A                           968  
0000190A                           969          ; CALL EA
0000190A  4EB9 00001D76            970          JSR     SUB_EA
00001910  4EF8 113A                971          JMP     OP_FINISH    
00001914                           972        
00001914                           973  ;---------------------------------------------------
00001914                           974  ; ADDA. Gathering instruct size and calling EA
00001914                           975  ;-------------------------------------------------       
00001914                           976  OP_ADDA: 
00001914  16FC 0041                977          MOVE.B  #'A', (A3)+
00001918  16FC 0044                978          MOVE.B  #'D', (A3)+
0000191C  16FC 0044                979          MOVE.B  #'D', (A3)+
00001920  16FC 0041                980          MOVE.B  #'A', (A3)+
00001924  16FC 002E                981          MOVE.B  #'.', (A3)+
00001928                           982          
00001928                           983          ; Calculate instruct size
00001928  4281                     984          CLR.L   D1
0000192A  2200                     985          MOVE.L  D0,D1               ; Current instruct word
0000192C  0241 0100                986          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001930  143C 0008                987          MOVE.B  #right8, D2         
00001934  E469                     988          LSR.W   D2,D1               ; 
00001936                           989          
00001936  B23C 0001                990          CMP.B   #1, D1
0000193A  6700 0006                991          BEQ     HELPER_ADDA_L
0000193E  6600 0016                992          BNE     HELPER_ADDA_W
00001942                           993          ; EA Calculator 
00001942                           994  HELPER_ADDA_L: 
00001942  4283                     995          CLR.L   D3
00001944  163C 0004                996          MOVE.B   #4, D3 
00001948  16FC 004C                997          MOVE.B   #'L', (A3)+
0000194C                           998          
0000194C                           999          ;CALL EA
0000194C  4EB9 00001E60           1000          JSR     ADDA_EA
00001952  4EF8 113A               1001          JMP     OP_FINISH 
00001956                          1002          
00001956                          1003  HELPER_ADDA_W: 
00001956  4283                    1004          CLR.L   D3
00001958  163C 0002               1005          MOVE.B  #2, D3 
0000195C  16FC 0057               1006          MOVE.B  #'W', (A3)+
00001960                          1007  
00001960                          1008          ;CALL EA
00001960  4EB9 00001E60           1009          JSR     ADDA_EA
00001966  4EF8 113A               1010          JMP     OP_FINISH 
0000196A                          1011  ;---------------------------------------------------
0000196A                          1012  ; ADD. Gathering instruct size and calling EA
0000196A                          1013  ;-------------------------------------------------       
0000196A                          1014  OP_ADD: 
0000196A  16FC 0041               1015          MOVE.B  #'A', (A3)+
0000196E  16FC 0044               1016          MOVE.B  #'D', (A3)+
00001972  16FC 0044               1017          MOVE.B  #'D', (A3)+
00001976  16FC 002E               1018          MOVE.B  #'.', (A3)+
0000197A                          1019          
0000197A                          1020          ; Calculate instruct size
0000197A                          1021          
0000197A                          1022  HELPER_ADD_SIZE_CAL:
0000197A  4281                    1023          CLR.L   D1 
0000197C  2200                    1024          MOVE.L  D0,D1               ; Current instruct word
0000197E  0241 00C0               1025          ANDI.W  #size,D1         ; Extract 2nd nibble
00001982  143C 0006               1026          MOVE.B  #right6, D2         
00001986  E469                    1027          LSR.W   D2,D1               ; 
00001988                          1028          
00001988  4283                    1029          CLR.L   D3
0000198A  1601                    1030          MOVE.B   D1, D3  
0000198C                          1031  
0000198C  B63C 0002               1032          CMP.B   #2, D3
00001990  6700 0012               1033          BEQ     HELPER_ADD_CONVERT_L
00001994                          1034          
00001994  B63C 0001               1035          CMP.B   #1, D3
00001998  6700 001E               1036          BEQ     HELPER_ADD_CONVERT_W
0000199C                          1037          
0000199C  B63C 0000               1038          CMP.B   #0, D3   
000019A0  6700 002A               1039          BEQ     HELPER_ADD_CONVERT_B
000019A4                          1040                  
000019A4                          1041  HELPER_ADD_CONVERT_L: 
000019A4  4283                    1042          CLR.L   D3
000019A6  163C 0004               1043          MOVE.B  #4, D3 
000019AA  16FC 004C               1044          MOVE.B  #'L', (A3)+   
000019AE                          1045  
000019AE                          1046          ; CALL EA  
000019AE  4EB9 00001E5A           1047          JSR     ADD_EA
000019B4  4EF8 113A               1048          JMP     OP_FINISH 
000019B8                          1049          
000019B8                          1050  HELPER_ADD_CONVERT_W: 
000019B8  4283                    1051          CLR.L   D3
000019BA  163C 0002               1052          MOVE.B  #2, D3 
000019BE  16FC 0057               1053          MOVE.B  #'W', (A3)+   
000019C2                          1054  
000019C2                          1055          ; CALL EA
000019C2  4EB9 00001E5A           1056          JSR     ADD_EA
000019C8  4EF8 113A               1057          JMP     OP_FINISH
000019CC                          1058          
000019CC                          1059  HELPER_ADD_CONVERT_B: 
000019CC  4283                    1060          CLR.L   D3
000019CE  163C 0001               1061          MOVE.B  #1, D3 
000019D2  16FC 0042               1062          MOVE.B  #'B', (A3)+   
000019D6                          1063  
000019D6                          1064          ; CALL EA
000019D6  4EB9 00001E5A           1065          JSR     ADD_EA
000019DC  4EF8 113A               1066          JMP     OP_FINISH             
000019E0                          1067  ;---------------------------------------------------
000019E0                          1068  ; BSR. Gathering instruct size and calling EA
000019E0                          1069  ;-------------------------------------------------         
000019E0                          1070  OP_BSR:    
000019E0  16FC 0042               1071          MOVE.B  #'B', (A3)+
000019E4  16FC 0053               1072          MOVE.B  #'S', (A3)+
000019E8  16FC 0052               1073          MOVE.B  #'R', (A3)+
000019EC                          1074   
000019EC  4EB9 00001D12           1075          JSR     BSR_EA
000019F2  4EF8 113A               1076          JMP     OP_FINISH
000019F6                          1077          
000019F6                          1078  ;---------------------------------------------------
000019F6                          1079  ; BRA   Check. Gathering instruct size and calling EA
000019F6                          1080  ;------------------------------------------------- 
000019F6                          1081  OP_BRA:    
000019F6  16FC 0042               1082          MOVE.B  #'B', (A3)+
000019FA  16FC 0052               1083          MOVE.B  #'R', (A3)+
000019FE  16FC 0041               1084          MOVE.B  #'A', (A3)+
00001A02                          1085       
00001A02                          1086          ; Call BRA EA 
00001A02  4EB9 00001D0C           1087          JSR     BRA_EA
00001A08  4EF8 113A               1088          JMP     OP_FINISH
00001A0C                          1089          
00001A0C                          1090  ;---------------------------------------------------
00001A0C                          1091  ; MULU  calling EA
00001A0C                          1092  ;------------------------------------------------- 
00001A0C                          1093  OP_MULU: 
00001A0C  16FC 0055               1094          MOVE.B  #'U', (A3)+
00001A10                          1095  
00001A10                          1096          ; Call EA
00001A10  4EB9 00001E20           1097          JSR     MULU_EA
00001A16  4EF8 113A               1098          JMP     OP_FINISH
00001A1A                          1099  
00001A1A                          1100  ;---------------------------------------------------
00001A1A                          1101  ; MULS  calling EA
00001A1A                          1102  ;------------------------------------------------- 
00001A1A                          1103  OP_MULS: 
00001A1A  16FC 0053               1104          MOVE.B  #'S', (A3)+
00001A1E                          1105  
00001A1E                          1106          ; Call EA
00001A1E  4EB9 00001E20           1107          JSR     MULU_EA
00001A24  4EF8 113A               1108          JMP     OP_FINISH        
00001A28                          1109          
00001A28                          1110  ;---------------------------------------------------
00001A28                          1111  ; DIVS   calling EA
00001A28                          1112  ;------------------------------------------------- 
00001A28                          1113  OP_DIVS: 
00001A28  16FC 0044               1114          MOVE.B  #'D', (A3)+
00001A2C  16FC 0049               1115          MOVE.B  #'I', (A3)+
00001A30  16FC 0056               1116          MOVE.B  #'V', (A3)+
00001A34  16FC 0053               1117          MOVE.B  #'S', (A3)+
00001A38                          1118          
00001A38                          1119          ; Call EA
00001A38  4EB9 00001D3A           1120          JSR     DIVS_EA
00001A3E  4EF8 113A               1121          JMP     OP_FINISH
00001A42                          1122  ;---------------------------------------------------
00001A42                          1123  ; DIVU   calling EA
00001A42                          1124  ;------------------------------------------------- 
00001A42                          1125  OP_DIVU:
00001A42  16FC 0044               1126          MOVE.B  #'D', (A3)+
00001A46  16FC 0049               1127          MOVE.B  #'I', (A3)+
00001A4A  16FC 0056               1128          MOVE.B  #'V', (A3)+
00001A4E  16FC 0055               1129          MOVE.B  #'U', (A3)+
00001A52                          1130          
00001A52                          1131          ; Call EA
00001A52  4EB9 00001D34           1132          JSR     DIVU_EA
00001A58  4EF8 113A               1133          JMP     OP_FINISH
00001A5C                          1134  ;------------------------------------------------
00001A5C                          1135  ; CMP   calling EA and finding size
00001A5C                          1136  ;------------------------------------------------ 
00001A5C                          1137  OP_CMP: 
00001A5C  4EF9 00001A62           1138        JMP   HELPER_CMP_SIZE_CAL   
00001A62                          1139       
00001A62                          1140  HELPER_CMP_SIZE_CAL:         
00001A62  4283                    1141          CLR.L   D3
00001A64  1601                    1142          MOVE.B   D1, D3  
00001A66                          1143  
00001A66  B63C 0002               1144          CMP.B   #2, D3
00001A6A  6700 0012               1145          BEQ     HELPER_CMP_CONVERT_L
00001A6E                          1146          
00001A6E  B63C 0001               1147          CMP.B   #1, D3
00001A72  6700 001E               1148          BEQ     HELPER_CMP_CONVERT_W
00001A76                          1149          
00001A76  B63C 0000               1150          CMP.B   #0, D3   
00001A7A  6700 002A               1151          BEQ     HELPER_CMP_CONVERT_B
00001A7E                          1152          
00001A7E                          1153  HELPER_CMP_CONVERT_L: 
00001A7E  4283                    1154          CLR.L   D3
00001A80  163C 0004               1155          MOVE.B  #4, D3 
00001A84  16FC 004C               1156          MOVE.B  #'L', (A3)+   
00001A88                          1157          ; CALL EA   
00001A88  4EB9 00001DE6           1158          JSR     CMP_EA
00001A8E  4EF8 113A               1159          JMP     OP_FINISH
00001A92                          1160          
00001A92                          1161  HELPER_CMP_CONVERT_W: 
00001A92  4283                    1162          CLR.L   D3
00001A94  163C 0002               1163          MOVE.B  #2, D3 
00001A98  16FC 0057               1164          MOVE.B  #'W', (A3)+   
00001A9C                          1165          ; CALL EA
00001A9C  4EB9 00001DE6           1166          JSR     CMP_EA
00001AA2  4EF8 113A               1167          JMP     OP_FINISH
00001AA6                          1168          
00001AA6                          1169  HELPER_CMP_CONVERT_B: 
00001AA6  4283                    1170          CLR.L   D3
00001AA8  163C 0001               1171          MOVE.B  #1, D3 
00001AAC  16FC 0042               1172          MOVE.B  #'B', (A3)+ 
00001AB0                          1173    
00001AB0                          1174          ; CALL EA
00001AB0  4EB9 00001DE6           1175          JSR     CMP_EA
00001AB6  4EF8 113A               1176          JMP     OP_FINISH
00001ABA                          1177  
00001ABA                          1178  ;---------------------------------------------------
00001ABA                          1179  ; ASL   Memory Shift only word size 
00001ABA                          1180  ;-------------------------------------------------             
00001ABA                          1181  OP_ASL_M: 
00001ABA  16FC 0041               1182          MOVE.B  #'A', (A3)+
00001ABE  16FC 0053               1183          MOVE.B  #'S', (A3)+
00001AC2  16FC 004C               1184          MOVE.B  #'L', (A3)+ 
00001AC6  4283                    1185          CLR.L   D3
00001AC8  163C 0002               1186          MOVE.B  #2, D3 
00001ACC                          1187          ; Get ready to call Mode 7 subclass 1
00001ACC                          1188          
00001ACC                          1189  ;---------------------------------------------------
00001ACC                          1190  ; ASR    Memory Shift only word size 
00001ACC                          1191  ;------------------------------------------------- 
00001ACC                          1192  OP_ASR_M: 
00001ACC  16FC 0041               1193          MOVE.B  #'A', (A3)+
00001AD0  16FC 0053               1194          MOVE.B  #'S', (A3)+
00001AD4  16FC 0052               1195          MOVE.B  #'R', (A3)+ 
00001AD8                          1196          
00001AD8  4283                    1197          CLR.L   D3
00001ADA  163C 0002               1198          MOVE.B  #2, D3 
00001ADE                          1199          ; Get ready to call Mode 7 subclass 1
00001ADE                          1200          
00001ADE                          1201  *-------------------------------------------------
00001ADE                          1202  *  Rotation Checker, Mainly looking for ASL/ASR
00001ADE                          1203  *------------------------------------------------        
00001ADE                          1204  OP_ROTATION_CHECK: 
00001ADE                          1205         ; Check the 4 - 5 bit for 00 
00001ADE  4281                    1206          CLR.L   D1 
00001AE0  2200                    1207          MOVE.L  D0,D1               ; Current instruct word
00001AE2  0241 0018               1208          ANDI.W  #$18,D1         ; Extract 2nd nibble
00001AE6  143C 0003               1209          MOVE.B  #3, D2         
00001AEA  E469                    1210          LSR.W   D2,D1    
00001AEC                          1211          
00001AEC  B23C 0000               1212          CMP.B   #0, D1      ; AS
00001AF0  6700 001A               1213          BEQ     OP_ROTATION_HELP
00001AF4                          1214          
00001AF4  B23C 0001               1215          CMP.B   #1, D1      ; LS
00001AF8  6700 00B0               1216          BEQ     OP_UNSUPPORTED
00001AFC                          1217  
00001AFC  B23C 0002               1218          CMP.B   #2, D1      ; ROXd
00001B00  6700 00A8               1219          BEQ     OP_UNSUPPORTED
00001B04                          1220          
00001B04  B23C 0003               1221          CMP.B   #3, D1      ; ROXd
00001B08  6700 00A0               1222          BEQ     OP_UNSUPPORTED   
00001B0C                          1223   
00001B0C                          1224  OP_ROTATION_HELP: 
00001B0C                          1225          ; Find the Rotation 
00001B0C                          1226          ; Extract the size 
00001B0C  4281                    1227          CLR.L   D1 
00001B0E  2200                    1228          MOVE.L  D0,D1               ; Current instruct word
00001B10  0241 0100               1229          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001B14  143C 0008               1230          MOVE.B  #right8, D2             
00001B18  E469                    1231          LSR.W   D2,D1  
00001B1A                          1232  
00001B1A  B23C 0000               1233          CMP.B   #0, D1      ; Right Rotation 
00001B1E  6700 007A               1234          BEQ     OP_ASR_ADDER
00001B22                          1235          
00001B22  B23C 0001               1236          CMP.B   #1, D1      ; Left rotation
00001B26  6700 0062               1237          BEQ     OP_ASL_ADDER
00001B2A                          1238          
00001B2A                          1239  OP_ROTATION_SIZE_HELP:        
00001B2A                          1240          ; Check the size 
00001B2A  B63C 0002               1241          CMP.B   #2, D3
00001B2E  6700 0042               1242          BEQ     OP_ROTATION_SIZE_L    
00001B32                          1243          
00001B32  B63C 0001               1244          CMP.B   #1, D3
00001B36  6700 0022               1245          BEQ     OP_ROTATION_SIZE_W   
00001B3A                          1246          
00001B3A  B63C 0000               1247          CMP.B   #0, D3
00001B3E  6700 0002               1248          BEQ     OP_ROTATION_SIZE_B 
00001B42                          1249          
00001B42                          1250          
00001B42                          1251  OP_ROTATION_SIZE_B: 
00001B42  4283                    1252          CLR.L   D3
00001B44  163C 0001               1253          MOVE.B  #1, D3     
00001B48  16FC 002E               1254          MOVE.B  #'.', (A3)+
00001B4C  16FC 0042               1255          MOVE.B  #'B', (A3)+
00001B50                          1256          
00001B50  4EB9 00001E9C           1257          JSR     ASL_EA
00001B56  4EF8 113A               1258          JMP     OP_FINISH
00001B5A                          1259          
00001B5A                          1260  OP_ROTATION_SIZE_W: 
00001B5A  4283                    1261          CLR.L   D3
00001B5C  163C 0002               1262          MOVE.B  #2, D3 
00001B60  16FC 002E               1263          MOVE.B  #'.', (A3)+
00001B64  16FC 0057               1264          MOVE.B  #'W', (A3)+
00001B68                          1265          
00001B68  4EB9 00001E9C           1266          JSR     ASL_EA
00001B6E  4EF8 113A               1267          JMP     OP_FINISH
00001B72                          1268          
00001B72                          1269  OP_ROTATION_SIZE_L:
00001B72  4283                    1270          CLR.L   D3
00001B74  163C 0004               1271          MOVE.B  #4, D3  
00001B78  16FC 002E               1272          MOVE.B  #'.', (A3)+
00001B7C  16FC 004C               1273          MOVE.B  #'L', (A3)+
00001B80                          1274          
00001B80  4EB9 00001E9C           1275          JSR     ASL_EA
00001B86  4EF8 113A               1276          JMP     OP_FINISH
00001B8A                          1277          
00001B8A                          1278  OP_ASL_ADDER: 
00001B8A  16FC 0041               1279          MOVE.B  #'A', (A3)+
00001B8E  16FC 0053               1280          MOVE.B  #'S', (A3)+
00001B92  16FC 004C               1281          MOVE.B  #'L', (A3)+    
00001B96                          1282          
00001B96  4EF8 1B2A               1283          JMP     OP_ROTATION_SIZE_HELP 
00001B9A                          1284          
00001B9A                          1285  OP_ASR_ADDER: 
00001B9A  16FC 0041               1286          MOVE.B  #'A', (A3)+
00001B9E  16FC 0053               1287          MOVE.B  #'S', (A3)+
00001BA2  16FC 0052               1288          MOVE.B  #'R', (A3)+    
00001BA6                          1289          
00001BA6  4EF8 1B2A               1290          JMP     OP_ROTATION_SIZE_HELP  
00001BAA                          1291  ;--------------------------------------------------
00001BAA                          1292  ; Error Handling    
00001BAA                          1293  ;------------------------------------------------- 
00001BAA                          1294  OP_UNSUPPORTED: 
00001BAA  43F9 000025CE           1295          LEA     DECODE_OP_UNSUPPORT, A1
00001BB0  103C 000E               1296          MOVE.B  #task14,D0
00001BB4  4E4F                    1297          TRAP    #15           Display  Error Message
00001BB6  4EF8 113A               1298          JMP     OP_FINISH
00001BBA                          1299          
00001BBA                          1300  OP_ERROR: 
00001BBA  43F9 00002591           1301          LEA     DECODE_OP_ERROR, A1
00001BC0  103C 000E               1302          MOVE.B  #task14,D0
00001BC4  4E4F                    1303          TRAP    #15           Display  Error Message
00001BC6  4EF8 113A               1304          JMP     OP_FINISH
00001BCA                          1305                
00001BCA                          1306  ;--------------------------------------------------
00001BCA                          1307  ; Effective Address Start   
00001BCA                          1308  ;------------------------------------------------- 
00001BCA                          1309  
00001BCA                          1310  ;----------------------------------------------
00001BCA                          1311  ;IMMEDIATE_EA for ORI,ANDI,SUBI,ADDI
00001BCA                          1312      *D3 = # of ITOA Loop ITERATION
00001BCA                          1313      *D1 = size of instruct
00001BCA                          1314      *D0 = Shift Data
00001BCA                          1315      *D5 = Mode
00001BCA                          1316      *D6 = Register
00001BCA                          1317      *D7 = current immediate data
00001BCA                          1318  ;----------------------------------------------    
00001BCA                          1319  IMMEDIATE_EA
00001BCA                          1320          ; Extract dst mode and register
00001BCA  4EB9 00001C16           1321          JSR     MOVE_IMM_DATA
00001BD0                          1322          
00001BD0  4286                    1323          CLR.L   D6
00001BD2  4285                    1324          CLR.L   D5
00001BD4  2C00                    1325          MOVE.L  D0,D6               ; Current Instruct word Register    
00001BD6  2A00                    1326          MOVE.L  D0,D5               ; Current instruct word Mode
00001BD8                          1327          
00001BD8  0246 0007               1328          ANDI.W  #$7,D6              ; Gets the Register
00001BDC                          1329          
00001BDC  0245 0038               1330          ANDI.W  #$38,D5              
00001BE0  103C 0003               1331          MOVE.B  #$3, D0            
00001BE4  E06D                    1332          LSR.W   D0,D5               ; Extract the Mode      
00001BE6                          1333           
00001BE6  BA3C 0001               1334          CMP.B   #1, D5          ; Check for valid dst 
00001BEA  6700 0614               1335          BEQ     DATA_ERROR    
00001BEE                          1336          
00001BEE  1203                    1337          MOVE.B  D3,D1           ; Size Instruct 
00001BF0  C6FC 0002               1338          MULU    #2, D3          ; Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
00001BF4                          1339   
00001BF4  16FC 0020               1340          MOVE.B  #' ', (A3)+
00001BF8  16FC 0023               1341          MOVE.B  #'#', (A3)+
00001BFC  16FC 0024               1342          MOVE.B  #'$', (A3)+
00001C00                          1343          
00001C00                          1344          ; Call ITOA 
00001C00  4EB9 00002200           1345          JSR     ITOA
00001C06                          1346          
00001C06  16FC 002C               1347          MOVE.B  #',', (A3)+
00001C0A  16FC 0020               1348          MOVE.B  #' ', (A3)+
00001C0E                          1349          
00001C0E  4EB9 00001F10           1350          JSR     EA_DECODER
00001C14  4E75                    1351          RTS
00001C16                          1352          
00001C16                          1353  MOVE_IMM_DATA: 
00001C16  4284                    1354          CLR.L   D4
00001C18  B63C 0002               1355          CMP.B   #2, D3
00001C1C  6700 0010               1356          BEQ     SHIFT16
00001C20                          1357          
00001C20  B63C 0001               1358          CMP.B   #1, D3
00001C24  6700 0012               1359          BEQ     SHIFT24 
00001C28                          1360          
00001C28  183C 0004               1361          MOVE.B  #4, D4
00001C2C  4E75                    1362          RTS
00001C2E                          1363          
00001C2E                          1364  SHIFT16: 
00001C2E  E08F                    1365          LSR.L   #8,D7
00001C30  E08F                    1366          LSR.L   #8,D7
00001C32  183C 0002               1367          MOVE.B  #2, D4
00001C36  4E75                    1368          RTS
00001C38                          1369  
00001C38                          1370  SHIFT24
00001C38  E08F                    1371          LSR.L   #8,D7
00001C3A  E08F                    1372          LSR.L   #8,D7
00001C3C  183C 0004               1373          MOVE.B  #4, D4  
00001C40  4E75                    1374          RTS
00001C42                          1375          
00001C42                          1376  MOVEA_EA
00001C42                          1377          ;This is the same as MOVE, just that first operand is for sure an address.
00001C42  4EF9 00001C48           1378          JMP MOVE_EA
00001C48                          1379  
00001C48                          1380  MOVE_EA
00001C48  2A00                    1381          MOVE.L D0, D5
00001C4A  2C00                    1382          MOVE.L D0, D6
00001C4C                          1383          
00001C4C                          1384          ;and off mode
00001C4C  0245 0038               1385          ANDI #56, D5
00001C50  E685                    1386          ASR.L #3, D5
00001C52                          1387          ;and off data
00001C52  0246 0007               1388          ANDI #7, D6
00001C56  4EB9 00001F10           1389          JSR EA_DECODER
00001C5C                          1390      
00001C5C  16FC 002C               1391          MOVE.B #',', (A3)+
00001C60                          1392          ;Reset D5 and D6 just in case.
00001C60  4285                    1393          CLR.L D5
00001C62  4286                    1394          CLR.L D6
00001C64                          1395          ;Second argument, set D4
00001C64  383C 0001               1396          MOVE #1, D4
00001C68                          1397      
00001C68                          1398          ; Grab the other mode
00001C68  2A00                    1399          MOVE.L D0, D5
00001C6A  2C00                    1400          MOVE.L D0, D6
00001C6C                          1401      
00001C6C                          1402          ;and off mode
00001C6C  0245 01C0               1403          ANDI #448, D5
00001C70  EC85                    1404          ASR.L #6, D5
00001C72                          1405          ;and off data
00001C72  0246 0E00               1406          ANDI #3584, D6
00001C76  E086                    1407          ASR.L #8, D6
00001C78  E286                    1408          ASR.L #1, D6
00001C7A  4EB9 00001F10           1409          JSR EA_DECODER
00001C80                          1410          
00001C80                          1411          ;Clear D4
00001C80  4284                    1412          CLR.L D4
00001C82                          1413          
00001C82  4E75                    1414          RTS
00001C84                          1415  
00001C84                          1416  MOVEM_EA
00001C84                          1417          ;check if we're reading from or writing to memory.
00001C84  3A00                    1418          MOVE.W D0, D5
00001C86  0245 0400               1419          ANDI #1024, D5
00001C8A  BA7C 0000               1420          CMP #0, D5
00001C8E  6700 000C               1421          BEQ MOVEM_EA_TO_MEM
00001C92  BA7C 0400               1422          CMP #1024, D5
00001C96  6700 0004               1423          BEQ MOVEM_EA_TO_MEM
00001C9A                          1424      
00001C9A                          1425          ;Error-handling return
00001C9A  4E75                    1426          RTS
00001C9C                          1427      
00001C9C                          1428  MOVEM_EA_TO_MEM
00001C9C                          1429  
00001C9C                          1430  MOVEM_EA_FROM_MEM
00001C9C                          1431  
00001C9C                          1432  
00001C9C                          1433  MOVEQ_EA
00001C9C  2A00                    1434          MOVE.L D0, D5
00001C9E  2C00                    1435          MOVE.L D0, D6
00001CA0                          1436      
00001CA0                          1437          ;set mode to immediate
00001CA0  303C 0007               1438          MOVE #7, D0
00001CA4                          1439          ;and off data
00001CA4  0247 00FF               1440          ANDI #255, D7
00001CA8  4EB9 00001F10           1441          JSR EA_DECODER
00001CAE                          1442      
00001CAE  16FC 002C               1443          MOVE.B #',', (A3)+
00001CB2                          1444          ;Reset D6 just in case.
00001CB2  4286                    1445          CLR.L D6
00001CB4                          1446          ;Second argument, set D4
00001CB4  383C 0001               1447          MOVE #1, D4
00001CB8                          1448  
00001CB8  2A00                    1449          MOVE.L D0, D5
00001CBA  2C00                    1450          MOVE.L D0, D6
00001CBC                          1451      
00001CBC                          1452          ;set mode to data register
00001CBC  4285                    1453          CLR.L D5
00001CBE                          1454          ;and off data
00001CBE  0246 0E00               1455          ANDI #3584, D6
00001CC2  E086                    1456          ASR.L #8, D6
00001CC4  E286                    1457          ASR.L #1, D6
00001CC6  4EB9 00001F10           1458          JSR EA_DECODER
00001CCC                          1459          
00001CCC                          1460          ;Reset D4
00001CCC  4284                    1461          CLR.L D4
00001CCE                          1462          
00001CCE  4E75                    1463          RTS
00001CD0                          1464  
00001CD0                          1465  LEA_EA
00001CD0  2A00                    1466          MOVE.L D0, D5
00001CD2  2C00                    1467          MOVE.L D0, D6
00001CD4                          1468      
00001CD4                          1469          ;and off mode
00001CD4  0245 01C0               1470          ANDI #448, D5
00001CD8  EC85                    1471          ASR.L #6, D5
00001CDA                          1472          ;and off data
00001CDA  0246 0E00               1473          ANDI #3584, D6
00001CDE  E086                    1474          ASR.L #8, D6
00001CE0  E286                    1475          ASR.L #1, D6
00001CE2  4EB9 00001F10           1476          JSR EA_DECODER
00001CE8                          1477      
00001CE8  16FC 002C               1478          MOVE.B #',', (A3)+
00001CEC                          1479          ;Reset D5 and D6 just in case.
00001CEC  4285                    1480          CLR.L D5
00001CEE  4286                    1481          CLR.L D6
00001CF0                          1482          ;Second argument, set D4
00001CF0  383C 0001               1483          MOVE #1, D4
00001CF4                          1484      
00001CF4                          1485          ; Grab the other mode
00001CF4  2A00                    1486          MOVE.L D0, D5
00001CF6  2C00                    1487          MOVE.L D0, D6
00001CF8                          1488      
00001CF8                          1489          ;and off mode
00001CF8  0245 0038               1490          ANDI #56, D5
00001CFC  E685                    1491          ASR.L #3, D5
00001CFE                          1492          ;and off data
00001CFE  0246 0007               1493          ANDI #7, D6
00001D02  4EB9 00001F10           1494          JSR EA_DECODER
00001D08                          1495          
00001D08                          1496          ;Reset D4
00001D08  4284                    1497          CLR.L D4
00001D0A                          1498      
00001D0A  4E75                    1499          RTS
00001D0C                          1500      
00001D0C                          1501  BRA_EA
00001D0C                          1502          ;Effectively the same as BRA
00001D0C  4EF9 00001D12           1503          JMP BSR_EA
00001D12                          1504  
00001D12                          1505  BSR_EA
00001D12                          1506          ;Its some form of move 7
00001D12  3A3C 0007               1507          MOVE #7, D5
00001D16  4286                    1508          CLR.L D6
00001D18                          1509      
00001D18  3E00                    1510          MOVE D0, D7
00001D1A  0247 00FF               1511          ANDI #255, D7
00001D1E  BE7C 00FF               1512          CMP #$FF, D7
00001D22  6700 000A               1513          BEQ BSR_EA_32
00001D26                          1514  
00001D26  4EB9 00001F10           1515          JSR EA_DECODER
00001D2C                          1516      
00001D2C  4E75                    1517          RTS
00001D2E                          1518  
00001D2E                          1519  BSR_EA_32
00001D2E  3C3C 0001               1520          MOVE #1, D6
00001D32  4E75                    1521          RTS
00001D34                          1522      
00001D34                          1523  DIVU_EA
00001D34                          1524          ;Practically the same as DIVS
00001D34  4EF9 00001D3A           1525          JMP DIVS_EA
00001D3A                          1526  
00001D3A                          1527  DIVS_EA
00001D3A  2A00                    1528          MOVE.L D0, D5
00001D3C  2C00                    1529          MOVE.L D0, D6
00001D3E                          1530      
00001D3E                          1531          ;and off mode
00001D3E  0245 01C0               1532          ANDI #448, D5
00001D42  EC85                    1533          ASR.L #6, D5
00001D44                          1534          ;and off data
00001D44  0246 0E00               1535          ANDI #3584, D6
00001D48  E086                    1536          ASR.L #8, D6
00001D4A  E286                    1537          ASR.L #1, D6
00001D4C  4EB9 00001F10           1538          JSR EA_DECODER
00001D52                          1539      
00001D52  16FC 002C               1540          MOVE.B #',', (A3)+
00001D56                          1541          ;Reset D5 and D6 just in case.
00001D56  4285                    1542          CLR.L D5
00001D58  4286                    1543          CLR.L D6
00001D5A                          1544          ;Second argument, set D4
00001D5A  383C 0001               1545          MOVE #1, D4
00001D5E                          1546      
00001D5E                          1547          ; Grab the other mode
00001D5E  2A00                    1548          MOVE.L D0, D5
00001D60  2C00                    1549          MOVE.L D0, D6
00001D62                          1550      
00001D62                          1551          ;and off mode
00001D62  0245 0038               1552          ANDI #56, D5
00001D66  E685                    1553          ASR.L #3, D5
00001D68                          1554          ;and off data
00001D68  0246 0007               1555          ANDI #7, D6
00001D6C  4EB9 00001F10           1556          JSR EA_DECODER
00001D72                          1557          
00001D72                          1558          ;Clear D4
00001D72  4284                    1559          CLR.L D4
00001D74                          1560      
00001D74  4E75                    1561          RTS
00001D76                          1562  
00001D76                          1563  SUB_EA
00001D76  2A00                    1564          MOVE.L D0, D5
00001D78  2C00                    1565          MOVE.L D0, D6
00001D7A                          1566      
00001D7A                          1567          ;and off mode
00001D7A  0245 0038               1568          ANDI #56, D5
00001D7E                          1569          ;and off data
00001D7E  0246 0007               1570          ANDI #7, D6
00001D82  4EB9 00001F10           1571          JSR EA_DECODER
00001D88  2C00                    1572          MOVE.L D0, D6
00001D8A                          1573      
00001D8A  16FC 002C               1574          MOVE.B #',', (A3)+
00001D8E                          1575          ;Reset D6 just in case.
00001D8E  4286                    1576          CLR.L D6
00001D90                          1577          ;Second argument, set D4
00001D90  383C 0001               1578          MOVE #1, D4
00001D94                          1579      
00001D94                          1580          ;sub only works on data registers, so we set mode to data
00001D94  4285                    1581          CLR.L D5
00001D96                          1582          ;and off data
00001D96  0246 0E00               1583          ANDI #3584, D6
00001D9A  E086                    1584          ASR.L #8, D6
00001D9C  E286                    1585          ASR.L #1, D6
00001D9E  4EB9 00001F10           1586          JSR EA_DECODER
00001DA4                          1587          
00001DA4                          1588          ;Clear D4
00001DA4  4284                    1589          CLR.L D4
00001DA6                          1590  
00001DA6  4E75                    1591          RTS
00001DA8                          1592  
00001DA8                          1593  ADDQ_EA
00001DA8                          1594          ;For EA effectively SUBQ
00001DA8  4EF9 00001DAE           1595          JMP SUBQ_EA
00001DAE                          1596  
00001DAE                          1597  SUBQ_EA
00001DAE  2A00                    1598          MOVE.L D0, D5
00001DB0  2E00                    1599          MOVE.L D0, D7
00001DB2                          1600      
00001DB2                          1601          ;set mode data
00001DB2  4285                    1602          CLR.L D5
00001DB4                          1603          ;and off data for data
00001DB4  0247 0E00               1604          ANDI #3584, D7
00001DB8  E086                    1605          ASR.L #8, D6
00001DBA  E286                    1606          ASR.L #1, D6
00001DBC  4EB9 00001F10           1607          JSR EA_DECODER
00001DC2                          1608      
00001DC2  16FC 002C               1609          MOVE.B #',', (A3)+
00001DC6                          1610          ;Reset D5 and D6 just in case.
00001DC6  4285                    1611          CLR.L D5
00001DC8  4286                    1612          CLR.L D6
00001DCA                          1613          ;Second argument, set D4
00001DCA  383C 0001               1614          MOVE #1, D4
00001DCE                          1615      
00001DCE  2A00                    1616          MOVE.L D0, D5
00001DD0  2C00                    1617          MOVE.L D0, D6
00001DD2                          1618      
00001DD2                          1619          ;and off mode
00001DD2  0245 0038               1620          ANDI #56, D5
00001DD6  E685                    1621          ASR.L #3, D5
00001DD8                          1622          ;and off data
00001DD8  0246 0007               1623          ANDI #7, D6
00001DDC  4EB9 00001F10           1624          JSR EA_DECODER
00001DE2                          1625          
00001DE2                          1626          ;Clear d4
00001DE2  4284                    1627          CLR.L D4
00001DE4                          1628      
00001DE4  4E75                    1629          RTS
00001DE6                          1630  
00001DE6                          1631  CMP_EA
00001DE6  2A00                    1632          MOVE.L D0, D5
00001DE8  2C00                    1633          MOVE.L D0, D6
00001DEA                          1634      
00001DEA                          1635          ;and off mode
00001DEA  0245 0038               1636          ANDI #56, D5
00001DEE                          1637          ;and off data
00001DEE  0246 0007               1638          ANDI #7, D6
00001DF2  4EB9 00001F10           1639          JSR EA_DECODER
00001DF8                          1640              
00001DF8  16FC 002C               1641          MOVE.B #',', (A3)+
00001DFC                          1642          ;Reset D6 just in case.
00001DFC  4286                    1643          CLR.L D6
00001DFE                          1644          ;Second argument, set D4
00001DFE  383C 0001               1645          MOVE #1, D4
00001E02                          1646      
00001E02                          1647          ;Do other part of the EA
00001E02  2A00                    1648          MOVE.L D0, D5
00001E04  2C00                    1649          MOVE.L D0, D6
00001E06                          1650      
00001E06                          1651          ;set mode to data register
00001E06  4285                    1652          CLR.L D5
00001E08                          1653          ;and off data
00001E08  0246 0E00               1654          ANDI #3584, D6
00001E0C  E086                    1655          ASR.L #8, D6
00001E0E  E286                    1656          ASR.L #1, D6
00001E10  4EB9 00001F10           1657          JSR EA_DECODER
00001E16                          1658          
00001E16                          1659          ;Clear D4
00001E16  4284                    1660          CLR.L D4
00001E18                          1661  
00001E18  4E75                    1662          RTS
00001E1A                          1663  
00001E1A                          1664  MULS_EA
00001E1A                          1665      ;Same as MULU
00001E1A  4EF9 00001E20           1666      JMP MULU_EA
00001E20                          1667  
00001E20                          1668  MULU_EA
00001E20  2A00                    1669          MOVE.L D0, D5
00001E22  2E00                    1670          MOVE.L D0, D7
00001E24                          1671      
00001E24                          1672          ;Get mode
00001E24  0245 0038               1673          ANDI #56, D5
00001E28  E685                    1674          ASR.L #3, D5
00001E2A                          1675          ;and off data
00001E2A  0246 0007               1676          ANDI #7, D6
00001E2E  4EB9 00001F10           1677          JSR EA_DECODER
00001E34                          1678     
00001E34  16FC 002C               1679          MOVE.B #',', (A3)+
00001E38                          1680          ;Reset D6 just in case.
00001E38  4286                    1681          CLR.L D6
00001E3A                          1682          ;Second argument, set D4
00001E3A  383C 0001               1683          MOVE #1, D4
00001E3E                          1684      
00001E3E  2A00                    1685          MOVE.L D0, D5
00001E40  2C00                    1686          MOVE.L D0, D6
00001E42                          1687      
00001E42                          1688          ;set mode data register
00001E42  4285                    1689          CLR.L D5
00001E44                          1690          ;and off data for immediate
00001E44  0247 0E00               1691          ANDI #3584, D7
00001E48  E086                    1692          ASR.L #8, D6
00001E4A  E286                    1693          ASR.L #1, D6
00001E4C  4EB9 00001F10           1694          JSR EA_DECODER
00001E52                          1695      
00001E52  2A00                    1696          MOVE.L D0, D5
00001E54  2C00                    1697          MOVE.L D0, D6
00001E56                          1698          
00001E56                          1699          ;Clear D
00001E56  4284                    1700          CLR.L D4
00001E58                          1701          
00001E58  4E75                    1702          RTS
00001E5A                          1703          
00001E5A                          1704  ADD_EA
00001E5A                          1705          ;Effective the same as ADD
00001E5A  4EF9 00001E60           1706          JMP ADDA_EA
00001E60                          1707  
00001E60                          1708  ADDA_EA
00001E60  2A00                    1709          MOVE.L D0, D5
00001E62  2C00                    1710          MOVE.L D0, D6
00001E64                          1711      
00001E64                          1712          ;and off mode
00001E64  0245 0038               1713          ANDI #56, D5
00001E68  E685                    1714          ASR.L #3, D5
00001E6A                          1715          ;and off data
00001E6A  0246 0007               1716          ANDI #7, D6
00001E6E  4EB9 00001F10           1717          JSR EA_DECODER
00001E74                          1718      
00001E74  16FC 002C               1719          MOVE.B #',', (A3)+
00001E78                          1720          ;Reset D5 and D6 just in case.
00001E78  4285                    1721          CLR.L D5
00001E7A  4286                    1722          CLR.L D6
00001E7C                          1723          ;Second argument, set D4
00001E7C  383C 0001               1724          MOVE #1, D4
00001E80                          1725      
00001E80                          1726          ; Grab the other mode
00001E80  2A00                    1727          MOVE.L D0, D5
00001E82  2C00                    1728          MOVE.L D0, D6
00001E84                          1729          
00001E84                          1730          ;and off mode
00001E84  0245 01C0               1731          ANDI #448, D5
00001E88  E085                    1732          ASR.L #8, D5
00001E8A                          1733          ;and off data
00001E8A  0246 0E00               1734          ANDI #3584, D6
00001E8E  E086                    1735          ASR.L #8, D6
00001E90  E286                    1736          ASR.L #1, D6
00001E92  4EB9 00001F10           1737          JSR EA_DECODER
00001E98                          1738          
00001E98                          1739          ;Clear D4
00001E98  4284                    1740          CLR.L D4
00001E9A                          1741      
00001E9A  4E75                    1742          RTS
00001E9C                          1743  
00001E9C                          1744  ASL_EA
00001E9C                          1745          ;Practically the same as DIVS
00001E9C  4EF9 00001EA2           1746          JMP ASR_EA
00001EA2                          1747  
00001EA2                          1748  ASR_EA
00001EA2                          1749          ;Check bit 5 to see if its a register or count.
00001EA2  3A00                    1750          MOVE D0, D5
00001EA4  0245 0020               1751          ANDI #32, D5
00001EA8  EA85                    1752          ASR.L #5, D5
00001EAA  BA7C 0000               1753          CMP #0, D5
00001EAE  6700 000C               1754          BEQ ASR_EA_NUM
00001EB2  BA7C 0001               1755          CMP #1, D5
00001EB6  6700 002A               1756          BEQ ASR_EA_REG
00001EBA                          1757      
00001EBA                          1758          ;Error-handling return
00001EBA  4E75                    1759          RTS
00001EBC                          1760      
00001EBC                          1761  ASR_EA_NUM
00001EBC                          1762          ;Set to immediate data;
00001EBC  3A3C 0007               1763          MOVE #7, D5
00001EC0                          1764          ;Missing something here.
00001EC0  4EB9 00001F10           1765          JSR EA_DECODER
00001EC6                          1766      
00001EC6  16FC 002C               1767          MOVE.B #',', (A3)+
00001ECA                          1768          ;Reset D6 just in case.
00001ECA  4286                    1769          CLR.L D6
00001ECC                          1770          ;Second argument, set D4
00001ECC  383C 0001               1771          MOVE #1, D4
00001ED0                          1772      
00001ED0                          1773          ;Set to data register
00001ED0  4285                    1774          CLR.L D5
00001ED2  3C00                    1775          MOVE D0, D6
00001ED4  CC7C 0007               1776          AND #7, D6
00001ED8  4EB9 00001F10           1777          JSR EA_DECODER
00001EDE                          1778  
00001EDE                          1779          ;clear D4
00001EDE  4284                    1780          CLR.L D4
00001EE0                          1781          
00001EE0  4E75                    1782          RTS    
00001EE2                          1783  
00001EE2                          1784  ASR_EA_REG
00001EE2                          1785          ;Set to data register
00001EE2  4285                    1786          CLR.L D5
00001EE4  3C00                    1787          MOVE D0, D6
00001EE6  CC7C 0E00               1788          AND #3584, D6
00001EEA  E086                    1789          ASR.L #8, D6
00001EEC  E286                    1790          ASR.L #1, D6
00001EEE  4EB9 00001F10           1791          JSR EA_DECODER  
00001EF4                          1792      
00001EF4  16FC 002C               1793          MOVE.B #',', (A3)+
00001EF8                          1794          ;Reset D6 just in case.
00001EF8  4286                    1795          CLR.L D6
00001EFA                          1796          ;Second argument, set D4
00001EFA  383C 0001               1797          MOVE #1, D4
00001EFE                          1798      
00001EFE                          1799          ;Set to data register
00001EFE  4285                    1800          CLR.L D5
00001F00  3C00                    1801          MOVE D0, D6
00001F02  CC7C 0007               1802          AND #7, D6
00001F06  4EB9 00001F10           1803          JSR EA_DECODER    
00001F0C                          1804          
00001F0C                          1805          ;Clear D4
00001F0C  4284                    1806          CLR.L D4
00001F0E                          1807          
00001F0E  4E75                    1808          RTS
00001F10                          1809  
00001F10                          1810  EA_DECODER:
00001F10                          1811          ;Add space.
00001F10  16FC 0020               1812          MOVE.B #' ', (A3)+
00001F14                          1813          ;Jump to the Mode given.
00001F14  41F9 00001F22           1814          LEA EAJUMPTABLE, A0
00001F1A  CAFC 0006               1815          MULU #6, D5
00001F1E  4EF0 5000               1816          JMP 0(A0,D5)
00001F22                          1817          
00001F22                          1818      ;   This is a jump table that will jump to certain sub-functions based on what the mode is.
00001F22                          1819  EAJUMPTABLE
00001F22  4EF9 00001F52           1820          JMP MODE0       
00001F28  4EF9 00001F94           1821          JMP MODE1      
00001F2E  4EF9 00001FD6           1822          JMP MODE2       
00001F34  4EF9 00002020           1823          JMP MODE3       
00001F3A  4EF9 0000206A           1824          JMP MODE4       
00001F40  4EF9 000020B8           1825          JMP MODE5       
00001F46  4EF9 000020BA           1826          JMP MODE6       
00001F4C  4EF9 000020BC           1827          JMP MODE7      
00001F52                          1828      
00001F52                          1829  MODE0      
00001F52                          1830          ; Figure the  that relate to it op codes 
00001F52                          1831          
00001F52  BC7C 0000               1832          CMP #0, D6
00001F56  6700 0208               1833          BEQ APPEND_D0
00001F5A                          1834      
00001F5A  BC7C 0001               1835          CMP #1, D6
00001F5E  6700 020A               1836          BEQ APPEND_D1
00001F62                          1837      
00001F62  BC7C 0002               1838          CMP #2, D6
00001F66  6700 020C               1839          BEQ APPEND_D2
00001F6A                          1840      
00001F6A  BC7C 0003               1841          CMP #3, D6
00001F6E  6700 020E               1842          BEQ APPEND_D3
00001F72                          1843      
00001F72  BC7C 0004               1844          CMP #4, D6
00001F76  6700 0210               1845          BEQ APPEND_D4
00001F7A                          1846          
00001F7A  BC7C 0005               1847          CMP #5, D6
00001F7E  6700 0212               1848          BEQ APPEND_D5
00001F82                          1849      
00001F82  BC7C 0006               1850          CMP #6, D6
00001F86  6700 0214               1851          BEQ APPEND_D6
00001F8A                          1852      
00001F8A  BC7C 0007               1853          CMP #7, D6
00001F8E  6700 0216               1854          BEQ APPEND_D7
00001F92                          1855      
00001F92                          1856          ;Return
00001F92  4E75                    1857          RTS
00001F94                          1858  
00001F94                          1859  MODE1
00001F94  BC7C 0000               1860          CMP #0, D6
00001F98  6700 0216               1861          BEQ APPEND_A0
00001F9C                          1862      
00001F9C  BC7C 0001               1863          CMP #1, D6
00001FA0  6700 0218               1864          BEQ APPEND_A1
00001FA4                          1865      
00001FA4  BC7C 0002               1866          CMP #2, D6
00001FA8  6700 021A               1867          BEQ APPEND_A2
00001FAC                          1868      
00001FAC  BC7C 0003               1869          CMP #3, D6
00001FB0  6700 021C               1870          BEQ APPEND_A3
00001FB4                          1871      
00001FB4  BC7C 0004               1872          CMP #4, D6
00001FB8  6700 021E               1873          BEQ APPEND_A4
00001FBC                          1874      
00001FBC  BC7C 0005               1875          CMP #5, D6
00001FC0  6700 0220               1876          BEQ APPEND_A5
00001FC4                          1877      
00001FC4  BC7C 0006               1878          CMP #6, D6
00001FC8  6700 0222               1879          BEQ APPEND_A6
00001FCC                          1880      
00001FCC  BC7C 0007               1881          CMP #7, D6
00001FD0  6700 0224               1882          BEQ APPEND_A7
00001FD4                          1883      
00001FD4                          1884          ;Return
00001FD4  4E75                    1885          RTS
00001FD6                          1886  
00001FD6                          1887  MODE2
00001FD6  16FC 0028               1888          MOVE.B #'(', (A3)+
00001FDA                          1889  
00001FDA  BC7C 0000               1890          CMP #0, D6
00001FDE  6700 01D0               1891          BEQ APPEND_A0
00001FE2                          1892      
00001FE2  BC7C 0001               1893          CMP #1, D6
00001FE6  6700 01D2               1894          BEQ APPEND_A1
00001FEA                          1895      
00001FEA  BC7C 0002               1896          CMP #2, D6
00001FEE  6700 01D4               1897          BEQ APPEND_A2
00001FF2                          1898      
00001FF2  BC7C 0003               1899          CMP #3, D6
00001FF6  6700 01D6               1900          BEQ APPEND_A3
00001FFA                          1901      
00001FFA  BC7C 0004               1902          CMP #4, D6
00001FFE  6700 01D8               1903          BEQ APPEND_A4
00002002                          1904      
00002002  BC7C 0005               1905          CMP #5, D6
00002006  6700 01DA               1906          BEQ APPEND_A5
0000200A                          1907      
0000200A  BC7C 0006               1908          CMP #6, D6
0000200E  6700 01DC               1909          BEQ APPEND_A6
00002012                          1910      
00002012  BC7C 0007               1911          CMP #7, D6
00002016  6700 01DE               1912          BEQ APPEND_A7
0000201A                          1913          
0000201A  16F8 0029               1914          MOVE.B ')', (A3)+
0000201E                          1915      
0000201E                          1916          ;Return
0000201E  4E75                    1917          RTS
00002020                          1918  
00002020                          1919  MODE3
00002020  16FC 0028               1920          MOVE.B #'(', (A3)+
00002024                          1921  
00002024  BC7C 0000               1922          CMP #0, D6
00002028  6700 0186               1923          BEQ APPEND_A0
0000202C                          1924      
0000202C  BC7C 0001               1925          CMP #1, D6
00002030  6700 0188               1926          BEQ APPEND_A1
00002034                          1927      
00002034  BC7C 0002               1928          CMP #2, D6
00002038  6700 018A               1929          BEQ APPEND_A2
0000203C                          1930      
0000203C  BC7C 0003               1931          CMP #3, D6
00002040  6700 018C               1932          BEQ APPEND_A3
00002044                          1933      
00002044  BC7C 0004               1934          CMP #4, D6
00002048  6700 018E               1935          BEQ APPEND_A4
0000204C                          1936      
0000204C  BC7C 0005               1937          CMP #5, D6
00002050  6700 0190               1938          BEQ APPEND_A5
00002054                          1939      
00002054  BC7C 0006               1940          CMP #6, D6
00002058  6700 0192               1941          BEQ APPEND_A6
0000205C                          1942      
0000205C  BC7C 0007               1943          CMP #7, D6
00002060  6700 0194               1944          BEQ APPEND_A7
00002064                          1945      
00002064  16F8 0029               1946          MOVE.B ')', (A3)+
00002068                          1947      
00002068                          1948          ;Return
00002068  4E75                    1949          RTS
0000206A                          1950  
0000206A                          1951  MODE4
0000206A  16F8 0029               1952          MOVE.B ')', (A3)+
0000206E                          1953  
0000206E  BC7C 0000               1954          CMP #0, D6
00002072  6700 013C               1955          BEQ APPEND_A0
00002076                          1956      
00002076  BC7C 0001               1957          CMP #1, D6
0000207A  6700 013E               1958          BEQ APPEND_A1
0000207E                          1959      
0000207E  BC7C 0002               1960          CMP #2, D6
00002082  6700 0140               1961          BEQ APPEND_A2
00002086                          1962      
00002086  BC7C 0003               1963          CMP #3, D6
0000208A  6700 0142               1964          BEQ APPEND_A3
0000208E                          1965      
0000208E  BC7C 0004               1966          CMP #4, D6
00002092  6700 0144               1967          BEQ APPEND_A4
00002096                          1968      
00002096  BC7C 0005               1969          CMP #5, D6
0000209A  6700 0146               1970          BEQ APPEND_A5
0000209E                          1971      
0000209E  BC7C 0006               1972          CMP #6, D6
000020A2  6700 0148               1973          BEQ APPEND_A6
000020A6                          1974      
000020A6  BC7C 0007               1975          CMP #7, D6
000020AA  6700 014A               1976          BEQ APPEND_A7
000020AE                          1977      
000020AE  16FC 0029               1978          MOVE.B #')', (A3)+
000020B2  16FC 002B               1979          MOVE.B #'+', (A3)+
000020B6                          1980      
000020B6                          1981          ;Return
000020B6  4E75                    1982          RTS
000020B8                          1983  
000020B8                          1984  MODE5
000020B8                          1985          ;Error-handling mode.
000020B8  4E75                    1986          RTS
000020BA                          1987      
000020BA                          1988  MODE6
000020BA                          1989          ;Error-handling mode.
000020BA  4E75                    1990          RTS
000020BC                          1991      
000020BC                          1992  MODE7
000020BC  BC7C 0000               1993          CMP #0, D6
000020C0  6700 0014               1994          BEQ MODE_7_SHORT
000020C4                          1995      
000020C4  BC7C 0001               1996          CMP #1, D6
000020C8  6700 0036               1997          BEQ MODE_7_LONG
000020CC                          1998      
000020CC  BC7C 0004               1999          CMP #4, D6
000020D0  6700 0058               2000          BEQ MODE_7_IMM
000020D4                          2001      
000020D4  4E75                    2002          RTS
000020D6                          2003  
000020D6                          2004  MODE_7_SHORT
000020D6  B87C 0001               2005          CMP #1, D4
000020DA  6700 0068               2006          BEQ MODE_7_2NDARG_START
000020DE                          2007          
000020DE  16FC 0025               2008          MOVE.B #'%', (A3)+
000020E2  3E1D                    2009          MOVE.W (A5)+, D7
000020E4  363C 0004               2010          MOVE #4, D3
000020E8  4EF9 00002200           2011          JMP ITOA
000020EE                          2012      
000020EE  B87C 0001               2013          CMP #1, D4
000020F2  6700 0056               2014          BEQ MODE_7_2NDARG_END
000020F6  B87C 0001               2015          CMP #1, D4
000020FA  6700 0058               2016          BEQ APPEND_W
000020FE                          2017          
000020FE  4E75                    2018          RTS
00002100                          2019      
00002100                          2020  MODE_7_LONG
00002100  B87C 0001               2021          CMP #1, D4
00002104  6700 003E               2022          BEQ MODE_7_2NDARG_START
00002108                          2023  
00002108  16FC 0025               2024          MOVE.B #'%', (A3)+
0000210C  2E1D                    2025          MOVE.L (A5)+, D7
0000210E  363C 0008               2026          MOVE #8, D3
00002112  4EF9 00002200           2027          JMP ITOA
00002118                          2028          
00002118  B87C 0001               2029          CMP #1, D4
0000211C  6700 002C               2030          BEQ MODE_7_2NDARG_END
00002120  B87C 0001               2031          CMP #1, D4
00002124  6700 0034               2032          BEQ APPEND_L
00002128                          2033          
00002128  4E75                    2034          RTS
0000212A                          2035  
0000212A                          2036  MODE_7_IMM     
0000212A  16FC 0023               2037          MOVE.B #'#',(A3)+
0000212E  16FC 0024               2038          MOVE.B #'$',(A3)+
00002132  3E1D                    2039          MOVE.W (A5)+, D7
00002134  363C 0004               2040          MOVE #4, D3
00002138  E09F                    2041          ROR.L #8, D7
0000213A  E09F                    2042          ROR.L #8, D7
0000213C  4EF9 00002200           2043          JMP ITOA
00002142                          2044          
00002142  4E75                    2045          RTS
00002144                          2046          
00002144                          2047  MODE_7_2NDARG_START
00002144  16FC 0028               2048      MOVE.B #'(', (A3)+
00002148  4E75                    2049      RTS
0000214A                          2050  
0000214A                          2051  MODE_7_2NDARG_END
0000214A  16FC 0029               2052      MOVE.B #')', (A3)+
0000214E  16FC 002E               2053      MOVE.B #'.', (A3)+
00002152  4E75                    2054      RTS
00002154                          2055              
00002154                          2056  APPEND_W
00002154  16FC 0057               2057      MOVE.B #'W', (A3)+
00002158  4E75                    2058      RTS
0000215A                          2059  
0000215A                          2060  APPEND_L
0000215A  16FC 004C               2061      MOVE.B #'L', (A3)+
0000215E  4E75                    2062      RTS
00002160                          2063  
00002160                          2064  APPEND_D0
00002160  16FC 0044               2065          MOVE.B  #'D', (A3)+
00002164  16FC 0030               2066          MOVE.B  #'0', (A3)+
00002168  4E75                    2067          RTS
0000216A                          2068  
0000216A                          2069  APPEND_D1
0000216A  16FC 0044               2070          MOVE.B  #'D', (A3)+
0000216E  16FC 0031               2071          MOVE.B  #'1', (A3)+
00002172  4E75                    2072          RTS
00002174                          2073  
00002174                          2074  APPEND_D2
00002174  16FC 0044               2075          MOVE.B  #'D', (A3)+
00002178  16FC 0032               2076          MOVE.B  #'2', (A3)+
0000217C  4E75                    2077          RTS
0000217E                          2078  
0000217E                          2079  APPEND_D3
0000217E  16FC 0044               2080          MOVE.B  #'D', (A3)+
00002182  16FC 0033               2081          MOVE.B  #'3', (A3)+
00002186  4E75                    2082          RTS
00002188                          2083  
00002188                          2084  APPEND_D4
00002188  16FC 0044               2085          MOVE.B  #'D', (A3)+
0000218C  16FC 0034               2086          MOVE.B  #'4', (A3)+
00002190  4E75                    2087          RTS
00002192                          2088  
00002192                          2089  APPEND_D5
00002192  16FC 0044               2090          MOVE.B  #'D', (A3)+
00002196  16FC 0035               2091          MOVE.B  #'5', (A3)+
0000219A  4E75                    2092          RTS
0000219C                          2093  
0000219C                          2094  APPEND_D6
0000219C  16FC 0044               2095          MOVE.B  #'D', (A3)+
000021A0  16FC 0036               2096          MOVE.B  #'6', (A3)+
000021A4  4E75                    2097          RTS
000021A6                          2098  
000021A6                          2099  APPEND_D7
000021A6  16FC 0044               2100          MOVE.B  #'D', (A3)+
000021AA  16FC 0037               2101          MOVE.B  #'7', (A3)+
000021AE  4E75                    2102          RTS
000021B0                          2103      
000021B0                          2104  APPEND_A0
000021B0  16FC 0041               2105          MOVE.B  #'A', (A3)+
000021B4  16FC 0030               2106          MOVE.B  #'0', (A3)+
000021B8  4E75                    2107          RTS
000021BA                          2108  
000021BA                          2109  APPEND_A1
000021BA  16FC 0041               2110          MOVE.B  #'A', (A3)+
000021BE  16FC 0031               2111          MOVE.B  #'1', (A3)+
000021C2  4E75                    2112          RTS
000021C4                          2113  
000021C4                          2114  APPEND_A2
000021C4  16FC 0041               2115          MOVE.B  #'A', (A3)+
000021C8  16FC 0032               2116          MOVE.B  #'2', (A3)+
000021CC  4E75                    2117          RTS
000021CE                          2118  
000021CE                          2119  APPEND_A3
000021CE  16FC 0041               2120          MOVE.B  #'A', (A3)+
000021D2  16FC 0033               2121          MOVE.B  #'3', (A3)+
000021D6  4E75                    2122          RTS
000021D8                          2123  
000021D8                          2124  APPEND_A4
000021D8  16FC 0041               2125          MOVE.B  #'A', (A3)+
000021DC  16FC 0034               2126          MOVE.B  #'4', (A3)+
000021E0  4E75                    2127          RTS
000021E2                          2128  
000021E2                          2129  APPEND_A5
000021E2  16FC 0041               2130          MOVE.B  #'A', (A3)+
000021E6  16FC 0035               2131          MOVE.B  #'5', (A3)+
000021EA  4E75                    2132          RTS
000021EC                          2133  
000021EC                          2134  APPEND_A6
000021EC  16FC 0041               2135          MOVE.B  #'A', (A3)+
000021F0  16FC 0036               2136          MOVE.B  #'6', (A3)+
000021F4  4E75                    2137          RTS
000021F6                          2138      
000021F6                          2139  APPEND_A7
000021F6  16FC 0041               2140          MOVE.B  #'A', (A3)+
000021FA  16FC 0037               2141          MOVE.B  #'7', (A3)+
000021FE  4E75                    2142          RTS
00002200                          2143  
00002200                          2144          
00002200                          2145  ; -------------------------------------------------------------
00002200                          2146  ;   ERROR when Data has incorrect Addressing MODE
00002200                          2147  ; -------------------------------------------------------------          
00002200                          2148  DATA_ERROR:      
00002200                          2149          
00002200                          2150  
00002200                          2151   
00002200                          2152  *-------------------------------------------------------------------        
00002200                          2153      * ITOA CONVERT for IMMEDIATE DATA
00002200                          2154      ;Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
00002200                          2155      *D3 = # of ITOA Loop ITERATION
00002200                          2156      *D7 = immediate address 
00002200                          2157      *D6 = LSR Moving count
00002200                          2158      *D0 = Data that is shifted
00002200                          2159  *-------------------------------------------------------------------   
00002200                          2160  ITOA:                       ; Converts hex string into int 
00002200                          2161          ; D7 has the immediate address
00002200  2F00                    2162          MOVE.L D0, -(SP)  
00002202  4EB9 0000220C           2163          JSR     ITOA_LOOP
00002208  201F                    2164          MOVE.L (SP)+, D0
0000220A  4E75                    2165          RTS
0000220C                          2166          
0000220C                          2167  ITOA_LOOP:
0000220C  4280                    2168          CLR.L   D0 
0000220E  4281                    2169          CLR.L   D1
00002210                          2170          
00002210  5303                    2171          SUB.B   #1, D3  
00002212  2007                    2172          MOVE.L  D7, D0
00002214  1203                    2173          MOVE.B  D3, D1
00002216                          2174  
00002216  C2FC 0004               2175          MULU    #4, D1      ; The amount that we shift 
0000221A  E2A8                    2176          LSR.L   D1, D0       ; Shift D0 with iteration Loop * 4
0000221C                          2177          
0000221C  0280 0000000F           2178          ANDI.L  #$F, D0          ; Last 4 bits in hex 
00002222                          2179          
00002222                          2180          ; Convert Hex into ASCII 
00002222  4EB9 0000223C           2181          JSR     ITOA_CONVERT
00002228                          2182          
00002228                          2183          ; ADD to A3 Counter 
00002228  4EB9 00002250           2184          JSR     ITOA_ADD_CHAR                  
0000222E                          2185          ; Checks if counter is empty, ITOA is completed 
0000222E  B63C 0000               2186          CMP.B   #0,D3
00002232  6700 0006               2187          BEQ     ITOA_DONE
00002236                          2188          
00002236  4EF8 220C               2189          JMP     ITOA_LOOP   ; Continue Reading more bits from immediate data         
0000223A                          2190                         
0000223A                          2191  ITOA_DONE:          
0000223A  4E75                    2192          RTS         ; Returns back to last JSR 
0000223C                          2193  
0000223C                          2194  ITOA_CONVERT: 
0000223C  B03C 0009               2195          CMP.B       #9,D0
00002240  6300 0008               2196          BLS         ITOA_CONVERT_N
00002244                          2197          
00002244  0640 0037               2198          ADDI.W      #$37, D0
00002248  4E75                    2199          RTS 
0000224A                          2200          
0000224A                          2201  ITOA_CONVERT_N
0000224A  0640 0030               2202          ADDI.W     #$30,D0
0000224E  4E75                    2203          RTS
00002250                          2204          
00002250                          2205  ITOA_ADD_CHAR: 
00002250  B03C 0030               2206          CMP.B   #$30, D0
00002254  6700 007A               2207          BEQ     CHAR_0
00002258                          2208          
00002258  B03C 0031               2209          CMP.B   #$31, D0
0000225C  6700 007C               2210          BEQ     CHAR_1
00002260                          2211          
00002260  B03C 0032               2212          CMP.B   #$32, D0
00002264  6700 007E               2213          BEQ     CHAR_2
00002268                          2214          
00002268  B03C 0033               2215          CMP.B   #$33, D0
0000226C  6700 0080               2216          BEQ     CHAR_3
00002270                          2217          
00002270  B03C 0034               2218          CMP.B   #$34, D0
00002274  6700 0082               2219          BEQ     CHAR_4
00002278                          2220          
00002278  B03C 0035               2221          CMP.B   #$35, D0
0000227C  6700 0084               2222          BEQ     CHAR_5
00002280                          2223          
00002280  B03C 0036               2224          CMP.B   #$36, D0
00002284  6700 0086               2225          BEQ     CHAR_6
00002288                          2226          
00002288  B03C 0037               2227          CMP.B   #$37, D0
0000228C  6700 0088               2228          BEQ     CHAR_7
00002290                          2229          
00002290  B03C 0038               2230          CMP.B   #$38, D0
00002294  6700 008A               2231          BEQ     CHAR_8
00002298                          2232          
00002298  B03C 0039               2233          CMP.B   #$39, D0
0000229C  6700 008C               2234          BEQ     CHAR_9
000022A0                          2235          
000022A0  B03C 0041               2236          CMP.B   #$41, D0
000022A4  6700 008E               2237          BEQ     CHAR_A
000022A8                          2238          
000022A8  B03C 0042               2239          CMP.B   #$42, D0
000022AC  6700 0090               2240          BEQ     CHAR_B        
000022B0                          2241          
000022B0  B03C 0043               2242          CMP.B   #$43, D0
000022B4  6700 0092               2243          BEQ     CHAR_C
000022B8                          2244          
000022B8  B03C 0044               2245          CMP.B   #$44, D0
000022BC  6700 0094               2246          BEQ     CHAR_D
000022C0                          2247          
000022C0  B03C 0045               2248          CMP.B   #$45, D0
000022C4  6700 0096               2249          BEQ     CHAR_E
000022C8                          2250          
000022C8  B03C 0046               2251          CMP.B   #$46, D0
000022CC  6700 0098               2252          BEQ     CHAR_F  
000022D0                          2253          
000022D0                          2254  CHAR_0:
000022D0  16FC 0030               2255          MOVE.B  #'0', (A3)+ 
000022D4  4EF9 00002370           2256          JMP     ITOA_ADD_CHAR_DONE        
000022DA                          2257  CHAR_1:
000022DA  16FC 0031               2258          MOVE.B  #'1', (A3)+ 
000022DE  4EF9 00002370           2259          JMP     ITOA_ADD_CHAR_DONE
000022E4                          2260  CHAR_2:
000022E4  16FC 0032               2261          MOVE.B  #'2', (A3)+ 
000022E8  4EF9 00002370           2262          JMP     ITOA_ADD_CHAR_DONE
000022EE                          2263  CHAR_3:
000022EE  16FC 0033               2264          MOVE.B  #'3', (A3)+ 
000022F2  4EF9 00002370           2265          JMP     ITOA_ADD_CHAR_DONE
000022F8                          2266  CHAR_4:
000022F8  16FC 0034               2267          MOVE.B  #'4', (A3)+ 
000022FC  4EF9 00002370           2268          JMP     ITOA_ADD_CHAR_DONE
00002302                          2269  CHAR_5:
00002302  16FC 0035               2270          MOVE.B  #'5', (A3)+ 
00002306  4EF9 00002370           2271          JMP     ITOA_ADD_CHAR_DONE
0000230C                          2272  CHAR_6:
0000230C  16FC 0036               2273          MOVE.B  #'6', (A3)+ 
00002310  4EF9 00002370           2274          JMP     ITOA_ADD_CHAR_DONE
00002316                          2275  CHAR_7:
00002316  16FC 0037               2276          MOVE.B  #'7', (A3)+ 
0000231A  4EF9 00002370           2277          JMP     ITOA_ADD_CHAR_DONE
00002320                          2278  CHAR_8:
00002320  16FC 0038               2279          MOVE.B  #'8', (A3)+ 
00002324  4EF9 00002370           2280          JMP     ITOA_ADD_CHAR_DONE
0000232A                          2281  CHAR_9:
0000232A  16FC 0039               2282          MOVE.B  #'9', (A3)+ 
0000232E  4EF9 00002370           2283          JMP     ITOA_ADD_CHAR_DONE
00002334                          2284  CHAR_A:
00002334  16FC 0041               2285          MOVE.B  #'A', (A3)+ 
00002338  4EF9 00002370           2286          JMP     ITOA_ADD_CHAR_DONE
0000233E                          2287  CHAR_B:
0000233E  16FC 0042               2288          MOVE.B  #'B', (A3)+ 
00002342  4EF9 00002370           2289          JMP     ITOA_ADD_CHAR_DONE
00002348                          2290  CHAR_C:
00002348  16FC 0043               2291          MOVE.B  #'C', (A3)+ 
0000234C  4EF9 00002370           2292          JMP     ITOA_ADD_CHAR_DONE
00002352                          2293  CHAR_D:
00002352  16FC 0044               2294          MOVE.B  #'D', (A3)+ 
00002356  4EF9 00002370           2295          JMP     ITOA_ADD_CHAR_DONE
0000235C                          2296  CHAR_E:
0000235C  16FC 0045               2297          MOVE.B  #'E', (A3)+ 
00002360  4EF9 00002370           2298          JMP     ITOA_ADD_CHAR_DONE
00002366                          2299  CHAR_F:
00002366  16FC 0046               2300          MOVE.B  #'F', (A3)+ 
0000236A  4EF9 00002370           2301          JMP     ITOA_ADD_CHAR_DONE
00002370                          2302          
00002370                          2303  ITOA_ADD_CHAR_DONE:
00002370  4E75                    2304          RTS                
00002372                          2305  ; -------------------------------------------------------------
00002372                          2306  ;   Converts User string input into HEX 
00002372                          2307  ; -------------------------------------------------------------         
00002372                          2308  ATOI:                       ; Converts hex string into int 
00002372  4EB9 0000237A           2309          JSR     ATOI_LOOP
00002378  4E75                    2310          RTS
0000237A                          2311          
0000237A                          2312  ATOI_LOOP: 
0000237A  1219                    2313          MOVE.B  (A1)+, D1
0000237C                          2314          
0000237C                          2315          ; Checks if it is 00/ NULL, Reading is done
0000237C  B23C 0000               2316          CMP.B   #0,D1
00002380  6700 004C               2317          BEQ     ATOI_DONE
00002384                          2318          
00002384  B23C 0030               2319          CMP.B   #$30, D1         ; Error / non valid input
00002388  6D34                    2320          BLT.B    ATOI_ERROR
0000238A                          2321          
0000238A  B23C 0040               2322          CMP.B   #$40,D1          ; Checks for value in range of num (0 - 9) 
0000238E  6D16                    2323          BLT.B   ATOI_NUM_VALUE
00002390                          2324          
00002390  B23C 0041               2325          CMP.B   #$41, D1         ; Error / non valid input
00002394  6D00 0028               2326          BLT     ATOI_ERROR                
00002398                          2327          
00002398  B23C 0047               2328          CMP.B   #$47, D1          
0000239C  6D00 0014               2329          BLT     ATOI_CAP_LETTR_VALUE   ; Checks for value in range of A-F
000023A0                          2330          
000023A0  4EF9 000023BE           2331          JMP     ATOI_ERROR      ;Error if it reaches all the way to the end
000023A6                          2332                  
000023A6                          2333  ATOI_NUM_VALUE: 
000023A6  E98B                    2334          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000023A8  0401 0030               2335          SUBI.B  #$30, D1        ; ASCI Value subtracts 30 
000023AC  D681                    2336          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000023AE  4EF8 237A               2337          JMP     ATOI_LOOP
000023B2                          2338          
000023B2                          2339  
000023B2                          2340  ATOI_CAP_LETTR_VALUE: 
000023B2  E98B                    2341          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000023B4  0401 0037               2342          SUBI.B  #$37, D1        ; ASCI Value subtracts 30 
000023B8  D681                    2343          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000023BA  4EF8 237A               2344          JMP     ATOI_LOOP
000023BE                          2345                  
000023BE                          2346  ATOI_ERROR: 
000023BE  43F9 0000249C           2347          LEA     ATOI_MESS_ERROR, A1
000023C4  103C 000E               2348          MOVE.B  #task14,D0
000023C8  4E4F                    2349          TRAP    #15           Display  Error Message
000023CA  4EF8 1012               2350          JMP     USER_INPUT
000023CE                          2351          
000023CE                          2352  ATOI_DONE: 
000023CE  4E75                    2353          RTS
000023D0                          2354         
000023D0                          2355  ERROR_START_ADDR:   
000023D0  43F9 000024CF           2356          LEA     START_ADDR_ERROR , A1
000023D6  103C 000E               2357          MOVE.B  #task14,D0
000023DA  4E4F                    2358          TRAP    #15           Display  Error Message
000023DC  4EF8 1012               2359          JMP     USER_INPUT
000023E0                          2360          
000023E0                          2361  ERROR_END_ADDR:   
000023E0  43F9 000024FA           2362          LEA     END_ADDR_ERROR , A1
000023E6  103C 000E               2363          MOVE.B  #task14,D0
000023EA  4E4F                    2364          TRAP    #15           Display  Error Message
000023EC  4EF8 1012               2365          JMP     USER_INPUT       
000023F0                          2366                  
000023F0                          2367  DONE:
000023F0  103C 0009               2368          MOVE.B  #9, D0
000023F4  4E4F                    2369          TRAP    #15             Halt Simulator   
000023F6                          2370          
000023F6                          2371  * Put variables and constants here
000023F6  =0000000D               2372  CR      EQU     $0D
000023F6  =0000000A               2373  LF      EQU     $0A
000023F6= 0D 0A 00                2374  BLANK                   DC.B    '',CR,LF,0
000023F9= 57 65 6C 63 6F 6D ...   2375  WELCOME_MESS            DC.B    'Welcome to the disassembler program',CR,LF,0
0000241F= 45 6E 74 65 72 20 ...   2376  START_MESS              DC.B    'Enter a start address',CR,LF,0
00002437= 45 6E 74 65 72 20 ...   2377  REPEAT_MESS             DC.B    'Enter Y to disassemble another program, N to quit',CR,LF,0
0000246B= 57 72 6F 6E 67 20 ...   2378  INVALID_MESS            DC.B    'Wrong Input, Try again', CR,LF,0
00002484= 45 6E 74 65 72 20 ...   2379  END_MESS                DC.B    'Enter the end address',CR,LF,0
0000249C= 49 6E 76 61 6C 69 ...   2380  ATOI_MESS_ERROR         DC.B    'Invalid inputs for HEX values, Please try again',CR,LF,LF,0
000024CF= 49 6E 76 61 6C 69 ...   2381  START_ADDR_ERROR        DC.B    'Invalid start address, Please try again',CR,LF,LF,0
000024FA= 49 6E 76 61 6C 69 ...   2382  END_ADDR_ERROR          DC.B    'Invalid end address, Please try again',CR,LF,LF,0
00002523                          2383  buffer                  DS.B    bufferSize
00002563= 50 72 65 73 73 20 ...   2384  MAX_SCREEN_OUTPUT       DC.B    'Press enter any key to continue the program',CR,LF,0
00002591= 45 72 72 6F 72 20 ...   2385  DECODE_OP_ERROR         DC.B    'Error in reading the instruction. Invalid Op code readings', CR, LF,0
000025CE= 55 6E 73 75 70 70 ...   2386  DECODE_OP_UNSUPPORT     DC.B    'Unsupported Op code readings', CR, LF,0
000025ED                          2387          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA             1E60
ADDQ_EA             1DA8
ADD_EA              1E5A
APPEND_A0           21B0
APPEND_A1           21BA
APPEND_A2           21C4
APPEND_A3           21CE
APPEND_A4           21D8
APPEND_A5           21E2
APPEND_A6           21EC
APPEND_A7           21F6
APPEND_D0           2160
APPEND_D1           216A
APPEND_D2           2174
APPEND_D3           217E
APPEND_D4           2188
APPEND_D5           2192
APPEND_D6           219C
APPEND_D7           21A6
APPEND_L            215A
APPEND_W            2154
ASL_EA              1E9C
ASR_EA              1EA2
ASR_EA_NUM          1EBC
ASR_EA_REG          1EE2
ATOI                2372
ATOI_CAP_LETTR_VALUE  23B2
ATOI_DONE           23CE
ATOI_ERROR          23BE
ATOI_LOOP           237A
ATOI_MESS_ERROR     249C
ATOI_NUM_VALUE      23A6
BLANK               23F6
BRA_EA              1D0C
BSR_EA              1D12
BSR_EA_32           1D2E
BUFFER              2523
BUFFERSIZE          40
CHAR_0              22D0
CHAR_1              22DA
CHAR_2              22E4
CHAR_3              22EE
CHAR_4              22F8
CHAR_5              2302
CHAR_6              230C
CHAR_7              2316
CHAR_8              2320
CHAR_9              232A
CHAR_A              2334
CHAR_B              233E
CHAR_C              2348
CHAR_D              2352
CHAR_E              235C
CHAR_F              2366
CLEAR_SCREEN        1102
CMP_EA              1DE6
CR                  D
DATA_ERROR          2200
DECODE_LOOP         10C2
DECODE_OP_ERROR     2591
DECODE_OP_UNSUPPORT  25CE
DECODE_PAUSE        10E8
DECODE_START        10C0
DESTMODE            1C0
DIVS_EA             1D3A
DIVU_EA             1D34
DONE                23F0
EAJUMPTABLE         1F22
EA_DECODER          1F10
END_ADDR            106E
END_ADDR_ERROR      24FA
END_MESS            2484
END_PROGRAM         11BC
ERROR_END_ADDR      23E0
ERROR_START_ADDR    23D0
HELPER_ADDA_L       1942
HELPER_ADDA_W       1956
HELPER_ADDSUBQ_CONVERT_B  1894
HELPER_ADDSUBQ_CONVERT_L  186C
HELPER_ADDSUBQ_CONVERT_W  1880
HELPER_ADD_CONVERT_B  19CC
HELPER_ADD_CONVERT_L  19A4
HELPER_ADD_CONVERT_W  19B8
HELPER_ADD_SIZE_CAL  197A
HELPER_CMP_CONVERT_B  1AA6
HELPER_CMP_CONVERT_L  1A7E
HELPER_CMP_CONVERT_W  1A92
HELPER_CMP_SIZE_CAL  1A62
HELPER_ORIB         1678
HELPER_ORIL         16A0
HELPER_ORIW         168C
HELPER_SUB_CONVERT_B  1900
HELPER_SUB_CONVERT_L  18D8
HELPER_SUB_CONVERT_W  18EC
HELPER_SUB_SIZE_CAL  18AE
HELPER__ADDSUBQ_SIZE_CAL  1842
IMMEDIATE_EA        1BCA
INDEX0000           1222
INDEX0001           1240
INDEX0010           1268
INDEX0011           12A8
INDEX0100           12E8
INDEX0101           1306
INDEX0110           1322
INDEX0111           1340
INDEX1000           1350
INDEX1001           1370
INDEX1010           1386
INDEX1011           138C
INDEX1100           13B0
INDEX1101           13DC
INDEX1110           13F6
INDEX1110_MEM       1416
INDEX1111           1434
INPUT_N             4E
INPUT_NL            4E
INPUT_Y             59
INPUT_YL            79
INVALID_MESS        246B
ITOA                2200
ITOA_ADD_CHAR       2250
ITOA_ADD_CHAR_DONE  2370
ITOA_CONVERT        223C
ITOA_CONVERT_N      224A
ITOA_DONE           223A
ITOA_LOOP           220C
LEA_EA              1CD0
LF                  A
LINESONSCREEN       1D
MAIN                1000
MAX_SCREEN_OUTPUT   2563
MODE0               1F52
MODE1               1F94
MODE2               1FD6
MODE3               2020
MODE4               206A
MODE5               20B8
MODE6               20BA
MODE7               20BC
MODE_7_2NDARG_END   214A
MODE_7_2NDARG_START  2144
MODE_7_IMM          212A
MODE_7_LONG         2100
MODE_7_SHORT        20D6
MOVEA_EA            1C42
MOVEM_EA            1C84
MOVEM_EA_FROM_MEM   1C9C
MOVEM_EA_TO_MEM     1C9C
MOVEM_L             1772
MOVEM_SIZE_CALC     1740
MOVEM_W             175E
MOVEQ_EA            1C9C
MOVE_EA             1C48
MOVE_IMM_DATA       1C16
MULS_EA             1E1A
MULU_EA             1E20
NIBBLE2             F00
NIBBLE3             F0
OP_0000_TABLE       143A
OP_01000_TABLE      149A
OP_0110_TABLE       14FA
OP_1110_TABLE       155A
OP_ADD              196A
OP_ADDA             1914
OP_ADDI             1604
OP_ADDQ             1828
OP_ANDI             15D0
OP_ASL_ADDER        1B8A
OP_ASL_M            1ABA
OP_ASR_ADDER        1B9A
OP_ASR_M            1ACC
OP_BRA              19F6
OP_BSR              19E0
OP_CMP              1A5C
OP_CMPI             1638
OP_DATA_CLR         1140
OP_DATA_CLR_LOOP    1156
OP_DIVS             1A28
OP_DIVU             1A42
OP_EORI             161E
OP_ERROR            1BBA
OP_FINISH           113A
OP_JMP_TABLE        11C2
OP_LEA              16E0
OP_MOVEAL           16CA
OP_MOVEAW           16B4
OP_MOVEM0           171E
OP_MOVEM1           16FC
OP_MULS             1A1A
OP_MULU             1A0C
OP_NOP              17CA
OP_NOP_RTS_RTE      1786
OP_ORI              15BA
OP_ORI_SIZE_EXTACT  1652
OP_ROTATION_CHECK   1ADE
OP_ROTATION_HELP    1B0C
OP_ROTATION_SIZE_B  1B42
OP_ROTATION_SIZE_HELP  1B2A
OP_ROTATION_SIZE_L  1B72
OP_ROTATION_SIZE_W  1B5A
OP_RTE              17EE
OP_RTS              17FE
OP_START            1112
OP_STOP             17DA
OP_SUB              18A8
OP_SUBI             15EA
OP_SUBQ             180E
OP_UNSUPPORTED      1BAA
REPEAT_MESS         2437
REPEAT_PROGRAM      1164
RESTART_PROGRAM     1018
RESTART_PROGRAM_START  11B4
RIGHT12             C
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
SHIFT               C
SHIFT16             1C2E
SHIFT24             1C38
SIZE                C0
SRCMODE             38
STACK               A0000
START               1000
START_ADDR          1036
START_ADDR_ERROR    24CF
START_MESS          241F
SUBQ_EA             1DAE
SUB_EA              1D76
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK5               5
USER_INPUT          1012
WELCOME             1006
WELCOME_MESS        23F9
