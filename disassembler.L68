00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2021 12:17:19 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : Logan and Victor  
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program 
00001000                             9  
00001000  =000A0000                 10  stack   EQU     $000A0000
00001000  =0000000C                 11  shift   EQU     $C
00001000  =00000001                 12  task1   EQU     $01
00001000  =00000002                 13  task2   EQU     $02
00001000  =00000005                 14  task5   EQU     $05
00001000  =0000000D                 15  task13  EQU     $0D
00001000  =0000000E                 16  task14  EQU     $0E
00001000  =00000059                 17  input_Y EQU     $59
00001000  =00000079                 18  input_yl EQU     $79
00001000  =0000004E                 19  input_N EQU     $4E
00001000  =0000004E                 20  input_nl EQU     $4E
00001000  =0000001D                 21  linesOnScreen   EQU     29
00001000  =00000040                 22  bufferSize   EQU      64   
00001000  =0000000C                 23  right12     EQU     12      ; Extract op code
00001000  =00000008                 24  right8      EQU     8       ; Extract 2nd nibble
00001000  =00000006                 25  right6      EQU     6       ; Extract dest mode
00001000  =00000004                 26  right4      EQU     4       ; Extract 3rd Nibble
00001000  =00000003                 27  right3      EQU     3       ; Extract the scr mode
00001000                            28  
00001000  =00000F00                 29  nibble2     EQU     $0F00   ; Extract 2nd nibble
00001000  =000000F0                 30  nibble3     EQU     $00F0   ; Extract 3rd nibble
00001000  =000001C0                 31  destmode    EQU     $01C0   ; Extract the dest mode
00001000  =00000038                 32  srcmode     EQU     $0038   ; Extract the scr mode
00001000  =000000C0                 33  size        EQU     $00C0   ; Extract the size
00001000                            34  
00001000                            35  MAIN:
00001000  4FF9 000A0000             36          LEA     stack, SP
00001006                            37  WELCOME: 
00001006  43F9 00002427             38          LEA     WELCOME_MESS, A1
0000100C  103C 000E                 39          MOVE.B  #task14,D0
00001010  4E4F                      40          TRAP    #15             Display  Openning Message 
00001012                            41  
00001012                            42  ; ----------------------------------------------------------------------------
00001012                            43  ;   User Interface 
00001012                            44  ; ----------------------------------------------------------------------------  
00001012                            45  USER_INPUT:
00001012  4EF9 00001036             46          JMP     START_ADDR
00001018                            47          
00001018                            48  RESTART_PROGRAM: 
00001018  7200                      49          MOVEQ   #0,D1
0000101A  227C 00000000             50          MOVEA.L #$0, A1
00001020  267C 00000000             51          MOVEA.L #$0, A3
00001026  2A7C 00000000             52          MOVEA.L #$0, A5
0000102C  2C7C 00000000             53          MOVEA.L #$0, A6
00001032  7600                      54          MOVEQ   #0,D3       
00001034  7000                      55          MOVEQ   #0,D0
00001036                            56                  
00001036                            57  START_ADDR:
00001036  7400                      58          MOVEQ   #0,D2
00001038                            59          ; Prompt a start address
00001038  43F9 0000244D             60          LEA     START_MESS, A1
0000103E  103C 000E                 61          MOVE.B  #task14,D0
00001042  4E4F                      62          TRAP    #15           Display  Start_Addr Message
00001044                            63  
00001044  227C 00000000             64          MOVEA.L #$0, A1 
0000104A                            65          ; read a start address 
0000104A  103C 0002                 66          MOVE.B  #task2,D0     Gets input from the user
0000104E  4E4F                      67          TRAP    #15
00001050                            68          
00001050  4EB9 000023A0             69          JSR     ATOI
00001056                            70          
00001056                            71          ; Validate start address       
00001056  7200                      72          MOVEQ   #0,D1
00001058  B6BC FFFFFFFF             73          CMP.L   #-1,D3
0000105E  6700 139E                 74          BEQ     ERROR_START_ADDR
00001062                            75          
00001062                            76                          
00001062  E29B                      77          ROR.L   #1, D3          ; Checks for odd number
00001064  6500 1398                 78          BCS     ERROR_START_ADDR
00001068  E39B                      79          ROL.L   #1, D3
0000106A  2A43                      80          MOVEA.L D3,A5           ; A5 = start address
0000106C  5442                      81          ADDQ    #2,D2        
0000106E                            82  END_ADDR:         
0000106E                            83          ; Prompt end address
0000106E  7600                      84          MOVEQ   #0,D3       ; Reset D3 Register
00001070  7200                      85          MOVEQ   #0,D1
00001072                            86          
00001072  43F9 000024B2             87          LEA     END_MESS, A1
00001078  103C 000E                 88          MOVE.B  #task14,D0
0000107C  4E4F                      89          TRAP    #15           Display  END_Addr Message
0000107E                            90          
0000107E  227C 00000000             91          MOVEA.L #$0, A1 
00001084  103C 0002                 92          MOVE.B  #task2,D0     Gets input from the user
00001088  4E4F                      93          TRAP    #15
0000108A                            94          
0000108A                            95          ; Read the end address
0000108A  4EB9 000023A0             96          JSR     ATOI
00001090  7200                      97          MOVEQ   #0,D1
00001092  B6BC FFFFFFFF             98          CMP.L   #-1,D3
00001098  6700 1374                 99          BEQ     ERROR_END_ADDR
0000109C                           100          
0000109C                           101          ; Validate end address & check if its greater than start
0000109C  E29B                     102          ROR.L   #1, D3
0000109E  6500 136E                103          BCS     ERROR_END_ADDR
000010A2  E39B                     104          ROL.L   #1, D3
000010A4                           105          
000010A4  B6BC 00FFFFFF            106          CMP.L   #$000FFFFFF, D3 
000010AA  6C00 1362                107          BGE     ERROR_END_ADDR
000010AE                           108          
000010AE  7202                     109          MOVEQ   #2, D1
000010B0  BBC3                     110          CMP.L   D3, A5 
000010B2  6C00 135A                111          BGE     ERROR_END_ADDR
000010B6  2C43                     112          MOVEA.L D3,A6       ; A6 = end address
000010B8  5442                     113          ADDQ    #2,D2
000010BA  4EF9 000010C2            114          JMP     DECODE_LOOP
000010C0                           115        
000010C0                           116  ; ----------------------------------------------------------------------------
000010C0                           117  ;   OP Code Start
000010C0                           118  ; ----------------------------------------------------------------------------          
000010C0                           119  DECODE_START: 
000010C0  4282                     120          CLR.L   D2      ; D2 = Screen line counter
000010C2                           121             
000010C2                           122  DECODE_LOOP:
000010C2                           123          ; Decoding the current address
000010C2  284B                     124          MOVEA.L A3, A4      ; Save the current start address of the string we are printing 
000010C4  4EB9 00001112            125          JSR     OP_START
000010CA                           126          
000010CA  16FC 0000                127          MOVE.B  #$00, (A3)+
000010CE  224C                     128          MOVEA.L A4, A1      
000010D0  103C 000D                129          MOVE.B  #task13, D0     ; Printing out decoded instruction 
000010D4  4E4F                     130          TRAP    #15
000010D6                           131          
000010D6                           132          ; Check if a decode finished
000010D6  BDCD                     133          CMP.L   A5, A6          ; Checks if the program is done
000010D8  6F00 0088                134          BLE     REPEAT_PROGRAM
000010DC                           135          
000010DC                           136          ; Check if the screen filled
000010DC  5202                     137          ADDQ.B  #1,D2           ; Adds one to the total # of lines on the screen 
000010DE  B43C 001D                138          CMP.B   #linesOnScreen, D2  ; Check if it exceds the max 
000010E2  6700 0004                139          BEQ     DECODE_PAUSE
000010E6                           140  
000010E6  60DA                     141          BRA     DECODE_LOOP
000010E8                           142          
000010E8                           143  DECODE_PAUSE:   
000010E8  43F9 00002591            144          LEA     MAX_SCREEN_OUTPUT,  A1
000010EE  103C 000E                145          MOVE.B  #task14, D0     ; Display the input that it exceeds 
000010F2  4E4F                     146          TRAP    #15 
000010F4                           147          
000010F4  103C 0005                148          MOVE.B  #task5, D0      ; Ask for the user to input to continue 
000010F8  4E4F                     149          TRAP    #15
000010FA                           150          
000010FA                           151          ; Branch b/c user enter any key 
000010FA  4EB9 00001102            152          JSR     CLEAR_SCREEN
00001100                           153          ; Program is is ready to continue the program
00001100  60BE                     154          BRA     DECODE_START
00001102                           155          
00001102                           156  CLEAR_SCREEN: 
00001102                           157          ; Clear output for the screen 
00001102  4282                     158          CLR.L   D2
00001104  43F9 00002424            159          LEA     BLANK,  A1
0000110A  103C 000D                160          MOVE.B  #task13, D0     ; Display the input that it exceeds 
0000110E  4E4F                     161          TRAP    #15 
00001110  4E75                     162          RTS
00001112                           163             
00001112                           164  OP_START: 
00001112  48E7 2002                165          MOVEM.L  D2/A6, -(SP)    ; D2 (Screen line), A6 Ending Address
00001116                           166          
00001116  4EB9 0000113E            167          JSR     OP_DATA_CLR
0000111C                           168          ; LEA     A3, buffer    ; Loads the message in 
0000111C                           169          
0000111C  41F9 000011C0            170          LEA      OP_JMP_TABLE, A0
00001122  4280                     171          CLR.L    D0
00001124  4281                     172          CLR.L    D1
00001126  301D                     173          MOVE.W   (A5)+,D0       ; Loads current word instruction to D0
00001128                           174          
00001128  2200                     175          MOVE.L   D0,D1          ; Move word instruct to D1
0000112A  143C 000C                176          MOVE.B   #right12, D2   
0000112E  E469                     177          LSR.W    D2, D1         ; D1 = op code
00001130  C2FC 0006                178          MULU     #6,D1          ; Computing jmp displacement
00001134  4EF0 1000                179          JMP      0(A0,D1)       ; 
00001138                           180         
00001138                           181  OP_FINISH: 
00001138  4CDF 4004                182          MOVEM.L (SP)+,D2/A6, 
0000113C  4E75                     183          RTS
0000113E                           184           
0000113E                           185  ;-------------------------------------------
0000113E                           186      ;According to instructions, need to 
0000113E                           187      ;clear buffer before decoding questions 
0000113E                           188  ;-------------------------------------------
0000113E                           189  OP_DATA_CLR: 
0000113E  4283                     190          CLR.L   D3
00001140  163C 0040                191          MOVE.B  #bufferSize ,D3
00001144  47F9 00002551            192          LEA     buffer,A3
0000114A                           193          
0000114A  4EB9 00001154            194          JSR     OP_DATA_CLR_LOOP
00001150                           195          
00001150  284B                     196          MOVEA.L A3, A4      ; Save the start of the address  
00001152  4E75                     197          RTS
00001154                           198          
00001154                           199  OP_DATA_CLR_LOOP:
00001154  2678 0000                200          MOVEA.L $0, A3
00001158  16FC 0000                201          MOVE.B  #0,(A3)+
0000115C  5343                     202          SUBI    #1,D3
0000115E  6EF4                     203          BGT     OP_DATA_CLR_LOOP
00001160  4E75                     204          RTS
00001162                           205          
00001162                           206  REPEAT_PROGRAM: 
00001162                           207          ; Output text to continue 
00001162  43F9 00002465            208          LEA     REPEAT_MESS, A1
00001168  103C 000E                209          MOVE.B  #task14,D0
0000116C  4E4F                     210          TRAP    #15           Display  message asking to repeat 
0000116E                           211          
0000116E  4281                     212          CLR.L   D1
00001170                           213          ; Ask for input 
00001170  227C 00000000            214          MOVEA.L #$0, A1 
00001176                           215          ; read a start address 
00001176  103C 0005                216          MOVE.B  #task5,D0     Gets input from the user
0000117A  4E4F                     217          TRAP    #15
0000117C                           218          ; If y = go to user input
0000117C  B27C 0059                219          CMP.W   #input_Y, D1
00001180  6700 0030                220          BEQ     RESTART_PROGRAM_START
00001184                           221  
00001184  B27C 0079                222          CMP.W   #input_yl, D1
00001188  6700 0028                223          BEQ     RESTART_PROGRAM_START        
0000118C                           224          ; if n = stop program. 
0000118C                           225          
0000118C  B27C 004E                226          CMP.W   #input_N, D1
00001190  6700 0028                227          BEQ     END_PROGRAM
00001194                           228          
00001194  B27C 004E                229          CMP.W   #input_nl, D1
00001198  6700 0020                230          BEQ     END_PROGRAM
0000119C                           231          
0000119C                           232          ; Error Retry: 
0000119C  227C 00000000            233          MOVEA.L #$0, A1 
000011A2  43F9 00002499            234          LEA     INVALID_MESS, A1
000011A8  103C 000E                235          MOVE.B  #task14,D0
000011AC  4E4F                     236          TRAP    #15           Display  Error Message
000011AE                           237          
000011AE  4EF8 1162                238          JMP     REPEAT_PROGRAM
000011B2                           239          
000011B2                           240  RESTART_PROGRAM_START: 
000011B2  4EB8 1102                241          JSR     CLEAR_SCREEN
000011B6  4EF8 1018                242          JMP     RESTART_PROGRAM
000011BA                           243          
000011BA                           244  END_PROGRAM: 
000011BA  4EF9 0000241E            245         JMP      DONE 
000011C0                           246      
000011C0                           247  OP_JMP_TABLE:
000011C0  4EF9 00001220            248          JMP     INDEX0000        ; ORI
000011C6  4EF9 0000123E            249          JMP     INDEX0001        ; MOVE BYTE
000011CC  4EF9 00001266            250          JMP     INDEX0010        ; MOVE WORD / MOVEA
000011D2  4EF9 000012A6            251          JMP     INDEX0011        ; MOVE LONG / MOVEA
000011D8  4EF9 000012E6            252          JMP     INDEX0100        ; NOP, MOVEM, LEA
000011DE  4EF9 00001304            253          JMP     INDEX0101        ; ADDQ
000011E4  4EF9 00001320            254          JMP     INDEX0110        ; BRA, BSR
000011EA  4EF9 0000133E            255          JMP     INDEX0111        ; MOVEQ
000011F0  4EF9 0000134E            256          JMP     INDEX1000        ; DIVU
000011F6  4EF9 0000136E            257          JMP     INDEX1001        ; SUB
000011FC  4EF9 00001384            258          JMP     INDEX1010
00001202  4EF9 0000138A            259          JMP     INDEX1011        ; CMP 
00001208  4EF9 000013AE            260          JMP     INDEX1100        ; MULU
0000120E  4EF9 000013DA            261          JMP     INDEX1101        ; ADD, ADDA
00001214  4EF9 000013F4            262          JMP     INDEX1110        ; ASL, ASR
0000121A  4EF9 00001432            263          JMP     INDEX1111        ; Unsupported    
00001220                           264  
00001220                           265  ; ------------------------------------
00001220                           266  ;   OP ORI 
00001220                           267  ; ------------------------------------        
00001220                           268  INDEX0000: 
00001220  41F9 00001438            269          LEA   OP_0000_TABLE, A0  
00001226  4281                     270          CLR.L   D1
00001228  4282                     271          CLR.L   D2
0000122A  2200                     272          MOVE.L  D0,D1               ; Current instruct word
0000122C  0241 0F00                273          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001230  143C 0008                274          MOVE.B  #right8, D2         
00001234  E469                     275          LSR.W   D2,D1               ; D1 = 2nd nibble
00001236  C2FC 0006                276          MULU    #6,D1               
0000123A  4EF0 1000                277          JMP      0(A0,D1)
0000123E                           278          
0000123E                           279  ; ------------------------------------
0000123E                           280  ;   OP MOVE.B 
0000123E                           281  ; ------------------------------------
0000123E                           282  INDEX0001: 
0000123E  4283                     283          CLR.L   D3
00001240  163C 0001                284          MOVE.B   #1, D3        ; byte size
00001244  16FC 004D                285          MOVE.B  #'M', (A3)+
00001248  16FC 004F                286          MOVE.B  #'O', (A3)+
0000124C  16FC 0056                287          MOVE.B  #'V', (A3)+    
00001250  16FC 0045                288          MOVE.B  #'E', (A3)+
00001254  16FC 002E                289          MOVE.B  #'.', (A3)+ 
00001258  16FC 0042                290          MOVE.B  #'B', (A3)+
0000125C                           291          
0000125C                           292          ; Call MOVE EA 
0000125C  4EB9 00001C24            293          JSR     MOVEA_EA
00001262  4EF8 1138                294          JMP     OP_FINISH
00001266                           295          
00001266                           296  ; ------------------------------------
00001266                           297  ;   OP MOVEA / MOVE long
00001266                           298  ; ------------------------------------
00001266                           299  INDEX0010:
00001266  4283                     300          CLR.L   D3
00001268  4282                     301          CLR.L   D2
0000126A  163C 0004                302          MOVE.B   #4, D3        ; Long  size
0000126E                           303          
0000126E  16FC 004D                304          MOVE.B  #'M', (A3)+
00001272  16FC 004F                305          MOVE.B  #'O', (A3)+
00001276  16FC 0056                306          MOVE.B  #'V', (A3)+
0000127A  16FC 0045                307          MOVE.B  #'E', (A3)+
0000127E                           308          
0000127E  4281                     309          CLR.L   D1
00001280  2200                     310          MOVE.L  D0,D1               ; Current instruct word
00001282  0241 01C0                311          ANDI.W  #destmode,D1         ; Extract dest mode
00001286  143C 0006                312          MOVE.B  #right6, D2         
0000128A  E469                     313          LSR.W   D2,D1 
0000128C                           314  
0000128C  B23C 0001                315          CMP.B   #1, D1
00001290  6700 0436                316          BEQ     OP_MOVEAL               
00001294                           317  
00001294  16FC 002E                318          MOVE.B  #'.', (A3)+
00001298  16FC 004C                319          MOVE.B  #'L', (A3)+
0000129C                           320          
0000129C                           321          ; Call MOVE EA
0000129C  4EB9 00001C24            322          JSR     MOVEA_EA
000012A2  4EF8 1138                323          JMP     OP_FINISH
000012A6                           324          
000012A6                           325  ; ------------------------------------
000012A6                           326  ;   OP MOVEA / MOVE word  
000012A6                           327  ; ------------------------------------
000012A6                           328  INDEX0011:
000012A6  4283                     329          CLR.L   D3
000012A8  4281                     330          CLR.L   D1
000012AA  4282                     331          CLR.L   D2
000012AC  163C 0002                332          MOVE.B   #2, D3        ; word 
000012B0                           333          
000012B0  16FC 004D                334          MOVE.B  #'M', (A3)+
000012B4  16FC 004F                335          MOVE.B  #'O', (A3)+
000012B8  16FC 0056                336          MOVE.B  #'V', (A3)+
000012BC  16FC 0045                337          MOVE.B  #'E', (A3)+
000012C0                           338          
000012C0  2200                     339          MOVE.L  D0,D1                ; Current instruct word
000012C2  0241 01C0                340          ANDI.W  #destmode,D1         ; Extract dest mode
000012C6  143C 0006                341          MOVE.B  #right6, D2         
000012CA  E469                     342          LSR.W   D2,D1 
000012CC                           343          
000012CC  B23C 0001                344          CMP.B   #1, D1
000012D0  6700 03E0                345          BEQ     OP_MOVEAW
000012D4                           346          
000012D4  16FC 002E                347          MOVE.B  #'.', (A3)+
000012D8  16FC 0057                348          MOVE.B  #'W', (A3)+
000012DC                           349          
000012DC                           350          ; Call MOVE EA
000012DC  4EB9 00001C24            351          JSR     MOVEA_EA
000012E2  4EF8 1138                352          JMP     OP_FINISH
000012E6                           353          
000012E6                           354  ; ------------------------------------
000012E6                           355  ;   OP  NOP, MOVEM, LEA 
000012E6                           356  ; ------------------------------------ 
000012E6                           357  INDEX0100: 
000012E6  4281                     358          CLR.L   D1
000012E8  4282                     359          CLR.L   D2
000012EA  41F9 00001498            360          LEA     OP_01000_TABLE, A0
000012F0  2200                     361          MOVE.L  D0,D1               ; Current instruct word
000012F2  0241 0F00                362          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
000012F6  143C 0008                363          MOVE.B  #right8, D2         
000012FA  E469                     364          LSR.W   D2,D1               ; D1 = 2nd nibble
000012FC  C2FC 0006                365          MULU    #6,D1               
00001300  4EF0 1000                366          JMP      0(A0,D1)           ; JMP to table
00001304                           367  
00001304                           368  ; -------------------------------
00001304                           369  ;   OP ADDQ / SUBQ  
00001304                           370  ; --------------------------------
00001304                           371  INDEX0101:
00001304  4281                     372          CLR.L   D1 
00001306  4282                     373          CLR.L   D2
00001308  2200                     374          MOVE.L  D0,D1               ; Current instruct word
0000130A  0241 0F00                375          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
0000130E  143C 0008                376          MOVE.B  #right8, D2         
00001312  E469                     377          LSR.W   D2,D1               ; D1 = 2nd nibble
00001314                           378      
00001314  0201 0001                379          ANDI.B  #1, D1
00001318  6700 04F2                380          BEQ     OP_SUBQ             ; If last bit = 1 --> SUBQ 
0000131C  6600 0508                381          BNE     OP_ADDQ             ; If lat bit = 0 --> ADDQ
00001320                           382          
00001320                           383          
00001320                           384  ; ------------------------------------
00001320                           385  ;   OP BRA,BSR  
00001320                           386  ; ------------------------------------
00001320                           387  INDEX0110: 
00001320  41F9 000014F8            388          LEA     OP_0110_TABLE, A0
00001326                           389          
00001326  4282                     390          CLR.L   D2
00001328  4281                     391          CLR.L   D1
0000132A  2200                     392          MOVE.L  D0,D1               ; Current instruct word
0000132C  0241 0F00                393          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001330  143C 0008                394          MOVE.B  #right8, D2         
00001334  E469                     395          LSR.W   D2,D1               ; D1 = 2nd nibble
00001336  C2FC 0006                396          MULU    #6,D1               
0000133A  4EF0 1000                397          JMP     0(A0,D1)
0000133E                           398  
0000133E                           399  ; ------------------------------------
0000133E                           400  ;   OP MOVEQ --> DONE
0000133E                           401  ; ------------------------------------
0000133E                           402  INDEX0111: 
0000133E  4283                     403          CLR.L   D3
00001340  163C 0004                404          MOVE.B   #4, D3        ; long 
00001344                           405          
00001344  4EB9 00001C7E            406          JSR     MOVEQ_EA
0000134A  4EF8 1138                407          JMP     OP_FINISH
0000134E                           408  
0000134E                           409  ; ----------------------------------------------------------
0000134E                           410  ;   OP DIVU, DIVS   -->  DONE
0000134E                           411  ; ---------------------------------------------------------
0000134E                           412  INDEX1000: 
0000134E  4283                     413          CLR.L   D3
00001350  163C 0002                414          MOVE.B   #2, D3        ; word
00001354                           415          
00001354  4281                     416          CLR.L   D1
00001356  2200                     417          MOVE.L  D0,D1               ; Current instruct word
00001358  0241 0100                418          ANDI.W  #$0100,D1         ; Extract 2nd nibble
0000135C  143C 0008                419          MOVE.B  #right8, D2         
00001360  E469                     420          LSR.W   D2,D1               ; D1 = 2nd nibble
00001362                           421  
00001362  B23C 0001                422          CMP.B  #1, D1
00001366  6700 06BE                423          BEQ     OP_DIVS           ; If last bit = 1 --> DIVS 
0000136A  6600 06D4                424          BNE     OP_DIVU            ; If lat bit = 0 --> DIVU
0000136E                           425                  
0000136E                           426  ; ------------------------------------
0000136E                           427  ;   OP SUB --> Need to Implement
0000136E                           428  ; ------------------------------------ 
0000136E                           429  INDEX1001: 
0000136E  16FC 0053                430          MOVE.B  #'S', (A3)+
00001372  16FC 0055                431          MOVE.B  #'U', (A3)+
00001376  16FC 0042                432          MOVE.B  #'B', (A3)+  
0000137A  16FC 002E                433          MOVE.B  #'.', (A3)+   
0000137E                           434  
0000137E  4EF9 000018A6            435          JMP     OP_SUB
00001384                           436  
00001384                           437  ; ------------------------------------
00001384                           438  ;   OP Code not supported 
00001384                           439  ; ------------------------------------         
00001384                           440  INDEX1010: 
00001384  4EF9 00001BA8            441          JMP     OP_UNSUPPORTED
0000138A                           442          
0000138A                           443  ; ------------------------------------
0000138A                           444  ;   OP CMP --> Forgot to do this one lol 
0000138A                           445  ; ------------------------------------         
0000138A                           446  INDEX1011: 
0000138A  16FC 0043                447          MOVE.B  #'C', (A3)+
0000138E  16FC 004D                448          MOVE.B  #'M', (A3)+
00001392  16FC 0050                449          MOVE.B  #'P', (A3)+
00001396  16FC 002E                450          MOVE.B  #'.', (A3)+
0000139A                           451          
0000139A  4281                     452          CLR.L   D1 
0000139C  2200                     453          MOVE.L  D0,D1               ; Current instruct word
0000139E  0241 00C0                454          ANDI.W  #size,D1         ; Extract 2nd nibble
000013A2  143C 0008                455          MOVE.B  #right8, D2         
000013A6  E469                     456          LSR.W   D2,D1               ; D1 = 2nd nibble
000013A8                           457          
000013A8  4EF9 00001A5A            458          JMP     OP_CMP
000013AE                           459          
000013AE                           460  ; ------------------------------------
000013AE                           461  ;   OP MULU --> Done
000013AE                           462  ; ------------------------------------ 
000013AE                           463  INDEX1100: 
000013AE  16FC 004D                464          MOVE.B  #'M', (A3)+
000013B2  16FC 0055                465          MOVE.B  #'U', (A3)+
000013B6  16FC 004C                466          MOVE.B  #'L', (A3)+    
000013BA                           467          
000013BA  4283                     468          CLR.L   D3
000013BC  163C 0002                469          MOVE.B   #2, D3
000013C0                           470  
000013C0  4281                     471          CLR.L   D1
000013C2  2200                     472          MOVE.L  D0,D1               ; Current instruct word
000013C4  0241 0100                473          ANDI.W  #$100,D1         ; Extract 2nd nibble
000013C8  143C 0008                474          MOVE.B  #right8, D2         
000013CC  E469                     475          LSR.W   D2,D1               ; 
000013CE                           476          
000013CE  B23C 0001                477          CMP.B   #1, D1
000013D2  6700 0644                478          BEQ     OP_MULS  
000013D6  6600 0632                479          BNE     OP_MULU
000013DA                           480          
000013DA                           481  ; ------------------------------------
000013DA                           482  ;   OP ADD,ADDA     --> Needs a lot of work 
000013DA                           483  ; ------------------------------------
000013DA                           484  INDEX1101:
000013DA  4281                     485          CLR.L   D1 
000013DC  2200                     486          MOVE.L  D0,D1               ; Current instruct word
000013DE  0241 00C0                487          ANDI.W  #size,D1         ; Extract dest mode
000013E2  143C 0006                488          MOVE.B  #right6, D2         
000013E6  E469                     489          LSR.W   D2,D1
000013E8                           490      
000013E8  B23C 0003                491          CMP.B   #3,D1
000013EC  6700 0524                492          BEQ     OP_ADDA
000013F0  6600 0576                493          BNE     OP_ADD
000013F4                           494          
000013F4                           495  ; ------------------------------------
000013F4                           496  ;   OP ASL,ASR    --> Figure out Rotation 
000013F4                           497  ; ------------------------------------ 
000013F4                           498  INDEX1110:       
000013F4                           499  
000013F4                           500          ; Extract the size (7 -8 )
000013F4  4281                     501          CLR.L   D1 
000013F6  2200                     502          MOVE.L  D0,D1               ; Current instruct word
000013F8  0241 00C0                503          ANDI.W  #size,D1         ; Extract 2nd nibble
000013FC  143C 0006                504          MOVE.B  #right6, D2             
00001400  E469                     505          LSR.W   D2,D1               ; 
00001402                           506          
00001402  4283                     507          CLR.L   D3
00001404  1601                     508          MOVE.B   D1, D3 
00001406                           509  
00001406  B63C 0003                510          CMP.B #3, D3 
0000140A  6700 0008                511          BEQ     INDEX1110_MEM
0000140E                           512  
0000140E  4EF9 00001ADC            513          JMP     OP_ROTATION_CHECK
00001414                           514  INDEX1110_MEM:
00001414                           515          ; Memory Register Shift 11  
00001414  41F9 00001558            516          LEA     OP_1110_TABLE, A0  
0000141A  4281                     517          CLR.L   D1
0000141C  4282                     518          CLR.L   D2
0000141E  2200                     519          MOVE.L  D0,D1               ; Current instruct word
00001420  0241 0F00                520          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001424  143C 0008                521          MOVE.B  #right8, D2         
00001428  E469                     522          LSR.W   D2,D1               ; D1 = 2nd nibble
0000142A  C2FC 0006                523          MULU    #6,D1               
0000142E  4EF0 1000                524          JMP     0(A0,D1)
00001432                           525  ; ------------------------------------
00001432                           526  ;   OP Code not supported 
00001432                           527  ; ------------------------------------         
00001432                           528  INDEX1111:
00001432  4EF9 00001BA8            529          JMP     OP_UNSUPPORTED
00001438                           530          
00001438                           531  ; ------------------------------------
00001438                           532  ;   JUMP Tables for OP codes 
00001438                           533  ; ------------------------------------         
00001438                           534  OP_0000_TABLE: 
00001438  4EF9 000015B8            535          JMP     OP_ORI              ; 0: ORI
0000143E  4EF9 00001BA8            536          JMP     OP_UNSUPPORTED      ; 1: Not supported  
00001444  4EF9 000015CE            537          JMP     OP_ANDI             ; 2: Not supported      ANDI
0000144A  4EF9 00001BA8            538          JMP     OP_UNSUPPORTED      ; 3: Not supported      
00001450  4EF9 000015E8            539          JMP     OP_SUBI             ; 4: Not supported      SUBI
00001456  4EF9 00001BA8            540          JMP     OP_UNSUPPORTED      ; 5: Not supported
0000145C  4EF9 00001602            541          JMP     OP_ADDI             ; 6: Not supported      ADDI
00001462  4EF9 00001BA8            542          JMP     OP_UNSUPPORTED      ; 7: Not supported
00001468  4EF9 00001BA8            543          JMP     OP_UNSUPPORTED      ; 8: Not supported
0000146E  4EF9 00001BA8            544          JMP     OP_UNSUPPORTED      ; 9: Not supported
00001474  4EF9 0000161C            545          JMP     OP_EORI             ; A: Not supported      EORI
0000147A  4EF9 00001BA8            546          JMP     OP_UNSUPPORTED      ; B: Not supported
00001480  4EF9 00001636            547          JMP     OP_CMPI             ; C: Not supported      CMPI
00001486  4EF9 00001BA8            548          JMP     OP_UNSUPPORTED      ; D: Not supported
0000148C  4EF9 00001BB8            549          JMP     OP_ERROR            ; E: Not supported      INVALID
00001492  4EF9 00001BA8            550          JMP     OP_UNSUPPORTED      ; F: Not supported  
00001498                           551  
00001498                           552  OP_01000_TABLE: 
00001498  4EF9 00001BA8            553          JMP     OP_UNSUPPORTED      ; 0: Not supported      MOVE to SR , NEGX
0000149E  4EF9 000016DE            554          JMP     OP_LEA              ; 1: LEA An = 0   
000014A4  4EF9 00001BA8            555          JMP     OP_UNSUPPORTED      ; 2: Not supported      CLR
000014AA  4EF9 000016DE            556          JMP     OP_LEA              ; 3: LEA An = 1      
000014B0  4EF9 00001BA8            557          JMP     OP_UNSUPPORTED      ; 4: Not supported      NEG , MOVE to CCR    
000014B6  4EF9 000016DE            558          JMP     OP_LEA              ; 5: LEA An = 2     
000014BC  4EF9 00001BA8            559          JMP     OP_UNSUPPORTED      ; 6: Not supported      NOT      
000014C2  4EF9 000016DE            560          JMP     OP_LEA              ; 7: LEA An = 3
000014C8  4EF9 0000171C            561          JMP     OP_MOVEM0           ; 8: MOVEM D = 0     
000014CE  4EF9 000016DE            562          JMP     OP_LEA              ; 9: LEA An = 4
000014D4  4EF9 00001BA8            563          JMP     OP_UNSUPPORTED      ; A: Not supported      
000014DA  4EF9 000016DE            564          JMP     OP_LEA              ; B: LEA An = 5
000014E0  4EF9 000016FA            565          JMP     OP_MOVEM1           ; C: MOVEM D = 1      
000014E6  4EF9 000016DE            566          JMP     OP_LEA              ; D: LEA An = 6
000014EC  4EF9 00001784            567          JMP     OP_NOP_RTS_RTE      ; E: NOP, RTE,RTS, STOP    
000014F2  4EF9 000016DE            568          JMP     OP_LEA              ; F: LEA An = 7
000014F8                           569      
000014F8                           570  OP_0110_TABLE: 
000014F8  4EF9 000019F4            571          JMP     OP_BRA              ; 0: BRA
000014FE  4EF9 000019DE            572          JMP     OP_BSR              ; 1: BSR  
00001504  4EF9 00001BA8            573          JMP     OP_UNSUPPORTED      ; 2: Not supported      BHI
0000150A  4EF9 00001BA8            574          JMP     OP_UNSUPPORTED      ; 3: Not supported      BLS
00001510  4EF9 00001BA8            575          JMP     OP_UNSUPPORTED      ; 4: Not supported      BCC
00001516  4EF9 00001BA8            576          JMP     OP_UNSUPPORTED      ; 5: Not supported      BCS
0000151C  4EF9 00001BA8            577          JMP     OP_UNSUPPORTED      ; 6: Not supported      BNE
00001522  4EF9 00001BA8            578          JMP     OP_UNSUPPORTED      ; 7: Not supported      BEQ
00001528  4EF9 00001BA8            579          JMP     OP_UNSUPPORTED      ; 8: Not supported      BVC
0000152E  4EF9 00001BA8            580          JMP     OP_UNSUPPORTED      ; 9: Not supported      BVS
00001534  4EF9 00001BA8            581          JMP     OP_UNSUPPORTED      ; A: Not supported      BPL
0000153A  4EF9 00001BA8            582          JMP     OP_UNSUPPORTED      ; B: Not supported      BMI
00001540  4EF9 00001BA8            583          JMP     OP_UNSUPPORTED      ; C: Not supported      BGE
00001546  4EF9 00001BA8            584          JMP     OP_UNSUPPORTED      ; D: Not supported      BLT
0000154C  4EF9 00001BA8            585          JMP     OP_UNSUPPORTED      ; E: Not supported      BGT
00001552  4EF9 00001BA8            586          JMP     OP_UNSUPPORTED      ; F: Not supported      BLE
00001558                           587          
00001558                           588  OP_1110_TABLE: 
00001558  4EF9 00001ACA            589          JMP     OP_ASR_M              ; 0: ASR
0000155E  4EF9 00001AB8            590          JMP     OP_ASL_M              ; 1: ASL  
00001564  4EF9 00001BA8            591          JMP     OP_UNSUPPORTED      ; 2: Not Supported      LSR     
0000156A  4EF9 00001BA8            592          JMP     OP_UNSUPPORTED      ; 3: Not Supported      LSL      
00001570  4EF9 00001BA8            593          JMP     OP_UNSUPPORTED      ; 4: Not Supported      ROXR     
00001576  4EF9 00001BA8            594          JMP     OP_UNSUPPORTED      ; 5: Not supported      ROXL      
0000157C  4EF9 00001BA8            595          JMP     OP_UNSUPPORTED      ; 6: Not supported      ROR
00001582  4EF9 00001BA8            596          JMP     OP_UNSUPPORTED      ; 7: Not supported      ROL
00001588  4EF9 00001BB8            597          JMP     OP_ERROR            ; 8: Error     
0000158E  4EF9 00001BB8            598          JMP     OP_ERROR            ; 9: Error       
00001594  4EF9 00001BB8            599          JMP     OP_ERROR            ; A: Error       
0000159A  4EF9 00001BB8            600          JMP     OP_ERROR            ; B: Error        
000015A0  4EF9 00001BB8            601          JMP     OP_ERROR            ; C: Error        
000015A6  4EF9 00001BB8            602          JMP     OP_ERROR            ; D: Error        
000015AC  4EF9 00001BB8            603          JMP     OP_ERROR            ; E: Error        
000015B2  4EF9 00001BB8            604          JMP     OP_ERROR            ; F: Error        
000015B8                           605  
000015B8                           606  ;---------------------------------------------------
000015B8                           607  ; ORI. Gathering instruct size and calling EA
000015B8                           608  ;-------------------------------------------------      
000015B8                           609  OP_ORI:
000015B8  16FC 004F                610          MOVE.B  #'O', (A3)+
000015BC  16FC 0052                611          MOVE.B  #'R', (A3)+
000015C0  16FC 0049                612          MOVE.B  #'I', (A3)+
000015C4  16FC 002E                613          MOVE.B  #'.', (A3)+
000015C8  4EF9 00001650            614          JMP     OP_ORI_SIZE_EXTACT
000015CE                           615  
000015CE                           616  OP_ANDI:     
000015CE  16FC 0041                617          MOVE.B  #'A', (A3)+
000015D2  16FC 004E                618          MOVE.B  #'N', (A3)+
000015D6  16FC 0044                619          MOVE.B  #'D', (A3)+
000015DA  16FC 0049                620          MOVE.B  #'I', (A3)+
000015DE  16FC 002E                621          MOVE.B  #'.', (A3)+
000015E2  4EF9 00001650            622          JMP     OP_ORI_SIZE_EXTACT
000015E8                           623  
000015E8                           624  OP_SUBI:     
000015E8  16FC 0053                625          MOVE.B  #'S', (A3)+
000015EC  16FC 0055                626          MOVE.B  #'U', (A3)+
000015F0  16FC 0042                627          MOVE.B  #'B', (A3)+
000015F4  16FC 0049                628          MOVE.B  #'I', (A3)+
000015F8  16FC 002E                629          MOVE.B  #'.', (A3)+
000015FC  4EF9 00001650            630          JMP     OP_ORI_SIZE_EXTACT
00001602                           631          
00001602                           632  OP_ADDI:     
00001602  16FC 0041                633          MOVE.B  #'A', (A3)+
00001606  16FC 0044                634          MOVE.B  #'D', (A3)+
0000160A  16FC 0044                635          MOVE.B  #'D', (A3)+
0000160E  16FC 0049                636          MOVE.B  #'I', (A3)+
00001612  16FC 002E                637          MOVE.B  #'.', (A3)+
00001616  4EF9 00001650            638          JMP     OP_ORI_SIZE_EXTACT
0000161C                           639          
0000161C                           640  OP_EORI:     
0000161C  16FC 0045                641          MOVE.B  #'E', (A3)+
00001620  16FC 004F                642          MOVE.B  #'O', (A3)+
00001624  16FC 0052                643          MOVE.B  #'R', (A3)+
00001628  16FC 0049                644          MOVE.B  #'I', (A3)+
0000162C  16FC 002E                645          MOVE.B  #'.', (A3)+
00001630  4EF9 00001650            646          JMP     OP_ORI_SIZE_EXTACT
00001636                           647  
00001636                           648  OP_CMPI:     
00001636  16FC 0043                649          MOVE.B  #'C', (A3)+
0000163A  16FC 004D                650          MOVE.B  #'M', (A3)+
0000163E  16FC 0050                651          MOVE.B  #'P', (A3)+
00001642  16FC 0049                652          MOVE.B  #'I', (A3)+
00001646  16FC 002E                653          MOVE.B  #'.', (A3)+
0000164A  4EF9 00001650            654          JMP     OP_ORI_SIZE_EXTACT   
00001650                           655       
00001650                           656  OP_ORI_SIZE_EXTACT:     
00001650  4281                     657          CLR.L   D1    
00001652  2200                     658          MOVE.L  D0,D1               ; Current instruct word
00001654  0241 00C0                659          ANDI.W  #size,D1         ; Extract 2nd nibble
00001658  143C 0006                660          MOVE.B  #right6, D2         
0000165C  E469                     661          LSR.W   D2,D1               ; D1 = 2nd nibble
0000165E                           662  
0000165E  B23C 0000                663          CMP.B   #0,D1       
00001662  6700 0012                664          BEQ     HELPER_ORIB             ;--> BYTE
00001666                           665          
00001666  B23C 0001                666          CMP.B   #1, D1      ;--> Word
0000166A  6700 001E                667          BEQ     HELPER_ORIW
0000166E                           668          
0000166E  B23C 0002                669          CMP.B   #2, D1      ; --> Long
00001672  6700 002A                670          BEQ     HELPER_ORIL
00001676                           671          
00001676                           672  
00001676                           673              
00001676                           674  HELPER_ORIB:
00001676  4283                     675          CLR.L   D3
00001678  163C 0001                676          MOVE.B   #1, D3
0000167C  16FC 0042                677          MOVE.B  #'B', (A3)+
00001680                           678               
00001680  4EB9 00001BC8            679          JSR     IMMEDIATE_EA  
00001686  4EF8 1138                680          JMP     OP_FINISH
0000168A                           681      
0000168A                           682  HELPER_ORIW:
0000168A  4283                     683          CLR.L   D3
0000168C  163C 0002                684          MOVE.B   #2, D3
00001690  16FC 0057                685          MOVE.B  #'W', (A3)+
00001694                           686      
00001694  4EB9 00001BC8            687          JSR     IMMEDIATE_EA   
0000169A  4EF8 1138                688          JMP     OP_FINISH
0000169E                           689          
0000169E                           690  HELPER_ORIL:
0000169E  4283                     691          CLR.L   D3
000016A0  163C 0004                692          MOVE.B   #4, D3
000016A4  16FC 004C                693          MOVE.B  #'L', (A3)+
000016A8                           694      
000016A8  4EB9 00001BC8            695          JSR     IMMEDIATE_EA     
000016AE  4EF8 1138                696          JMP     OP_FINISH
000016B2                           697  ;---------------------------------------------------
000016B2                           698  ; MOVEA . calling EA
000016B2                           699  ;-------------------------------------------------         
000016B2                           700  OP_MOVEAW: 
000016B2  16FC 0041                701          MOVE.B  #'A', (A3)+
000016B6  16FC 002E                702          MOVE.B  #'.', (A3)+
000016BA  16FC 0057                703          MOVE.B  #'W', (A3)+
000016BE                           704  
000016BE  4EB9 00001C24            705          JSR     MOVEA_EA
000016C4  4EF8 1138                706          JMP     OP_FINISH
000016C8                           707          
000016C8                           708  OP_MOVEAL: 
000016C8  16FC 0041                709          MOVE.B  #'A', (A3)+
000016CC  16FC 002E                710          MOVE.B  #'.', (A3)+
000016D0  16FC 004C                711          MOVE.B  #'L', (A3)+
000016D4                           712  
000016D4                           713          ; Call EA for MOVEA
000016D4  4EB9 00001C24            714          JSR     MOVEA_EA
000016DA  4EF8 1138                715          JMP     OP_FINISH
000016DE                           716     
000016DE                           717  ;---------------------------------------------------
000016DE                           718  ; LEA . calling EA
000016DE                           719  ;-------------------------------------------------        
000016DE                           720  OP_LEA: 
000016DE  16FC 004C                721          MOVE.B  #'L', (A3)+
000016E2  16FC 0045                722          MOVE.B  #'E', (A3)+
000016E6  16FC 0041                723          MOVE.B  #'A', (A3)+
000016EA                           724      
000016EA                           725          ; Long Size 
000016EA  4283                     726          CLR.L   D3
000016EC  163C 0004                727          MOVE.B   #4, D3
000016F0                           728         
000016F0                           729          ; Call EA for LEA 
000016F0  4EB9 00001CB2            730          JSR     LEA_EA
000016F6  4EF8 1138                731          JMP     OP_FINISH
000016FA                           732          
000016FA                           733  ;---------------------------------------------------
000016FA                           734  ; MOVEM . calling EA and calculating instruct SIZE
000016FA                           735  ;-------------------------------------------------      
000016FA                           736  OP_MOVEM1: 
000016FA  16FC 004D                737          MOVE.B  #'M', (A3)+
000016FE  16FC 004F                738          MOVE.B  #'O', (A3)+
00001702  16FC 0056                739          MOVE.B  #'V', (A3)+
00001706  16FC 0045                740          MOVE.B  #'E', (A3)+
0000170A  16FC 004D                741          MOVE.B  #'M', (A3)+
0000170E  16FC 002E                742          MOVE.B  #'.', (A3)+
00001712                           743          
00001712  4284                     744          CLR.L   D4
00001714  183C 0001                745          MOVE.B   #1, D4
00001718                           746          
00001718  6000 0024                747          BRA     MOVEM_SIZE_CALC 
0000171C                           748  OP_MOVEM0: 
0000171C  16FC 004D                749          MOVE.B  #'M', (A3)+
00001720  16FC 004F                750          MOVE.B  #'O', (A3)+
00001724  16FC 0056                751          MOVE.B  #'V', (A3)+
00001728  16FC 0045                752          MOVE.B  #'E', (A3)+
0000172C  16FC 004D                753          MOVE.B  #'M', (A3)+
00001730  16FC 002E                754          MOVE.B  #'.', (A3)+    
00001734                           755          
00001734  4284                     756          CLR.L   D4
00001736  183C 0000                757          MOVE.B   #0, D4
0000173A                           758          
0000173A  6000 0002                759          BRA     MOVEM_SIZE_CALC  
0000173E                           760  
0000173E                           761  MOVEM_SIZE_CALC: 
0000173E  4281                     762          CLR.L   D1
00001740  2200                     763          MOVE.L  D0,D1               ; Current instruct word
00001742  0241 0040                764          ANDI.W  #$0040,D1         ; Extract S 
00001746  143C 0006                765          MOVE.B  #right6, D2         
0000174A  E469                     766          LSR.W   D2,D1               ; 
0000174C                           767          
0000174C  B23C 0000                768          CMP.B   #0, D1
00001750  6700 000A                769          BEQ     MOVEM_W
00001754                           770          
00001754  B23C 0001                771          CMP.B   #1, D1
00001758  6700 0016                772          BEQ     MOVEM_L
0000175C                           773          
0000175C                           774  MOVEM_W: 
0000175C  16FC 0057                775          MOVE.B  #'W', (A3)+
00001760  4283                     776          CLR.L   D3 
00001762  163C 0002                777          MOVE.B   #2,D3 
00001766                           778          
00001766                           779          ; CALL MOVEM EA
00001766  4EB9 00001C66            780          JSR     MOVEM_EA
0000176C  4EF8 1138                781          JMP     OP_FINISH
00001770                           782          
00001770                           783  MOVEM_L: 
00001770  16FC 004C                784          MOVE.B  #'L', (A3)+
00001774  4283                     785          CLR.L   D3 
00001776  163C 0004                786          MOVE.B   #4,D3 
0000177A                           787          
0000177A                           788          ; CALL MOVEM EA 
0000177A  4EB9 00001C66            789          JSR     MOVEM_EA
00001780  4EF8 1138                790          JMP     OP_FINISH       
00001784                           791  ;---------------------------------------------------
00001784                           792  ; NOP, RTS, RTE, STOP
00001784                           793  ;-------------------------------------------------      
00001784                           794  OP_NOP_RTS_RTE: 
00001784  4281                     795          CLR.L   D1
00001786  2200                     796          MOVE.L  D0,D1               ; Current instruct word
00001788                           797          
00001788                           798          ; Check third 3 nibble for 0111 if not error 
00001788  0241 0FF0                799          ANDI.W  #$0FF0, D1
0000178C  143C 0004                800          MOVE.B  #right4, D2         
00001790  E469                     801          LSR.W   D2,D1               ; D1 = 2nd nibble
00001792                           802          
00001792  B27C 0E70                803          CMP.W   #$E70, D1
00001796  6700 0420                804          BEQ     OP_ERROR
0000179A                           805          
0000179A  4281                     806          CLR.L   D1
0000179C  2200                     807          MOVE.L  D0,D1               ; Current instruct word
0000179E                           808          
0000179E                           809          ; Check last 4 bits 
0000179E  0241 000F                810          ANDI.W  #$000F, D1
000017A2                           811  
000017A2  B23C 0001                812          CMP.B   #1, D1       NOP --> 0001 
000017A6  6700 0020                813          BEQ     OP_NOP
000017AA                           814  
000017AA  B23C 0002                815          CMP.B   #2, D1       NOP --> 0001 
000017AE  6700 0028                816          BEQ     OP_STOP
000017B2                           817          
000017B2  B23C 0003                818          CMP.B   #3, D1      RTE --> 0011 
000017B6  6700 0034                819          BEQ     OP_RTE
000017BA                           820  
000017BA  B23C 0005                821          CMP.B   #5, D1      RTS --> 0101
000017BE  6700 003C                822          BEQ     OP_RTS       
000017C2                           823  
000017C2  4EF9 00001BB8            824          JMP     OP_ERROR    ERROR CODE
000017C8                           825  
000017C8                           826  OP_NOP: 
000017C8  16FC 004E                827          MOVE.B  #'N', (A3)+
000017CC  16FC 004F                828          MOVE.B  #'O', (A3)+
000017D0  16FC 0050                829          MOVE.B  #'P', (A3)+
000017D4                           830          
000017D4                           831          ; Loop back into OP Decode
000017D4  4EF8 1138                832          JMP     OP_FINISH
000017D8                           833  OP_STOP: 
000017D8  16FC 0053                834          MOVE.B  #'S', (A3)+
000017DC  16FC 0054                835          MOVE.B  #'T', (A3)+
000017E0  16FC 004F                836          MOVE.B  #'O', (A3)+
000017E4  16FC 0050                837          MOVE.B  #'P', (A3)+     
000017E8                           838  
000017E8  4EF8 1138                839          JMP     OP_FINISH   
000017EC                           840  OP_RTE: 
000017EC  16FC 0052                841          MOVE.B  #'R', (A3)+
000017F0  16FC 0054                842          MOVE.B  #'T', (A3)+
000017F4  16FC 0045                843          MOVE.B  #'E', (A3)+
000017F8                           844          
000017F8  4EF8 1138                845          JMP     OP_FINISH
000017FC                           846  OP_RTS: 
000017FC  16FC 0052                847          MOVE.B  #'R', (A3)+
00001800  16FC 0054                848          MOVE.B  #'T', (A3)+
00001804  16FC 0053                849          MOVE.B  #'S', (A3)+
00001808                           850          
00001808  4EF8 1138                851          JMP     OP_FINISH
0000180C                           852          
0000180C                           853  ;---------------------------------------------------
0000180C                           854  ; SUBQ and ADDQ. Gathering instruct size and calling EA
0000180C                           855  ;-------------------------------------------------        
0000180C                           856  OP_SUBQ: 
0000180C  16FC 0053                857          MOVE.B  #'S', (A3)+
00001810  16FC 0055                858          MOVE.B  #'U', (A3)+
00001814  16FC 0042                859          MOVE.B  #'B', (A3)+
00001818  16FC 0051                860          MOVE.B  #'Q', (A3)+
0000181C  16FC 002E                861          MOVE.B  #'.', (A3)+         
00001820  4EF9 00001840            862          JMP     HELPER__ADDSUBQ_SIZE_CAL      
00001826                           863          
00001826                           864          
00001826                           865  OP_ADDQ:    
00001826  16FC 0041                866          MOVE.B  #'A', (A3)+
0000182A  16FC 0044                867          MOVE.B  #'D', (A3)+
0000182E  16FC 0044                868          MOVE.B  #'D', (A3)+
00001832  16FC 0051                869          MOVE.B  #'Q', (A3)+
00001836  16FC 002E                870          MOVE.B  #'.', (A3)+         
0000183A  4EF9 00001840            871          JMP     HELPER__ADDSUBQ_SIZE_CAL
00001840                           872  
00001840                           873  HELPER__ADDSUBQ_SIZE_CAL:
00001840  4281                     874          CLR.L   D1 
00001842  2200                     875          MOVE.L  D0,D1               ; Current instruct word
00001844  0241 00C0                876          ANDI.W  #size,D1         ; Extract 2nd nibble
00001848  143C 0006                877          MOVE.B  #right6, D2         
0000184C  E469                     878          LSR.W   D2,D1               ; D1 = 2nd nibble
0000184E                           879          
0000184E  4283                     880          CLR.L   D3
00001850  1601                     881          MOVE.B   D1, D3  
00001852                           882  
00001852  B63C 0002                883          CMP.B   #2, D3
00001856  6700 0012                884          BEQ     HELPER_ADDSUBQ_CONVERT_L
0000185A                           885          
0000185A  B63C 0001                886          CMP.B   #1, D3
0000185E  6700 001E                887          BEQ     HELPER_ADDSUBQ_CONVERT_W
00001862                           888          
00001862  B63C 0000                889          CMP.B   #0, D3   
00001866  6700 002A                890          BEQ     HELPER_ADDSUBQ_CONVERT_B
0000186A                           891          
0000186A                           892  HELPER_ADDSUBQ_CONVERT_L: 
0000186A  4283                     893          CLR.L   D3
0000186C  163C 0004                894          MOVE.B  #4, D3 
00001870  16FC 004C                895          MOVE.B  #'L', (A3)+   
00001874                           896          
00001874                           897          ; CALL EA 
00001874  4EB9 00001D8A            898          JSR     ADDQ_EA
0000187A  4EF8 1138                899          JMP     OP_FINISH
0000187E                           900          
0000187E                           901  HELPER_ADDSUBQ_CONVERT_W: 
0000187E  4283                     902          CLR.L   D3
00001880  163C 0002                903          MOVE.B  #2, D3 
00001884  16FC 0057                904          MOVE.B  #'W', (A3)+   
00001888                           905          
00001888                           906          ; CALL EA
00001888  4EB9 00001D8A            907          JSR     ADDQ_EA
0000188E  4EF8 1138                908          JMP     OP_FINISH  
00001892                           909        
00001892                           910  HELPER_ADDSUBQ_CONVERT_B: 
00001892  4283                     911          CLR.L   D3
00001894  163C 0001                912          MOVE.B  #1, D3 
00001898  16FC 0042                913          MOVE.B  #'B', (A3)+ 
0000189C                           914          
0000189C                           915          ; CALL EA  
0000189C  4EB9 00001D8A            916          JSR     ADDQ_EA
000018A2  4EF8 1138                917          JMP     OP_FINISH
000018A6                           918  ;---------------------------------------------------
000018A6                           919  ; SUB. Gathering instruct size and calling EA
000018A6                           920  ;-------------------------------------------------  
000018A6                           921  OP_SUB:
000018A6  4EF9 000018AC            922          JMP     HELPER_SUB_SIZE_CAL
000018AC                           923  
000018AC                           924  HELPER_SUB_SIZE_CAL:
000018AC  4281                     925          CLR.L   D1 
000018AE  2200                     926          MOVE.L  D0,D1               ; Current instruct word
000018B0  0241 00C0                927          ANDI.W  #size,D1         ; Extract 2nd nibble
000018B4  143C 0006                928          MOVE.B  #right6, D2         
000018B8  E469                     929          LSR.W   D2,D1               ; D1 = 2nd nibble
000018BA                           930          
000018BA  4283                     931          CLR.L   D3
000018BC  1601                     932          MOVE.B   D1, D3  
000018BE                           933  
000018BE  B63C 0002                934          CMP.B   #2, D3
000018C2  6700 0012                935          BEQ     HELPER_SUB_CONVERT_L
000018C6                           936          
000018C6  B63C 0001                937          CMP.B   #1, D3
000018CA  6700 001E                938          BEQ     HELPER_SUB_CONVERT_W
000018CE                           939          
000018CE  B63C 0000                940          CMP.B   #0, D3   
000018D2  6700 002A                941          BEQ     HELPER_SUB_CONVERT_B
000018D6                           942          
000018D6                           943  HELPER_SUB_CONVERT_L: 
000018D6  4283                     944          CLR.L   D3
000018D8  163C 0004                945          MOVE.B  #4, D3 
000018DC  16FC 004C                946          MOVE.B  #'L', (A3)+   
000018E0                           947  
000018E0                           948          ; CALL EA  
000018E0  4EB9 00001D58            949          JSR     SUB_EA
000018E6  4EF8 1138                950          JMP     OP_FINISH  
000018EA                           951          
000018EA                           952  HELPER_SUB_CONVERT_W: 
000018EA  4283                     953          CLR.L   D3
000018EC  163C 0002                954          MOVE.B  #2, D3 
000018F0  16FC 0057                955          MOVE.B  #'W', (A3)+   
000018F4                           956  
000018F4                           957          ; CALL EA
000018F4  4EB9 00001D58            958          JSR     SUB_EA
000018FA  4EF8 1138                959          JMP     OP_FINISH  
000018FE                           960          
000018FE                           961  HELPER_SUB_CONVERT_B: 
000018FE  4283                     962          CLR.L   D3
00001900  163C 0001                963          MOVE.B  #1, D3 
00001904  16FC 0042                964          MOVE.B  #'B', (A3)+   
00001908                           965  
00001908                           966          ; CALL EA
00001908  4EB9 00001D58            967          JSR     SUB_EA
0000190E  4EF8 1138                968          JMP     OP_FINISH    
00001912                           969        
00001912                           970  ;---------------------------------------------------
00001912                           971  ; ADDA. Gathering instruct size and calling EA
00001912                           972  ;-------------------------------------------------       
00001912                           973  OP_ADDA: 
00001912  16FC 0041                974          MOVE.B  #'A', (A3)+
00001916  16FC 0044                975          MOVE.B  #'D', (A3)+
0000191A  16FC 0044                976          MOVE.B  #'D', (A3)+
0000191E  16FC 0041                977          MOVE.B  #'A', (A3)+
00001922  16FC 002E                978          MOVE.B  #'.', (A3)+
00001926                           979          
00001926                           980          ; Calculate instruct size
00001926  4281                     981          CLR.L   D1
00001928  2200                     982          MOVE.L  D0,D1               ; Current instruct word
0000192A  0241 0100                983          ANDI.W  #$100,D1         ; Extract 2nd nibble
0000192E  143C 0008                984          MOVE.B  #right8, D2         
00001932  E469                     985          LSR.W   D2,D1               ; 
00001934                           986          
00001934  B23C 0001                987          CMP.B   #1, D1
00001938  6700 0006                988          BEQ     HELPER_ADDA_L
0000193C  6600 0016                989          BNE     HELPER_ADDA_W
00001940                           990          ; EA Calculator 
00001940                           991  HELPER_ADDA_L: 
00001940  4283                     992          CLR.L   D3
00001942  163C 0004                993          MOVE.B   #4, D3 
00001946  16FC 004C                994          MOVE.B   #'L', (A3)+
0000194A                           995          
0000194A                           996          ;CALL EA
0000194A  4EB9 00001E42            997          JSR     ADDA_EA
00001950  4EF8 1138                998          JMP     OP_FINISH 
00001954                           999          
00001954                          1000  HELPER_ADDA_W: 
00001954  4283                    1001          CLR.L   D3
00001956  163C 0002               1002          MOVE.B  #2, D3 
0000195A  16FC 0057               1003          MOVE.B  #'W', (A3)+
0000195E                          1004  
0000195E                          1005          ;CALL EA
0000195E  4EB9 00001E42           1006          JSR     ADDA_EA
00001964  4EF8 1138               1007          JMP     OP_FINISH 
00001968                          1008  ;---------------------------------------------------
00001968                          1009  ; ADD. Gathering instruct size and calling EA
00001968                          1010  ;-------------------------------------------------       
00001968                          1011  OP_ADD: 
00001968  16FC 0041               1012          MOVE.B  #'A', (A3)+
0000196C  16FC 0044               1013          MOVE.B  #'D', (A3)+
00001970  16FC 0044               1014          MOVE.B  #'D', (A3)+
00001974  16FC 002E               1015          MOVE.B  #'.', (A3)+
00001978                          1016          
00001978                          1017          ; Calculate instruct size
00001978                          1018          
00001978                          1019  HELPER_ADD_SIZE_CAL:
00001978  4281                    1020          CLR.L   D1 
0000197A  2200                    1021          MOVE.L  D0,D1               ; Current instruct word
0000197C  0241 00C0               1022          ANDI.W  #size,D1         ; Extract 2nd nibble
00001980  143C 0006               1023          MOVE.B  #right6, D2         
00001984  E469                    1024          LSR.W   D2,D1               ; 
00001986                          1025          
00001986  4283                    1026          CLR.L   D3
00001988  1601                    1027          MOVE.B   D1, D3  
0000198A                          1028  
0000198A  B63C 0002               1029          CMP.B   #2, D3
0000198E  6700 0012               1030          BEQ     HELPER_ADD_CONVERT_L
00001992                          1031          
00001992  B63C 0001               1032          CMP.B   #1, D3
00001996  6700 001E               1033          BEQ     HELPER_ADD_CONVERT_W
0000199A                          1034          
0000199A  B63C 0000               1035          CMP.B   #0, D3   
0000199E  6700 002A               1036          BEQ     HELPER_ADD_CONVERT_B
000019A2                          1037                  
000019A2                          1038  HELPER_ADD_CONVERT_L: 
000019A2  4283                    1039          CLR.L   D3
000019A4  163C 0004               1040          MOVE.B  #4, D3 
000019A8  16FC 004C               1041          MOVE.B  #'L', (A3)+   
000019AC                          1042  
000019AC                          1043          ; CALL EA  
000019AC  4EB9 00001E3C           1044          JSR     ADD_EA
000019B2  4EF8 1138               1045          JMP     OP_FINISH 
000019B6                          1046          
000019B6                          1047  HELPER_ADD_CONVERT_W: 
000019B6  4283                    1048          CLR.L   D3
000019B8  163C 0002               1049          MOVE.B  #2, D3 
000019BC  16FC 0057               1050          MOVE.B  #'W', (A3)+   
000019C0                          1051  
000019C0                          1052          ; CALL EA
000019C0  4EB9 00001E3C           1053          JSR     ADD_EA
000019C6  4EF8 1138               1054          JMP     OP_FINISH
000019CA                          1055          
000019CA                          1056  HELPER_ADD_CONVERT_B: 
000019CA  4283                    1057          CLR.L   D3
000019CC  163C 0001               1058          MOVE.B  #1, D3 
000019D0  16FC 0042               1059          MOVE.B  #'B', (A3)+   
000019D4                          1060  
000019D4                          1061          ; CALL EA
000019D4  4EB9 00001E3C           1062          JSR     ADD_EA
000019DA  4EF8 1138               1063          JMP     OP_FINISH             
000019DE                          1064  ;---------------------------------------------------
000019DE                          1065  ; BSR. Gathering instruct size and calling EA
000019DE                          1066  ;-------------------------------------------------         
000019DE                          1067  OP_BSR:    
000019DE  16FC 0042               1068          MOVE.B  #'B', (A3)+
000019E2  16FC 0053               1069          MOVE.B  #'S', (A3)+
000019E6  16FC 0052               1070          MOVE.B  #'R', (A3)+
000019EA                          1071   
000019EA  4EB9 00001CF4           1072          JSR     BSR_EA
000019F0  4EF8 1138               1073          JMP     OP_FINISH
000019F4                          1074          
000019F4                          1075  ;---------------------------------------------------
000019F4                          1076  ; BRA   Check. Gathering instruct size and calling EA
000019F4                          1077  ;------------------------------------------------- 
000019F4                          1078  OP_BRA:    
000019F4  16FC 0042               1079          MOVE.B  #'B', (A3)+
000019F8  16FC 0052               1080          MOVE.B  #'R', (A3)+
000019FC  16FC 0041               1081          MOVE.B  #'A', (A3)+
00001A00                          1082       
00001A00                          1083          ; Call BRA EA 
00001A00  4EB9 00001CEE           1084          JSR     BRA_EA
00001A06  4EF8 1138               1085          JMP     OP_FINISH
00001A0A                          1086          
00001A0A                          1087  ;---------------------------------------------------
00001A0A                          1088  ; MULU  calling EA
00001A0A                          1089  ;------------------------------------------------- 
00001A0A                          1090  OP_MULU: 
00001A0A  16FC 0055               1091          MOVE.B  #'U', (A3)+
00001A0E                          1092  
00001A0E                          1093          ; Call EA
00001A0E  4EB9 00001E02           1094          JSR     MULU_EA
00001A14  4EF8 1138               1095          JMP     OP_FINISH
00001A18                          1096  
00001A18                          1097  ;---------------------------------------------------
00001A18                          1098  ; MULS  calling EA
00001A18                          1099  ;------------------------------------------------- 
00001A18                          1100  OP_MULS: 
00001A18  16FC 0053               1101          MOVE.B  #'S', (A3)+
00001A1C                          1102  
00001A1C                          1103          ; Call EA
00001A1C  4EB9 00001E02           1104          JSR     MULU_EA
00001A22  4EF8 1138               1105          JMP     OP_FINISH        
00001A26                          1106          
00001A26                          1107  ;---------------------------------------------------
00001A26                          1108  ; DIVS   calling EA
00001A26                          1109  ;------------------------------------------------- 
00001A26                          1110  OP_DIVS: 
00001A26  16FC 0044               1111          MOVE.B  #'D', (A3)+
00001A2A  16FC 0049               1112          MOVE.B  #'I', (A3)+
00001A2E  16FC 0056               1113          MOVE.B  #'V', (A3)+
00001A32  16FC 0053               1114          MOVE.B  #'S', (A3)+
00001A36                          1115          
00001A36                          1116          ; Call EA
00001A36  4EB9 00001D1C           1117          JSR     DIVS_EA
00001A3C  4EF8 1138               1118          JMP     OP_FINISH
00001A40                          1119  ;---------------------------------------------------
00001A40                          1120  ; DIVU   calling EA
00001A40                          1121  ;------------------------------------------------- 
00001A40                          1122  OP_DIVU:
00001A40  16FC 0044               1123          MOVE.B  #'D', (A3)+
00001A44  16FC 0049               1124          MOVE.B  #'I', (A3)+
00001A48  16FC 0056               1125          MOVE.B  #'V', (A3)+
00001A4C  16FC 0055               1126          MOVE.B  #'U', (A3)+
00001A50                          1127          
00001A50                          1128          ; Call EA
00001A50  4EB9 00001D16           1129          JSR     DIVU_EA
00001A56  4EF8 1138               1130          JMP     OP_FINISH
00001A5A                          1131  ;------------------------------------------------
00001A5A                          1132  ; CMP   calling EA and finding size
00001A5A                          1133  ;------------------------------------------------ 
00001A5A                          1134  OP_CMP: 
00001A5A  4EF9 00001A60           1135        JMP   HELPER_CMP_SIZE_CAL   
00001A60                          1136       
00001A60                          1137  HELPER_CMP_SIZE_CAL:         
00001A60  4283                    1138          CLR.L   D3
00001A62  1601                    1139          MOVE.B   D1, D3  
00001A64                          1140  
00001A64  B63C 0002               1141          CMP.B   #2, D3
00001A68  6700 0012               1142          BEQ     HELPER_CMP_CONVERT_L
00001A6C                          1143          
00001A6C  B63C 0001               1144          CMP.B   #1, D3
00001A70  6700 001E               1145          BEQ     HELPER_CMP_CONVERT_W
00001A74                          1146          
00001A74  B63C 0000               1147          CMP.B   #0, D3   
00001A78  6700 002A               1148          BEQ     HELPER_CMP_CONVERT_B
00001A7C                          1149          
00001A7C                          1150  HELPER_CMP_CONVERT_L: 
00001A7C  4283                    1151          CLR.L   D3
00001A7E  163C 0004               1152          MOVE.B  #4, D3 
00001A82  16FC 004C               1153          MOVE.B  #'L', (A3)+   
00001A86                          1154          ; CALL EA   
00001A86  4EB9 00001DC8           1155          JSR     CMP_EA
00001A8C  4EF8 1138               1156          JMP     OP_FINISH
00001A90                          1157          
00001A90                          1158  HELPER_CMP_CONVERT_W: 
00001A90  4283                    1159          CLR.L   D3
00001A92  163C 0002               1160          MOVE.B  #2, D3 
00001A96  16FC 0057               1161          MOVE.B  #'W', (A3)+   
00001A9A                          1162          ; CALL EA
00001A9A  4EB9 00001DC8           1163          JSR     CMP_EA
00001AA0  4EF8 1138               1164          JMP     OP_FINISH
00001AA4                          1165          
00001AA4                          1166  HELPER_CMP_CONVERT_B: 
00001AA4  4283                    1167          CLR.L   D3
00001AA6  163C 0001               1168          MOVE.B  #1, D3 
00001AAA  16FC 0042               1169          MOVE.B  #'B', (A3)+ 
00001AAE                          1170    
00001AAE                          1171          ; CALL EA
00001AAE  4EB9 00001DC8           1172          JSR     CMP_EA
00001AB4  4EF8 1138               1173          JMP     OP_FINISH
00001AB8                          1174  
00001AB8                          1175  ;---------------------------------------------------
00001AB8                          1176  ; ASL   Memory Shift only word size 
00001AB8                          1177  ;-------------------------------------------------             
00001AB8                          1178  OP_ASL_M: 
00001AB8  16FC 0041               1179          MOVE.B  #'A', (A3)+
00001ABC  16FC 0053               1180          MOVE.B  #'S', (A3)+
00001AC0  16FC 004C               1181          MOVE.B  #'L', (A3)+ 
00001AC4  4283                    1182          CLR.L   D3
00001AC6  163C 0002               1183          MOVE.B  #2, D3 
00001ACA                          1184          ; Get ready to call Mode 7 subclass 1
00001ACA                          1185          
00001ACA                          1186  ;---------------------------------------------------
00001ACA                          1187  ; ASR    Memory Shift only word size 
00001ACA                          1188  ;------------------------------------------------- 
00001ACA                          1189  OP_ASR_M: 
00001ACA  16FC 0041               1190          MOVE.B  #'A', (A3)+
00001ACE  16FC 0053               1191          MOVE.B  #'S', (A3)+
00001AD2  16FC 0052               1192          MOVE.B  #'R', (A3)+ 
00001AD6                          1193          
00001AD6  4283                    1194          CLR.L   D3
00001AD8  163C 0002               1195          MOVE.B  #2, D3 
00001ADC                          1196          ; Get ready to call Mode 7 subclass 1
00001ADC                          1197          
00001ADC                          1198  *-------------------------------------------------
00001ADC                          1199  *  Rotation Checker, Mainly looking for ASL/ASR
00001ADC                          1200  *------------------------------------------------        
00001ADC                          1201  OP_ROTATION_CHECK: 
00001ADC                          1202         ; Check the 4 - 5 bit for 00 
00001ADC  4281                    1203          CLR.L   D1 
00001ADE  2200                    1204          MOVE.L  D0,D1               ; Current instruct word
00001AE0  0241 0018               1205          ANDI.W  #$18,D1         ; Extract 2nd nibble
00001AE4  143C 0003               1206          MOVE.B  #3, D2         
00001AE8  E469                    1207          LSR.W   D2,D1    
00001AEA                          1208          
00001AEA  B23C 0000               1209          CMP.B   #0, D1      ; AS
00001AEE  6700 001A               1210          BEQ     OP_ROTATION_HELP
00001AF2                          1211          
00001AF2  B23C 0001               1212          CMP.B   #1, D1      ; LS
00001AF6  6700 00B0               1213          BEQ     OP_UNSUPPORTED
00001AFA                          1214  
00001AFA  B23C 0002               1215          CMP.B   #2, D1      ; ROXd
00001AFE  6700 00A8               1216          BEQ     OP_UNSUPPORTED
00001B02                          1217          
00001B02  B23C 0003               1218          CMP.B   #3, D1      ; ROXd
00001B06  6700 00A0               1219          BEQ     OP_UNSUPPORTED   
00001B0A                          1220   
00001B0A                          1221  OP_ROTATION_HELP: 
00001B0A                          1222          ; Find the Rotation 
00001B0A                          1223          ; Extract the size 
00001B0A  4281                    1224          CLR.L   D1 
00001B0C  2200                    1225          MOVE.L  D0,D1               ; Current instruct word
00001B0E  0241 0100               1226          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001B12  143C 0008               1227          MOVE.B  #right8, D2             
00001B16  E469                    1228          LSR.W   D2,D1  
00001B18                          1229  
00001B18  B23C 0000               1230          CMP.B   #0, D1      ; Right Rotation 
00001B1C  6700 007A               1231          BEQ     OP_ASR_ADDER
00001B20                          1232          
00001B20  B23C 0001               1233          CMP.B   #1, D1      ; Left rotation
00001B24  6700 0062               1234          BEQ     OP_ASL_ADDER
00001B28                          1235          
00001B28                          1236  OP_ROTATION_SIZE_HELP:        
00001B28                          1237          ; Check the size 
00001B28  B63C 0002               1238          CMP.B   #2, D3
00001B2C  6700 0042               1239          BEQ     OP_ROTATION_SIZE_L    
00001B30                          1240          
00001B30  B63C 0001               1241          CMP.B   #1, D3
00001B34  6700 0022               1242          BEQ     OP_ROTATION_SIZE_W   
00001B38                          1243          
00001B38  B63C 0000               1244          CMP.B   #0, D3
00001B3C  6700 0002               1245          BEQ     OP_ROTATION_SIZE_B 
00001B40                          1246          
00001B40                          1247          
00001B40                          1248  OP_ROTATION_SIZE_B: 
00001B40  4283                    1249          CLR.L   D3
00001B42  163C 0001               1250          MOVE.B  #1, D3     
00001B46  16FC 002E               1251          MOVE.B  #'.', (A3)+
00001B4A  16FC 0042               1252          MOVE.B  #'B', (A3)+
00001B4E                          1253          
00001B4E  4EB9 00001E7E           1254          JSR     ASL_EA
00001B54  4EF8 1138               1255          JMP     OP_FINISH
00001B58                          1256          
00001B58                          1257  OP_ROTATION_SIZE_W: 
00001B58  4283                    1258          CLR.L   D3
00001B5A  163C 0002               1259          MOVE.B  #2, D3 
00001B5E  16FC 002E               1260          MOVE.B  #'.', (A3)+
00001B62  16FC 0057               1261          MOVE.B  #'W', (A3)+
00001B66                          1262          
00001B66  4EB9 00001E7E           1263          JSR     ASL_EA
00001B6C  4EF8 1138               1264          JMP     OP_FINISH
00001B70                          1265          
00001B70                          1266  OP_ROTATION_SIZE_L:
00001B70  4283                    1267          CLR.L   D3
00001B72  163C 0004               1268          MOVE.B  #4, D3  
00001B76  16FC 002E               1269          MOVE.B  #'.', (A3)+
00001B7A  16FC 004C               1270          MOVE.B  #'L', (A3)+
00001B7E                          1271          
00001B7E  4EB9 00001E7E           1272          JSR     ASL_EA
00001B84  4EF8 1138               1273          JMP     OP_FINISH
00001B88                          1274          
00001B88                          1275  OP_ASL_ADDER: 
00001B88  16FC 0041               1276          MOVE.B  #'A', (A3)+
00001B8C  16FC 0053               1277          MOVE.B  #'S', (A3)+
00001B90  16FC 004C               1278          MOVE.B  #'L', (A3)+    
00001B94                          1279          
00001B94  4EF8 1B28               1280          JMP     OP_ROTATION_SIZE_HELP 
00001B98                          1281          
00001B98                          1282  OP_ASR_ADDER: 
00001B98  16FC 0041               1283          MOVE.B  #'A', (A3)+
00001B9C  16FC 0053               1284          MOVE.B  #'S', (A3)+
00001BA0  16FC 0052               1285          MOVE.B  #'R', (A3)+    
00001BA4                          1286          
00001BA4  4EF8 1B28               1287          JMP     OP_ROTATION_SIZE_HELP  
00001BA8                          1288  ;--------------------------------------------------
00001BA8                          1289  ; Error Handling    
00001BA8                          1290  ;------------------------------------------------- 
00001BA8                          1291  OP_UNSUPPORTED: 
00001BA8  43F9 000025FC           1292          LEA     DECODE_OP_UNSUPPORT, A1
00001BAE  103C 000E               1293          MOVE.B  #task14,D0
00001BB2  4E4F                    1294          TRAP    #15           Display  Error Message
00001BB4  4EF8 1138               1295          JMP     OP_FINISH
00001BB8                          1296          
00001BB8                          1297  OP_ERROR: 
00001BB8  43F9 000025BF           1298          LEA     DECODE_OP_ERROR, A1
00001BBE  103C 000E               1299          MOVE.B  #task14,D0
00001BC2  4E4F                    1300          TRAP    #15           Display  Error Message
00001BC4  4EF8 1138               1301          JMP     OP_FINISH
00001BC8                          1302                
00001BC8                          1303  ;--------------------------------------------------
00001BC8                          1304  ; Effective Address Start   
00001BC8                          1305  ;------------------------------------------------- 
00001BC8                          1306  
00001BC8                          1307  ;----------------------------------------------
00001BC8                          1308  ;IMMEDIATE_EA for ORI,ANDI,SUBI,ADDI
00001BC8                          1309      *D3 = # of ITOA Loop ITERATION
00001BC8                          1310      *D1 = size of instruct
00001BC8                          1311      *D0 = Shift Data
00001BC8                          1312      *D5 = Mode
00001BC8                          1313      *D6 = Register
00001BC8                          1314      *D7 = current immediate data
00001BC8                          1315  ;----------------------------------------------    
00001BC8                          1316  IMMEDIATE_EA
00001BC8                          1317          ; Extract dst mode and register
00001BC8  4EB9 00001C14           1318          JSR     MOVE_IMM_DATA
00001BCE                          1319          
00001BCE  4286                    1320          CLR.L   D6
00001BD0  4285                    1321          CLR.L   D5
00001BD2  2C00                    1322          MOVE.L  D0,D6               ; Current Instruct word Register    
00001BD4  2A00                    1323          MOVE.L  D0,D5               ; Current instruct word Mode
00001BD6                          1324          
00001BD6  0246 0007               1325          ANDI.W  #$7,D6              ; Gets the Register
00001BDA                          1326          
00001BDA  0245 0038               1327          ANDI.W  #$38,D5              
00001BDE  103C 0003               1328          MOVE.B  #$3, D0            
00001BE2  E06D                    1329          LSR.W   D0,D5               ; Extract the Mode      
00001BE4                          1330           
00001BE4  BA3C 0001               1331          CMP.B   #1, D5          ; Check for valid dst 
00001BE8  6700 0644               1332          BEQ     DATA_ERROR    
00001BEC                          1333          
00001BEC  1203                    1334          MOVE.B  D3,D1           ; Size Instruct 
00001BEE  C6FC 0002               1335          MULU    #2, D3          ; Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
00001BF2                          1336   
00001BF2  16FC 0020               1337          MOVE.B  #' ', (A3)+
00001BF6  16FC 0023               1338          MOVE.B  #'#', (A3)+
00001BFA  16FC 0024               1339          MOVE.B  #'$', (A3)+
00001BFE                          1340          
00001BFE                          1341          ; Call ITOA 
00001BFE  4EB9 0000222E           1342          JSR     ITOA
00001C04                          1343          
00001C04  16FC 002C               1344          MOVE.B  #',', (A3)+
00001C08  16FC 0020               1345          MOVE.B  #' ', (A3)+
00001C0C                          1346          
00001C0C  4EB9 00001F12           1347          JSR     EA_DECODER
00001C12  4E75                    1348          RTS
00001C14                          1349          
00001C14                          1350  MOVE_IMM_DATA: 
00001C14  B63C 0002               1351          CMP.B   #2, D3
00001C18  6700 0006               1352          BEQ     SHIFT16
00001C1C                          1353          
00001C1C  2E1D                    1354          MOVE.L  (A5)+, D7
00001C1E  4E75                    1355          RTS
00001C20                          1356          
00001C20                          1357  SHIFT16: 
00001C20  3E1D                    1358          MOVE.W  (A5)+, D7
00001C22  4E75                    1359          RTS
00001C24                          1360  
00001C24                          1361          
00001C24                          1362  MOVEA_EA
00001C24                          1363          ;This is the same as MOVE, just that first operand is for sure an address.
00001C24  4EF9 00001C2A           1364          JMP MOVE_EA
00001C2A                          1365  
00001C2A                          1366  MOVE_EA
00001C2A  2A00                    1367          MOVE.L D0, D5
00001C2C  2C00                    1368          MOVE.L D0, D6
00001C2E                          1369          
00001C2E                          1370          ;and off mode
00001C2E  0245 0038               1371          ANDI #56, D5
00001C32  E685                    1372          ASR.L #3, D5
00001C34                          1373          ;and off data
00001C34  0246 0007               1374          ANDI #7, D6
00001C38  4EB9 00001F12           1375          JSR EA_DECODER
00001C3E                          1376      
00001C3E  16FC 002C               1377          MOVE.B #',', (A3)+
00001C42                          1378          ;Reset D5 and D6 just in case.
00001C42  4285                    1379          CLR.L D5
00001C44  4286                    1380          CLR.L D6
00001C46                          1381          ;Second argument, set D4
00001C46  383C 0001               1382          MOVE #1, D4
00001C4A                          1383      
00001C4A                          1384          ; Grab the other mode
00001C4A  2A00                    1385          MOVE.L D0, D5
00001C4C  2C00                    1386          MOVE.L D0, D6
00001C4E                          1387      
00001C4E                          1388          ;and off mode
00001C4E  0245 01C0               1389          ANDI #448, D5
00001C52  EC85                    1390          ASR.L #6, D5
00001C54                          1391          ;and off data
00001C54  0246 0E00               1392          ANDI #3584, D6
00001C58  E086                    1393          ASR.L #8, D6
00001C5A  E286                    1394          ASR.L #1, D6
00001C5C  4EB9 00001F12           1395          JSR EA_DECODER
00001C62                          1396          
00001C62                          1397          ;Clear D4
00001C62  4284                    1398          CLR.L D4
00001C64                          1399          
00001C64  4E75                    1400          RTS
00001C66                          1401  
00001C66                          1402  MOVEM_EA
00001C66                          1403          ;check if we're reading from or writing to memory.
00001C66  3A00                    1404          MOVE.W D0, D5
00001C68  0245 0400               1405          ANDI #1024, D5
00001C6C  BA7C 0000               1406          CMP #0, D5
00001C70  6700 000C               1407          BEQ MOVEM_EA_TO_MEM
00001C74  BA7C 0400               1408          CMP #1024, D5
00001C78  6700 0004               1409          BEQ MOVEM_EA_TO_MEM
00001C7C                          1410      
00001C7C                          1411          ;Error-handling return
00001C7C  4E75                    1412          RTS
00001C7E                          1413      
00001C7E                          1414  MOVEM_EA_TO_MEM
00001C7E                          1415  
00001C7E                          1416  MOVEM_EA_FROM_MEM
00001C7E                          1417  
00001C7E                          1418  
00001C7E                          1419  MOVEQ_EA
00001C7E  2A00                    1420          MOVE.L D0, D5
00001C80  2C00                    1421          MOVE.L D0, D6
00001C82                          1422      
00001C82                          1423          ;set mode to immediate
00001C82  303C 0007               1424          MOVE #7, D0
00001C86                          1425          ;and off data
00001C86  0247 00FF               1426          ANDI #255, D7
00001C8A  4EB9 00001F12           1427          JSR EA_DECODER
00001C90                          1428      
00001C90  16FC 002C               1429          MOVE.B #',', (A3)+
00001C94                          1430          ;Reset D6 just in case.
00001C94  4286                    1431          CLR.L D6
00001C96                          1432          ;Second argument, set D4
00001C96  383C 0001               1433          MOVE #1, D4
00001C9A                          1434  
00001C9A  2A00                    1435          MOVE.L D0, D5
00001C9C  2C00                    1436          MOVE.L D0, D6
00001C9E                          1437      
00001C9E                          1438          ;set mode to data register
00001C9E  4285                    1439          CLR.L D5
00001CA0                          1440          ;and off data
00001CA0  0246 0E00               1441          ANDI #3584, D6
00001CA4  E086                    1442          ASR.L #8, D6
00001CA6  E286                    1443          ASR.L #1, D6
00001CA8  4EB9 00001F12           1444          JSR EA_DECODER
00001CAE                          1445          
00001CAE                          1446          ;Reset D4
00001CAE  4284                    1447          CLR.L D4
00001CB0                          1448          
00001CB0  4E75                    1449          RTS
00001CB2                          1450  
00001CB2                          1451  LEA_EA
00001CB2  2A00                    1452          MOVE.L D0, D5
00001CB4  2C00                    1453          MOVE.L D0, D6
00001CB6                          1454      
00001CB6                          1455          ;and off mode
00001CB6  0245 01C0               1456          ANDI #448, D5
00001CBA  EC85                    1457          ASR.L #6, D5
00001CBC                          1458          ;and off data
00001CBC  0246 0E00               1459          ANDI #3584, D6
00001CC0  E086                    1460          ASR.L #8, D6
00001CC2  E286                    1461          ASR.L #1, D6
00001CC4  4EB9 00001F12           1462          JSR EA_DECODER
00001CCA                          1463      
00001CCA  16FC 002C               1464          MOVE.B #',', (A3)+
00001CCE                          1465          ;Reset D5 and D6 just in case.
00001CCE  4285                    1466          CLR.L D5
00001CD0  4286                    1467          CLR.L D6
00001CD2                          1468          ;Second argument, set D4
00001CD2  383C 0001               1469          MOVE #1, D4
00001CD6                          1470      
00001CD6                          1471          ; Grab the other mode
00001CD6  2A00                    1472          MOVE.L D0, D5
00001CD8  2C00                    1473          MOVE.L D0, D6
00001CDA                          1474      
00001CDA                          1475          ;and off mode
00001CDA  0245 0038               1476          ANDI #56, D5
00001CDE  E685                    1477          ASR.L #3, D5
00001CE0                          1478          ;and off data
00001CE0  0246 0007               1479          ANDI #7, D6
00001CE4  4EB9 00001F12           1480          JSR EA_DECODER
00001CEA                          1481          
00001CEA                          1482          ;Reset D4
00001CEA  4284                    1483          CLR.L D4
00001CEC                          1484      
00001CEC  4E75                    1485          RTS
00001CEE                          1486      
00001CEE                          1487  BRA_EA
00001CEE                          1488          ;Effectively the same as BRA
00001CEE  4EF9 00001CF4           1489          JMP BSR_EA
00001CF4                          1490  
00001CF4                          1491  BSR_EA
00001CF4                          1492          ;Its some form of move 7
00001CF4  3A3C 0007               1493          MOVE #7, D5
00001CF8  4286                    1494          CLR.L D6
00001CFA                          1495      
00001CFA  3E00                    1496          MOVE D0, D7
00001CFC  0247 00FF               1497          ANDI #255, D7
00001D00  BE7C 00FF               1498          CMP #$FF, D7
00001D04  6700 000A               1499          BEQ BSR_EA_32
00001D08                          1500  
00001D08  4EB9 00001F12           1501          JSR EA_DECODER
00001D0E                          1502      
00001D0E  4E75                    1503          RTS
00001D10                          1504  
00001D10                          1505  BSR_EA_32
00001D10  3C3C 0001               1506          MOVE #1, D6
00001D14  4E75                    1507          RTS
00001D16                          1508      
00001D16                          1509  DIVU_EA
00001D16                          1510          ;Practically the same as DIVS
00001D16  4EF9 00001D1C           1511          JMP DIVS_EA
00001D1C                          1512  
00001D1C                          1513  DIVS_EA
00001D1C  2A00                    1514          MOVE.L D0, D5
00001D1E  2C00                    1515          MOVE.L D0, D6
00001D20                          1516      
00001D20                          1517          ;and off mode
00001D20  0245 01C0               1518          ANDI #448, D5
00001D24  EC85                    1519          ASR.L #6, D5
00001D26                          1520          ;and off data
00001D26  0246 0E00               1521          ANDI #3584, D6
00001D2A  E086                    1522          ASR.L #8, D6
00001D2C  E286                    1523          ASR.L #1, D6
00001D2E  4EB9 00001F12           1524          JSR EA_DECODER
00001D34                          1525      
00001D34  16FC 002C               1526          MOVE.B #',', (A3)+
00001D38                          1527          ;Reset D5 and D6 just in case.
00001D38  4285                    1528          CLR.L D5
00001D3A  4286                    1529          CLR.L D6
00001D3C                          1530          ;Second argument, set D4
00001D3C  383C 0001               1531          MOVE #1, D4
00001D40                          1532      
00001D40                          1533          ; Grab the other mode
00001D40  2A00                    1534          MOVE.L D0, D5
00001D42  2C00                    1535          MOVE.L D0, D6
00001D44                          1536      
00001D44                          1537          ;and off mode
00001D44  0245 0038               1538          ANDI #56, D5
00001D48  E685                    1539          ASR.L #3, D5
00001D4A                          1540          ;and off data
00001D4A  0246 0007               1541          ANDI #7, D6
00001D4E  4EB9 00001F12           1542          JSR EA_DECODER
00001D54                          1543          
00001D54                          1544          ;Clear D4
00001D54  4284                    1545          CLR.L D4
00001D56                          1546      
00001D56  4E75                    1547          RTS
00001D58                          1548  
00001D58                          1549  SUB_EA
00001D58  2A00                    1550          MOVE.L D0, D5
00001D5A  2C00                    1551          MOVE.L D0, D6
00001D5C                          1552      
00001D5C                          1553          ;and off mode
00001D5C  0245 0038               1554          ANDI #56, D5
00001D60                          1555          ;and off data
00001D60  0246 0007               1556          ANDI #7, D6
00001D64  4EB9 00001F12           1557          JSR EA_DECODER
00001D6A  2C00                    1558          MOVE.L D0, D6
00001D6C                          1559      
00001D6C  16FC 002C               1560          MOVE.B #',', (A3)+
00001D70                          1561          ;Reset D6 just in case.
00001D70  4286                    1562          CLR.L D6
00001D72                          1563          ;Second argument, set D4
00001D72  383C 0001               1564          MOVE #1, D4
00001D76                          1565      
00001D76                          1566          ;sub only works on data registers, so we set mode to data
00001D76  4285                    1567          CLR.L D5
00001D78                          1568          ;and off data
00001D78  0246 0E00               1569          ANDI #3584, D6
00001D7C  E086                    1570          ASR.L #8, D6
00001D7E  E286                    1571          ASR.L #1, D6
00001D80  4EB9 00001F12           1572          JSR EA_DECODER
00001D86                          1573          
00001D86                          1574          ;Clear D4
00001D86  4284                    1575          CLR.L D4
00001D88                          1576  
00001D88  4E75                    1577          RTS
00001D8A                          1578  
00001D8A                          1579  ADDQ_EA
00001D8A                          1580          ;For EA effectively SUBQ
00001D8A  4EF9 00001D90           1581          JMP SUBQ_EA
00001D90                          1582  
00001D90                          1583  SUBQ_EA
00001D90  2A00                    1584          MOVE.L D0, D5
00001D92  2E00                    1585          MOVE.L D0, D7
00001D94                          1586      
00001D94                          1587          ;set mode data
00001D94  4285                    1588          CLR.L D5
00001D96                          1589          ;and off data for data
00001D96  0247 0E00               1590          ANDI #3584, D7
00001D9A  E086                    1591          ASR.L #8, D6
00001D9C  E286                    1592          ASR.L #1, D6
00001D9E  4EB9 00001F12           1593          JSR EA_DECODER
00001DA4                          1594      
00001DA4  16FC 002C               1595          MOVE.B #',', (A3)+
00001DA8                          1596          ;Reset D5 and D6 just in case.
00001DA8  4285                    1597          CLR.L D5
00001DAA  4286                    1598          CLR.L D6
00001DAC                          1599          ;Second argument, set D4
00001DAC  383C 0001               1600          MOVE #1, D4
00001DB0                          1601      
00001DB0  2A00                    1602          MOVE.L D0, D5
00001DB2  2C00                    1603          MOVE.L D0, D6
00001DB4                          1604      
00001DB4                          1605          ;and off mode
00001DB4  0245 0038               1606          ANDI #56, D5
00001DB8  E685                    1607          ASR.L #3, D5
00001DBA                          1608          ;and off data
00001DBA  0246 0007               1609          ANDI #7, D6
00001DBE  4EB9 00001F12           1610          JSR EA_DECODER
00001DC4                          1611          
00001DC4                          1612          ;Clear d4
00001DC4  4284                    1613          CLR.L D4
00001DC6                          1614      
00001DC6  4E75                    1615          RTS
00001DC8                          1616  
00001DC8                          1617  CMP_EA
00001DC8  2A00                    1618          MOVE.L D0, D5
00001DCA  2C00                    1619          MOVE.L D0, D6
00001DCC                          1620      
00001DCC                          1621          ;and off mode
00001DCC  0245 0038               1622          ANDI #56, D5
00001DD0                          1623          ;and off data
00001DD0  0246 0007               1624          ANDI #7, D6
00001DD4  4EB9 00001F12           1625          JSR EA_DECODER
00001DDA                          1626              
00001DDA  16FC 002C               1627          MOVE.B #',', (A3)+
00001DDE                          1628          ;Reset D6 just in case.
00001DDE  4286                    1629          CLR.L D6
00001DE0                          1630          ;Second argument, set D4
00001DE0  383C 0001               1631          MOVE #1, D4
00001DE4                          1632      
00001DE4                          1633          ;Do other part of the EA
00001DE4  2A00                    1634          MOVE.L D0, D5
00001DE6  2C00                    1635          MOVE.L D0, D6
00001DE8                          1636      
00001DE8                          1637          ;set mode to data register
00001DE8  4285                    1638          CLR.L D5
00001DEA                          1639          ;and off data
00001DEA  0246 0E00               1640          ANDI #3584, D6
00001DEE  E086                    1641          ASR.L #8, D6
00001DF0  E286                    1642          ASR.L #1, D6
00001DF2  4EB9 00001F12           1643          JSR EA_DECODER
00001DF8                          1644          
00001DF8                          1645          ;Clear D4
00001DF8  4284                    1646          CLR.L D4
00001DFA                          1647  
00001DFA  4E75                    1648          RTS
00001DFC                          1649  
00001DFC                          1650  MULS_EA
00001DFC                          1651      ;Same as MULU
00001DFC  4EF9 00001E02           1652      JMP MULU_EA
00001E02                          1653  
00001E02                          1654  MULU_EA
00001E02  2A00                    1655          MOVE.L D0, D5
00001E04  2E00                    1656          MOVE.L D0, D7
00001E06                          1657      
00001E06                          1658          ;Get mode
00001E06  0245 0038               1659          ANDI #56, D5
00001E0A  E685                    1660          ASR.L #3, D5
00001E0C                          1661          ;and off data
00001E0C  0246 0007               1662          ANDI #7, D6
00001E10  4EB9 00001F12           1663          JSR EA_DECODER
00001E16                          1664     
00001E16  16FC 002C               1665          MOVE.B #',', (A3)+
00001E1A                          1666          ;Reset D6 just in case.
00001E1A  4286                    1667          CLR.L D6
00001E1C                          1668          ;Second argument, set D4
00001E1C  383C 0001               1669          MOVE #1, D4
00001E20                          1670      
00001E20  2A00                    1671          MOVE.L D0, D5
00001E22  2C00                    1672          MOVE.L D0, D6
00001E24                          1673      
00001E24                          1674          ;set mode data register
00001E24  4285                    1675          CLR.L D5
00001E26                          1676          ;and off data for immediate
00001E26  0247 0E00               1677          ANDI #3584, D7
00001E2A  E086                    1678          ASR.L #8, D6
00001E2C  E286                    1679          ASR.L #1, D6
00001E2E  4EB9 00001F12           1680          JSR EA_DECODER
00001E34                          1681      
00001E34  2A00                    1682          MOVE.L D0, D5
00001E36  2C00                    1683          MOVE.L D0, D6
00001E38                          1684          
00001E38                          1685          ;Clear D
00001E38  4284                    1686          CLR.L D4
00001E3A                          1687          
00001E3A  4E75                    1688          RTS
00001E3C                          1689          
00001E3C                          1690  ADD_EA
00001E3C                          1691          ;Effective the same as ADD
00001E3C  4EF9 00001E42           1692          JMP ADDA_EA
00001E42                          1693  
00001E42                          1694  ADDA_EA
00001E42  2A00                    1695          MOVE.L D0, D5
00001E44  2C00                    1696          MOVE.L D0, D6
00001E46                          1697      
00001E46                          1698          ;and off mode
00001E46  0245 0038               1699          ANDI #56, D5
00001E4A  E685                    1700          ASR.L #3, D5
00001E4C                          1701          ;and off data
00001E4C  0246 0007               1702          ANDI #7, D6
00001E50  4EB9 00001F12           1703          JSR EA_DECODER
00001E56                          1704      
00001E56  16FC 002C               1705          MOVE.B #',', (A3)+
00001E5A                          1706          ;Reset D5 and D6 just in case.
00001E5A  4285                    1707          CLR.L D5
00001E5C  4286                    1708          CLR.L D6
00001E5E                          1709          ;Second argument, set D4
00001E5E  383C 0001               1710          MOVE #1, D4
00001E62                          1711      
00001E62                          1712          ; Grab the other mode
00001E62  2A00                    1713          MOVE.L D0, D5
00001E64  2C00                    1714          MOVE.L D0, D6
00001E66                          1715          
00001E66                          1716          ;and off mode
00001E66  0245 01C0               1717          ANDI #448, D5
00001E6A  E085                    1718          ASR.L #8, D5
00001E6C                          1719          ;and off data
00001E6C  0246 0E00               1720          ANDI #3584, D6
00001E70  E086                    1721          ASR.L #8, D6
00001E72  E286                    1722          ASR.L #1, D6
00001E74  4EB9 00001F12           1723          JSR EA_DECODER
00001E7A                          1724          
00001E7A                          1725          ;Clear D4
00001E7A  4284                    1726          CLR.L D4
00001E7C                          1727      
00001E7C  4E75                    1728          RTS
00001E7E                          1729  
00001E7E                          1730  ASL_EA
00001E7E                          1731          ;Practically the same as ASR
00001E7E  4EF9 00001E84           1732          JMP ASR_EA
00001E84                          1733  
00001E84                          1734  ASR_EA
00001E84                          1735          ;Check bit 5 to see if its a register or count.
00001E84  3A00                    1736          MOVE D0, D5
00001E86  0245 0020               1737          ANDI #32, D5
00001E8A  EA85                    1738          ASR.L #5, D5
00001E8C  BA7C 0000               1739          CMP #0, D5
00001E90  6700 000C               1740          BEQ ASR_EA_NUM
00001E94  BA7C 0001               1741          CMP #1, D5
00001E98  6700 003E               1742          BEQ ASR_EA_REG
00001E9C                          1743      
00001E9C                          1744          ;Error-handling return
00001E9C  4E75                    1745          RTS
00001E9E                          1746      
00001E9E                          1747  ASR_EA_NUM
00001E9E                          1748          ;Set to immediate data;
00001E9E  3A3C 0007               1749          MOVE #7, D5
00001EA2                          1750          ;Get the immediate data.
00001EA2  3E00                    1751          MOVE D0, D7
00001EA4  0247 0E00               1752          ANDI #3584, D7
00001EA8  E087                    1753          ASR.L #8, D7
00001EAA  E287                    1754          ASR.L #1, D7
00001EAC  BE7C 0000               1755          CMP #0, D7
00001EB0  6600 0004               1756          BNE ASR_EA_NUM_1
00001EB4                          1757          
00001EB4  7E08                    1758          MOVE.L #8, D7
00001EB6                          1759          
00001EB6                          1760  ASR_EA_NUM_1        
00001EB6  4EB9 00001F06           1761          JSR EA_PRINT_IMMEDIATE_NUMBER
00001EBC                          1762      
00001EBC  16FC 002C               1763          MOVE.B #',', (A3)+
00001EC0                          1764          ;Reset D6 just in case.
00001EC0  4286                    1765          CLR.L D6
00001EC2                          1766          ;Second argument, set D4
00001EC2  383C 0001               1767          MOVE #1, D4
00001EC6                          1768      
00001EC6                          1769          ;Set to data register
00001EC6  4285                    1770          CLR.L D5
00001EC8  3C00                    1771          MOVE D0, D6
00001ECA  CC7C 0007               1772          AND #7, D6
00001ECE  4EB9 00001F12           1773          JSR EA_DECODER
00001ED4                          1774  
00001ED4                          1775          ;clear D4
00001ED4  4284                    1776          CLR.L D4
00001ED6                          1777          
00001ED6  4E75                    1778          RTS    
00001ED8                          1779  
00001ED8                          1780  ASR_EA_REG
00001ED8                          1781          ;Set to data register
00001ED8  4285                    1782          CLR.L D5
00001EDA  3C00                    1783          MOVE D0, D6
00001EDC  CC7C 0E00               1784          AND #3584, D6
00001EE0  E086                    1785          ASR.L #8, D6
00001EE2  E286                    1786          ASR.L #1, D6
00001EE4  4EB9 00001F12           1787          JSR EA_DECODER  
00001EEA                          1788      
00001EEA  16FC 002C               1789          MOVE.B #',', (A3)+
00001EEE                          1790          ;Reset D6 just in case.
00001EEE  4286                    1791          CLR.L D6
00001EF0                          1792          ;Second argument, set D4
00001EF0  383C 0001               1793          MOVE #1, D4
00001EF4                          1794      
00001EF4                          1795          ;Set to data register
00001EF4  4285                    1796          CLR.L D5
00001EF6  3C00                    1797          MOVE D0, D6
00001EF8  CC7C 0007               1798          AND #7, D6
00001EFC  4EB9 00001F12           1799          JSR EA_DECODER    
00001F02                          1800          
00001F02                          1801          ;Clear D4
00001F02  4284                    1802          CLR.L D4
00001F04                          1803          
00001F04  4E75                    1804          RTS
00001F06                          1805  
00001F06                          1806  ;For the instructions that have a immediate number in the instruction itself, not in a following word/long
00001F06                          1807  EA_PRINT_IMMEDIATE_NUMBER
00001F06  16FC 0023               1808      MOVE.B #'#', (A3)+
Line 1809 ERROR: Undefined symbol
00001F0A  4EB9 004DBD16           1809      JSR IOTA
00001F10  4E75                    1810      RTS
00001F12                          1811  
00001F12                          1812  
00001F12                          1813  EA_DECODER:
00001F12                          1814          ;Add space.
00001F12  16FC 0020               1815          MOVE.B #' ', (A3)+
00001F16                          1816          ;Jump to the Mode given.
00001F16  41F9 00001F24           1817          LEA EAJUMPTABLE, A0
00001F1C  CAFC 0006               1818          MULU #6, D5
00001F20  4EF0 5000               1819          JMP 0(A0,D5)
00001F24                          1820          
00001F24                          1821      ;   This is a jump table that will jump to certain sub-functions based on what the mode is.
00001F24                          1822  EAJUMPTABLE
00001F24  4EF9 00001F54           1823          JMP MODE0       
00001F2A  4EF9 00001F96           1824          JMP MODE1      
00001F30  4EF9 00001FD8           1825          JMP MODE2       
00001F36  4EF9 00002022           1826          JMP MODE3       
00001F3C  4EF9 00002070           1827          JMP MODE4       
00001F42  4EF9 000020BE           1828          JMP MODE5       
00001F48  4EF9 000020C0           1829          JMP MODE6       
00001F4E  4EF9 000020C2           1830          JMP MODE7      
00001F54                          1831      
00001F54                          1832  MODE0      
00001F54                          1833          ; Figure the  that relate to it op codes 
00001F54                          1834          
00001F54  BC7C 0000               1835          CMP #0, D6
00001F58  6700 0234               1836          BEQ APPEND_D0
00001F5C                          1837      
00001F5C  BC7C 0001               1838          CMP #1, D6
00001F60  6700 0236               1839          BEQ APPEND_D1
00001F64                          1840      
00001F64  BC7C 0002               1841          CMP #2, D6
00001F68  6700 0238               1842          BEQ APPEND_D2
00001F6C                          1843      
00001F6C  BC7C 0003               1844          CMP #3, D6
00001F70  6700 023A               1845          BEQ APPEND_D3
00001F74                          1846      
00001F74  BC7C 0004               1847          CMP #4, D6
00001F78  6700 023C               1848          BEQ APPEND_D4
00001F7C                          1849          
00001F7C  BC7C 0005               1850          CMP #5, D6
00001F80  6700 023E               1851          BEQ APPEND_D5
00001F84                          1852      
00001F84  BC7C 0006               1853          CMP #6, D6
00001F88  6700 0240               1854          BEQ APPEND_D6
00001F8C                          1855      
00001F8C  BC7C 0007               1856          CMP #7, D6
00001F90  6700 0242               1857          BEQ APPEND_D7
00001F94                          1858      
00001F94                          1859          ;Return
00001F94  4E75                    1860          RTS
00001F96                          1861  
00001F96                          1862  MODE1
00001F96  BC7C 0000               1863          CMP #0, D6
00001F9A  6700 0242               1864          BEQ APPEND_A0
00001F9E                          1865      
00001F9E  BC7C 0001               1866          CMP #1, D6
00001FA2  6700 0244               1867          BEQ APPEND_A1
00001FA6                          1868      
00001FA6  BC7C 0002               1869          CMP #2, D6
00001FAA  6700 0246               1870          BEQ APPEND_A2
00001FAE                          1871      
00001FAE  BC7C 0003               1872          CMP #3, D6
00001FB2  6700 0248               1873          BEQ APPEND_A3
00001FB6                          1874      
00001FB6  BC7C 0004               1875          CMP #4, D6
00001FBA  6700 024A               1876          BEQ APPEND_A4
00001FBE                          1877      
00001FBE  BC7C 0005               1878          CMP #5, D6
00001FC2  6700 024C               1879          BEQ APPEND_A5
00001FC6                          1880      
00001FC6  BC7C 0006               1881          CMP #6, D6
00001FCA  6700 024E               1882          BEQ APPEND_A6
00001FCE                          1883      
00001FCE  BC7C 0007               1884          CMP #7, D6
00001FD2  6700 0250               1885          BEQ APPEND_A7
00001FD6                          1886      
00001FD6                          1887          ;Return
00001FD6  4E75                    1888          RTS
00001FD8                          1889  
00001FD8                          1890  MODE2
00001FD8  16FC 0028               1891          MOVE.B #'(', (A3)+
00001FDC                          1892  
00001FDC  BC7C 0000               1893          CMP #0, D6
00001FE0  6700 01FC               1894          BEQ APPEND_A0
00001FE4                          1895      
00001FE4  BC7C 0001               1896          CMP #1, D6
00001FE8  6700 01FE               1897          BEQ APPEND_A1
00001FEC                          1898      
00001FEC  BC7C 0002               1899          CMP #2, D6
00001FF0  6700 0200               1900          BEQ APPEND_A2
00001FF4                          1901      
00001FF4  BC7C 0003               1902          CMP #3, D6
00001FF8  6700 0202               1903          BEQ APPEND_A3
00001FFC                          1904      
00001FFC  BC7C 0004               1905          CMP #4, D6
00002000  6700 0204               1906          BEQ APPEND_A4
00002004                          1907      
00002004  BC7C 0005               1908          CMP #5, D6
00002008  6700 0206               1909          BEQ APPEND_A5
0000200C                          1910      
0000200C  BC7C 0006               1911          CMP #6, D6
00002010  6700 0208               1912          BEQ APPEND_A6
00002014                          1913      
00002014  BC7C 0007               1914          CMP #7, D6
00002018  6700 020A               1915          BEQ APPEND_A7
0000201C                          1916          
0000201C  16FC 0029               1917          MOVE.B #')', (A3)+
00002020                          1918      
00002020                          1919          ;Return
00002020  4E75                    1920          RTS
00002022                          1921  
00002022                          1922  MODE3
00002022  16FC 0028               1923          MOVE.B #'(', (A3)+
00002026                          1924  
00002026  BC7C 0000               1925          CMP #0, D6
0000202A  6700 01B2               1926          BEQ APPEND_A0
0000202E                          1927      
0000202E  BC7C 0001               1928          CMP #1, D6
00002032  6700 01B4               1929          BEQ APPEND_A1
00002036                          1930      
00002036  BC7C 0002               1931          CMP #2, D6
0000203A  6700 01B6               1932          BEQ APPEND_A2
0000203E                          1933      
0000203E  BC7C 0003               1934          CMP #3, D6
00002042  6700 01B8               1935          BEQ APPEND_A3
00002046                          1936      
00002046  BC7C 0004               1937          CMP #4, D6
0000204A  6700 01BA               1938          BEQ APPEND_A4
0000204E                          1939      
0000204E  BC7C 0005               1940          CMP #5, D6
00002052  6700 01BC               1941          BEQ APPEND_A5
00002056                          1942      
00002056  BC7C 0006               1943          CMP #6, D6
0000205A  6700 01BE               1944          BEQ APPEND_A6
0000205E                          1945      
0000205E  BC7C 0007               1946          CMP #7, D6
00002062  6700 01C0               1947          BEQ APPEND_A7
00002066                          1948      
00002066  16FC 0029               1949          MOVE.B #')', (A3)+
0000206A  16FC 002B               1950          MOVE.B #'+', (A3)+
0000206E                          1951      
0000206E                          1952          ;Return
0000206E  4E75                    1953          RTS
00002070                          1954  
00002070                          1955  MODE4
00002070  16FC 002D               1956          MOVE.B #'-', (A3)+
00002074  16FC 0028               1957          MOVE.B #'(', (A3)+
00002078                          1958  
00002078  BC7C 0000               1959          CMP #0, D6
0000207C  6700 0160               1960          BEQ APPEND_A0
00002080                          1961      
00002080  BC7C 0001               1962          CMP #1, D6
00002084  6700 0162               1963          BEQ APPEND_A1
00002088                          1964      
00002088  BC7C 0002               1965          CMP #2, D6
0000208C  6700 0164               1966          BEQ APPEND_A2
00002090                          1967      
00002090  BC7C 0003               1968          CMP #3, D6
00002094  6700 0166               1969          BEQ APPEND_A3
00002098                          1970      
00002098  BC7C 0004               1971          CMP #4, D6
0000209C  6700 0168               1972          BEQ APPEND_A4
000020A0                          1973      
000020A0  BC7C 0005               1974          CMP #5, D6
000020A4  6700 016A               1975          BEQ APPEND_A5
000020A8                          1976      
000020A8  BC7C 0006               1977          CMP #6, D6
000020AC  6700 016C               1978          BEQ APPEND_A6
000020B0                          1979      
000020B0  BC7C 0007               1980          CMP #7, D6
000020B4  6700 016E               1981          BEQ APPEND_A7
000020B8                          1982      
000020B8  16FC 0029               1983          MOVE.B #')', (A3)+
000020BC                          1984      
000020BC                          1985          ;Return
000020BC  4E75                    1986          RTS
000020BE                          1987  
000020BE                          1988  MODE5
000020BE                          1989          ;Error-handling mode.
000020BE  4E75                    1990          RTS
000020C0                          1991      
000020C0                          1992  MODE6
000020C0                          1993          ;Error-handling mode.
000020C0  4E75                    1994          RTS
000020C2                          1995      
000020C2                          1996  MODE7
000020C2  4287                    1997          CLR.L D7
000020C4  BC7C 0000               1998          CMP #0, D6
000020C8  6700 0014               1999          BEQ MODE_7_SHORT
000020CC                          2000      
000020CC  BC7C 0001               2001          CMP #1, D6
000020D0  6700 003E               2002          BEQ MODE_7_LONG
000020D4                          2003      
000020D4  BC7C 0004               2004          CMP #4, D6
000020D8  6700 0068               2005          BEQ MODE_7_IMM_WORD
000020DC                          2006      
000020DC  4E75                    2007          RTS
000020DE                          2008          
000020DE                          2009  ;MODE 7 WHEN IT IS WORD
000020DE                          2010  ;======================
000020DE                          2011  MODE_7_SHORT
000020DE  B87C 0000               2012          CMP #0, D4
000020E2  6700 0006               2013          BEQ MODE_7_SHORT_1
000020E6                          2014          
000020E6  16FC 0028               2015          MOVE.B #'(', (A3)+
000020EA                          2016  
000020EA                          2017  MODE_7_SHORT_1
000020EA  16FC 0024               2018          MOVE.B #'$', (A3)+
000020EE  3E1D                    2019          MOVE.W (A5)+, D7
000020F0  363C 0004               2020          MOVE #4, D3
000020F4  4EB9 0000222E           2021          JSR ITOA
000020FA                          2022      
000020FA  B87C 0000               2023          CMP #0, D4
000020FE  6700 000E               2024          BEQ MODE_7_SHORT_2
00002102                          2025          
00002102  16FC 0029               2026          MOVE.B #')', (A3)+
00002106  16FC 002E               2027          MOVE.B #'.', (A3)+
0000210A  16FC 0057               2028          MOVE.B #'W', (A3)+
0000210E                          2029  MODE_7_SHORT_2        
0000210E  4E75                    2030          RTS
00002110                          2031  
00002110                          2032  ;MODE 7 WHEN IT IS LONG
00002110                          2033  ;======================    
00002110                          2034  MODE_7_LONG
00002110  B87C 0000               2035          CMP #0, D4
00002114  6700 0006               2036          BEQ MODE_7_LONG_1
00002118                          2037          
00002118  16FC 0028               2038          MOVE.B #'(', (A3)+
0000211C                          2039  
0000211C                          2040  MODE_7_LONG_1
0000211C  16FC 0024               2041          MOVE.B #'$', (A3)+
00002120  2E1D                    2042          MOVE.L (A5)+, D7
00002122  363C 0008               2043          MOVE #8, D3
00002126  4EB9 0000222E           2044          JSR ITOA
0000212C                          2045          
0000212C  B87C 0000               2046          CMP #0, D4
00002130  6700 000E               2047          BEQ MODE_7_LONG_2
00002134                          2048          
00002134  16FC 0029               2049          MOVE.B #')', (A3)+
00002138  16FC 002E               2050          MOVE.B #'.', (A3)+
0000213C  16FC 004C               2051          MOVE.B #'L', (A3)+
00002140                          2052  MODE_7_LONG_2  
00002140  4E75                    2053          RTS
00002142                          2054  
00002142                          2055  ;MODE 7 WHEN IT IS IMMEDIATE WORD
00002142                          2056  ;================================
00002142                          2057  MODE_7_IMM_WORD
00002142                          2058          ;Immediate data can't be written to.
00002142  B87C 0001               2059          CMP #1, D4
00002146  6700 00E6               2060          BEQ DATA_ERROR
0000214A                          2061       
0000214A                          2062          ;If the instruction is a long, we belong in next operation.
0000214A  B67C 0004               2063          CMP #4, D3
0000214E  6700 0018               2064          BEQ MODE_7_IMM_LONG   
00002152                          2065       
00002152  16FC 0023               2066          MOVE.B #'#',(A3)+
00002156  16FC 0024               2067          MOVE.B #'$',(A3)+
0000215A  3E1D                    2068          MOVE.W (A5)+, D7
0000215C  363C 0004               2069          MOVE #4, D3
00002160  4EB9 0000222E           2070          JSR ITOA
00002166                          2071          
00002166  4E75                    2072          RTS
00002168                          2073  
00002168                          2074  ;MODE 7 WHEN IT IS IMMEDIATE LONG
00002168                          2075  ;================================
00002168                          2076  MODE_7_IMM_LONG
00002168  16FC 0023               2077          MOVE.B #'#',(A3)+
0000216C  16FC 0024               2078          MOVE.B #'$',(A3)+
00002170  2E1D                    2079          MOVE.L (A5)+, D7
00002172  363C 0008               2080          MOVE #8, D3
00002176  4EB9 0000222E           2081          JSR ITOA
0000217C                          2082          
0000217C  4E75                    2083          RTS
0000217E                          2084  
0000217E                          2085  MODE_7_2NDARG_START
0000217E  16FC 0028               2086      MOVE.B #'(', (A3)+
00002182  4E75                    2087      RTS
00002184                          2088  
00002184                          2089  MODE_7_2NDARG_END
00002184  16FC 0029               2090      MOVE.B #')', (A3)+
00002188  16FC 002E               2091      MOVE.B #'.', (A3)+
0000218C  4E75                    2092      RTS
0000218E                          2093  
0000218E                          2094  APPEND_D0
0000218E  16FC 0044               2095          MOVE.B  #'D', (A3)+
00002192  16FC 0030               2096          MOVE.B  #'0', (A3)+
00002196  4E75                    2097          RTS
00002198                          2098  
00002198                          2099  APPEND_D1
00002198  16FC 0044               2100          MOVE.B  #'D', (A3)+
0000219C  16FC 0031               2101          MOVE.B  #'1', (A3)+
000021A0  4E75                    2102          RTS
000021A2                          2103  
000021A2                          2104  APPEND_D2
000021A2  16FC 0044               2105          MOVE.B  #'D', (A3)+
000021A6  16FC 0032               2106          MOVE.B  #'2', (A3)+
000021AA  4E75                    2107          RTS
000021AC                          2108  
000021AC                          2109  APPEND_D3
000021AC  16FC 0044               2110          MOVE.B  #'D', (A3)+
000021B0  16FC 0033               2111          MOVE.B  #'3', (A3)+
000021B4  4E75                    2112          RTS
000021B6                          2113  
000021B6                          2114  APPEND_D4
000021B6  16FC 0044               2115          MOVE.B  #'D', (A3)+
000021BA  16FC 0034               2116          MOVE.B  #'4', (A3)+
000021BE  4E75                    2117          RTS
000021C0                          2118  
000021C0                          2119  APPEND_D5
000021C0  16FC 0044               2120          MOVE.B  #'D', (A3)+
000021C4  16FC 0035               2121          MOVE.B  #'5', (A3)+
000021C8  4E75                    2122          RTS
000021CA                          2123  
000021CA                          2124  APPEND_D6
000021CA  16FC 0044               2125          MOVE.B  #'D', (A3)+
000021CE  16FC 0036               2126          MOVE.B  #'6', (A3)+
000021D2  4E75                    2127          RTS
000021D4                          2128  
000021D4                          2129  APPEND_D7
000021D4  16FC 0044               2130          MOVE.B  #'D', (A3)+
000021D8  16FC 0037               2131          MOVE.B  #'7', (A3)+
000021DC  4E75                    2132          RTS
000021DE                          2133      
000021DE                          2134  APPEND_A0
000021DE  16FC 0041               2135          MOVE.B  #'A', (A3)+
000021E2  16FC 0030               2136          MOVE.B  #'0', (A3)+
000021E6  4E75                    2137          RTS
000021E8                          2138  
000021E8                          2139  APPEND_A1
000021E8  16FC 0041               2140          MOVE.B  #'A', (A3)+
000021EC  16FC 0031               2141          MOVE.B  #'1', (A3)+
000021F0  4E75                    2142          RTS
000021F2                          2143  
000021F2                          2144  APPEND_A2
000021F2  16FC 0041               2145          MOVE.B  #'A', (A3)+
000021F6  16FC 0032               2146          MOVE.B  #'2', (A3)+
000021FA  4E75                    2147          RTS
000021FC                          2148  
000021FC                          2149  APPEND_A3
000021FC  16FC 0041               2150          MOVE.B  #'A', (A3)+
00002200  16FC 0033               2151          MOVE.B  #'3', (A3)+
00002204  4E75                    2152          RTS
00002206                          2153  
00002206                          2154  APPEND_A4
00002206  16FC 0041               2155          MOVE.B  #'A', (A3)+
0000220A  16FC 0034               2156          MOVE.B  #'4', (A3)+
0000220E  4E75                    2157          RTS
00002210                          2158  
00002210                          2159  APPEND_A5
00002210  16FC 0041               2160          MOVE.B  #'A', (A3)+
00002214  16FC 0035               2161          MOVE.B  #'5', (A3)+
00002218  4E75                    2162          RTS
0000221A                          2163  
0000221A                          2164  APPEND_A6
0000221A  16FC 0041               2165          MOVE.B  #'A', (A3)+
0000221E  16FC 0036               2166          MOVE.B  #'6', (A3)+
00002222  4E75                    2167          RTS
00002224                          2168      
00002224                          2169  APPEND_A7
00002224  16FC 0041               2170          MOVE.B  #'A', (A3)+
00002228  16FC 0037               2171          MOVE.B  #'7', (A3)+
0000222C  4E75                    2172          RTS
0000222E                          2173  
0000222E                          2174          
0000222E                          2175  ; -------------------------------------------------------------
0000222E                          2176  ;   ERROR when Data has incorrect Addressing MODE
0000222E                          2177  ; -------------------------------------------------------------          
0000222E                          2178  DATA_ERROR:      
0000222E                          2179          
0000222E                          2180  
0000222E                          2181   
0000222E                          2182  *-------------------------------------------------------------------        
0000222E                          2183      * ITOA CONVERT for IMMEDIATE DATA
0000222E                          2184      ;Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
0000222E                          2185      *D3 = # of ITOA Loop ITERATION
0000222E                          2186      *D7 = immediate address 
0000222E                          2187      *D6 = LSR Moving count
0000222E                          2188      *D0 = Data that is shifted
0000222E                          2189  *-------------------------------------------------------------------   
0000222E                          2190  ITOA:                       ; Converts hex string into int 
0000222E                          2191          ; D7 has the immediate address
0000222E  2F00                    2192          MOVE.L D0, -(SP)  
00002230  4EB9 0000223A           2193          JSR     ITOA_LOOP
00002236  201F                    2194          MOVE.L (SP)+, D0
00002238  4E75                    2195          RTS
0000223A                          2196          
0000223A                          2197  ITOA_LOOP:
0000223A  4280                    2198          CLR.L   D0 
0000223C  4281                    2199          CLR.L   D1
0000223E                          2200          
0000223E  5303                    2201          SUB.B   #1, D3  
00002240  2007                    2202          MOVE.L  D7, D0
00002242  1203                    2203          MOVE.B  D3, D1
00002244                          2204  
00002244  C2FC 0004               2205          MULU    #4, D1      ; The amount that we shift 
00002248  E2A8                    2206          LSR.L   D1, D0       ; Shift D0 with iteration Loop * 4
0000224A                          2207          
0000224A  0280 0000000F           2208          ANDI.L  #$F, D0          ; Last 4 bits in hex 
00002250                          2209          
00002250                          2210          ; Convert Hex into ASCII 
00002250  4EB9 0000226A           2211          JSR     ITOA_CONVERT
00002256                          2212          
00002256                          2213          ; ADD to A3 Counter 
00002256  4EB9 0000227E           2214          JSR     ITOA_ADD_CHAR                  
0000225C                          2215          ; Checks if counter is empty, ITOA is completed 
0000225C  B63C 0000               2216          CMP.B   #0,D3
00002260  6700 0006               2217          BEQ     ITOA_DONE
00002264                          2218          
00002264  4EF8 223A               2219          JMP     ITOA_LOOP   ; Continue Reading more bits from immediate data         
00002268                          2220                         
00002268                          2221  ITOA_DONE:          
00002268  4E75                    2222          RTS         ; Returns back to last JSR 
0000226A                          2223  
0000226A                          2224  ITOA_CONVERT: 
0000226A  B03C 0009               2225          CMP.B       #9,D0
0000226E  6300 0008               2226          BLS         ITOA_CONVERT_N
00002272                          2227          
00002272  0640 0037               2228          ADDI.W      #$37, D0
00002276  4E75                    2229          RTS 
00002278                          2230          
00002278                          2231  ITOA_CONVERT_N
00002278  0640 0030               2232          ADDI.W     #$30,D0
0000227C  4E75                    2233          RTS
0000227E                          2234          
0000227E                          2235  ITOA_ADD_CHAR: 
0000227E  B03C 0030               2236          CMP.B   #$30, D0
00002282  6700 007A               2237          BEQ     CHAR_0
00002286                          2238          
00002286  B03C 0031               2239          CMP.B   #$31, D0
0000228A  6700 007C               2240          BEQ     CHAR_1
0000228E                          2241          
0000228E  B03C 0032               2242          CMP.B   #$32, D0
00002292  6700 007E               2243          BEQ     CHAR_2
00002296                          2244          
00002296  B03C 0033               2245          CMP.B   #$33, D0
0000229A  6700 0080               2246          BEQ     CHAR_3
0000229E                          2247          
0000229E  B03C 0034               2248          CMP.B   #$34, D0
000022A2  6700 0082               2249          BEQ     CHAR_4
000022A6                          2250          
000022A6  B03C 0035               2251          CMP.B   #$35, D0
000022AA  6700 0084               2252          BEQ     CHAR_5
000022AE                          2253          
000022AE  B03C 0036               2254          CMP.B   #$36, D0
000022B2  6700 0086               2255          BEQ     CHAR_6
000022B6                          2256          
000022B6  B03C 0037               2257          CMP.B   #$37, D0
000022BA  6700 0088               2258          BEQ     CHAR_7
000022BE                          2259          
000022BE  B03C 0038               2260          CMP.B   #$38, D0
000022C2  6700 008A               2261          BEQ     CHAR_8
000022C6                          2262          
000022C6  B03C 0039               2263          CMP.B   #$39, D0
000022CA  6700 008C               2264          BEQ     CHAR_9
000022CE                          2265          
000022CE  B03C 0041               2266          CMP.B   #$41, D0
000022D2  6700 008E               2267          BEQ     CHAR_A
000022D6                          2268          
000022D6  B03C 0042               2269          CMP.B   #$42, D0
000022DA  6700 0090               2270          BEQ     CHAR_B        
000022DE                          2271          
000022DE  B03C 0043               2272          CMP.B   #$43, D0
000022E2  6700 0092               2273          BEQ     CHAR_C
000022E6                          2274          
000022E6  B03C 0044               2275          CMP.B   #$44, D0
000022EA  6700 0094               2276          BEQ     CHAR_D
000022EE                          2277          
000022EE  B03C 0045               2278          CMP.B   #$45, D0
000022F2  6700 0096               2279          BEQ     CHAR_E
000022F6                          2280          
000022F6  B03C 0046               2281          CMP.B   #$46, D0
000022FA  6700 0098               2282          BEQ     CHAR_F  
000022FE                          2283          
000022FE                          2284  CHAR_0:
000022FE  16FC 0030               2285          MOVE.B  #'0', (A3)+ 
00002302  4EF9 0000239E           2286          JMP     ITOA_ADD_CHAR_DONE        
00002308                          2287  CHAR_1:
00002308  16FC 0031               2288          MOVE.B  #'1', (A3)+ 
0000230C  4EF9 0000239E           2289          JMP     ITOA_ADD_CHAR_DONE
00002312                          2290  CHAR_2:
00002312  16FC 0032               2291          MOVE.B  #'2', (A3)+ 
00002316  4EF9 0000239E           2292          JMP     ITOA_ADD_CHAR_DONE
0000231C                          2293  CHAR_3:
0000231C  16FC 0033               2294          MOVE.B  #'3', (A3)+ 
00002320  4EF9 0000239E           2295          JMP     ITOA_ADD_CHAR_DONE
00002326                          2296  CHAR_4:
00002326  16FC 0034               2297          MOVE.B  #'4', (A3)+ 
0000232A  4EF9 0000239E           2298          JMP     ITOA_ADD_CHAR_DONE
00002330                          2299  CHAR_5:
00002330  16FC 0035               2300          MOVE.B  #'5', (A3)+ 
00002334  4EF9 0000239E           2301          JMP     ITOA_ADD_CHAR_DONE
0000233A                          2302  CHAR_6:
0000233A  16FC 0036               2303          MOVE.B  #'6', (A3)+ 
0000233E  4EF9 0000239E           2304          JMP     ITOA_ADD_CHAR_DONE
00002344                          2305  CHAR_7:
00002344  16FC 0037               2306          MOVE.B  #'7', (A3)+ 
00002348  4EF9 0000239E           2307          JMP     ITOA_ADD_CHAR_DONE
0000234E                          2308  CHAR_8:
0000234E  16FC 0038               2309          MOVE.B  #'8', (A3)+ 
00002352  4EF9 0000239E           2310          JMP     ITOA_ADD_CHAR_DONE
00002358                          2311  CHAR_9:
00002358  16FC 0039               2312          MOVE.B  #'9', (A3)+ 
0000235C  4EF9 0000239E           2313          JMP     ITOA_ADD_CHAR_DONE
00002362                          2314  CHAR_A:
00002362  16FC 0041               2315          MOVE.B  #'A', (A3)+ 
00002366  4EF9 0000239E           2316          JMP     ITOA_ADD_CHAR_DONE
0000236C                          2317  CHAR_B:
0000236C  16FC 0042               2318          MOVE.B  #'B', (A3)+ 
00002370  4EF9 0000239E           2319          JMP     ITOA_ADD_CHAR_DONE
00002376                          2320  CHAR_C:
00002376  16FC 0043               2321          MOVE.B  #'C', (A3)+ 
0000237A  4EF9 0000239E           2322          JMP     ITOA_ADD_CHAR_DONE
00002380                          2323  CHAR_D:
00002380  16FC 0044               2324          MOVE.B  #'D', (A3)+ 
00002384  4EF9 0000239E           2325          JMP     ITOA_ADD_CHAR_DONE
0000238A                          2326  CHAR_E:
0000238A  16FC 0045               2327          MOVE.B  #'E', (A3)+ 
0000238E  4EF9 0000239E           2328          JMP     ITOA_ADD_CHAR_DONE
00002394                          2329  CHAR_F:
00002394  16FC 0046               2330          MOVE.B  #'F', (A3)+ 
00002398  4EF9 0000239E           2331          JMP     ITOA_ADD_CHAR_DONE
0000239E                          2332          
0000239E                          2333  ITOA_ADD_CHAR_DONE:
0000239E  4E75                    2334          RTS                
000023A0                          2335  ; -------------------------------------------------------------
000023A0                          2336  ;   Converts User string input into HEX 
000023A0                          2337  ; -------------------------------------------------------------         
000023A0                          2338  ATOI:                       ; Converts hex string into int 
000023A0  4EB9 000023A8           2339          JSR     ATOI_LOOP
000023A6  4E75                    2340          RTS
000023A8                          2341          
000023A8                          2342  ATOI_LOOP: 
000023A8  1219                    2343          MOVE.B  (A1)+, D1
000023AA                          2344          
000023AA                          2345          ; Checks if it is 00/ NULL, Reading is done
000023AA  B23C 0000               2346          CMP.B   #0,D1
000023AE  6700 004C               2347          BEQ     ATOI_DONE
000023B2                          2348          
000023B2  B23C 0030               2349          CMP.B   #$30, D1         ; Error / non valid input
000023B6  6D34                    2350          BLT.B    ATOI_ERROR
000023B8                          2351          
000023B8  B23C 0040               2352          CMP.B   #$40,D1          ; Checks for value in range of num (0 - 9) 
000023BC  6D16                    2353          BLT.B   ATOI_NUM_VALUE
000023BE                          2354          
000023BE  B23C 0041               2355          CMP.B   #$41, D1         ; Error / non valid input
000023C2  6D00 0028               2356          BLT     ATOI_ERROR                
000023C6                          2357          
000023C6  B23C 0047               2358          CMP.B   #$47, D1          
000023CA  6D00 0014               2359          BLT     ATOI_CAP_LETTR_VALUE   ; Checks for value in range of A-F
000023CE                          2360          
000023CE  4EF9 000023EC           2361          JMP     ATOI_ERROR      ;Error if it reaches all the way to the end
000023D4                          2362                  
000023D4                          2363  ATOI_NUM_VALUE: 
000023D4  E98B                    2364          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000023D6  0401 0030               2365          SUBI.B  #$30, D1        ; ASCI Value subtracts 30 
000023DA  D681                    2366          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000023DC  4EF8 23A8               2367          JMP     ATOI_LOOP
000023E0                          2368          
000023E0                          2369  
000023E0                          2370  ATOI_CAP_LETTR_VALUE: 
000023E0  E98B                    2371          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000023E2  0401 0037               2372          SUBI.B  #$37, D1        ; ASCI Value subtracts 30 
000023E6  D681                    2373          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000023E8  4EF8 23A8               2374          JMP     ATOI_LOOP
000023EC                          2375                  
000023EC                          2376  ATOI_ERROR: 
000023EC  43F9 000024CA           2377          LEA     ATOI_MESS_ERROR, A1
000023F2  103C 000E               2378          MOVE.B  #task14,D0
000023F6  4E4F                    2379          TRAP    #15           Display  Error Message
000023F8  4EF8 1012               2380          JMP     USER_INPUT
000023FC                          2381          
000023FC                          2382  ATOI_DONE: 
000023FC  4E75                    2383          RTS
000023FE                          2384         
000023FE                          2385  ERROR_START_ADDR:   
000023FE  43F9 000024FD           2386          LEA     START_ADDR_ERROR , A1
00002404  103C 000E               2387          MOVE.B  #task14,D0
00002408  4E4F                    2388          TRAP    #15           Display  Error Message
0000240A  4EF8 1012               2389          JMP     USER_INPUT
0000240E                          2390          
0000240E                          2391  ERROR_END_ADDR:   
0000240E  43F9 00002528           2392          LEA     END_ADDR_ERROR , A1
00002414  103C 000E               2393          MOVE.B  #task14,D0
00002418  4E4F                    2394          TRAP    #15           Display  Error Message
0000241A  4EF8 1012               2395          JMP     USER_INPUT       
0000241E                          2396                  
0000241E                          2397  DONE:
0000241E  103C 0009               2398          MOVE.B  #9, D0
00002422  4E4F                    2399          TRAP    #15             Halt Simulator   
00002424                          2400          
00002424                          2401  * Put variables and constants here
00002424  =0000000D               2402  CR      EQU     $0D
00002424  =0000000A               2403  LF      EQU     $0A
00002424= 0D 0A 00                2404  BLANK                   DC.B    '',CR,LF,0
00002427= 57 65 6C 63 6F 6D ...   2405  WELCOME_MESS            DC.B    'Welcome to the disassembler program',CR,LF,0
0000244D= 45 6E 74 65 72 20 ...   2406  START_MESS              DC.B    'Enter a start address',CR,LF,0
00002465= 45 6E 74 65 72 20 ...   2407  REPEAT_MESS             DC.B    'Enter Y to disassemble another program, N to quit',CR,LF,0
00002499= 57 72 6F 6E 67 20 ...   2408  INVALID_MESS            DC.B    'Wrong Input, Try again', CR,LF,0
000024B2= 45 6E 74 65 72 20 ...   2409  END_MESS                DC.B    'Enter the end address',CR,LF,0
000024CA= 49 6E 76 61 6C 69 ...   2410  ATOI_MESS_ERROR         DC.B    'Invalid inputs for HEX values, Please try again',CR,LF,LF,0
000024FD= 49 6E 76 61 6C 69 ...   2411  START_ADDR_ERROR        DC.B    'Invalid start address, Please try again',CR,LF,LF,0
00002528= 49 6E 76 61 6C 69 ...   2412  END_ADDR_ERROR          DC.B    'Invalid end address, Please try again',CR,LF,LF,0
00002551                          2413  buffer                  DS.B    bufferSize
00002591= 50 72 65 73 73 20 ...   2414  MAX_SCREEN_OUTPUT       DC.B    'Press enter any key to continue the program',CR,LF,0
000025BF= 45 72 72 6F 72 20 ...   2415  DECODE_OP_ERROR         DC.B    'Error in reading the instruction. Invalid Op code readings', CR, LF,0
000025FC= 55 6E 73 75 70 70 ...   2416  DECODE_OP_UNSUPPORT     DC.B    'Unsupported Op code readings', CR, LF,0
0000261B                          2417          END    START        ; last line of source

1 error detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA             1E42
ADDQ_EA             1D8A
ADD_EA              1E3C
APPEND_A0           21DE
APPEND_A1           21E8
APPEND_A2           21F2
APPEND_A3           21FC
APPEND_A4           2206
APPEND_A5           2210
APPEND_A6           221A
APPEND_A7           2224
APPEND_D0           218E
APPEND_D1           2198
APPEND_D2           21A2
APPEND_D3           21AC
APPEND_D4           21B6
APPEND_D5           21C0
APPEND_D6           21CA
APPEND_D7           21D4
ASL_EA              1E7E
ASR_EA              1E84
ASR_EA_NUM          1E9E
ASR_EA_NUM_1        1EB6
ASR_EA_REG          1ED8
ATOI                23A0
ATOI_CAP_LETTR_VALUE  23E0
ATOI_DONE           23FC
ATOI_ERROR          23EC
ATOI_LOOP           23A8
ATOI_MESS_ERROR     24CA
ATOI_NUM_VALUE      23D4
BLANK               2424
BRA_EA              1CEE
BSR_EA              1CF4
BSR_EA_32           1D10
BUFFER              2551
BUFFERSIZE          40
CHAR_0              22FE
CHAR_1              2308
CHAR_2              2312
CHAR_3              231C
CHAR_4              2326
CHAR_5              2330
CHAR_6              233A
CHAR_7              2344
CHAR_8              234E
CHAR_9              2358
CHAR_A              2362
CHAR_B              236C
CHAR_C              2376
CHAR_D              2380
CHAR_E              238A
CHAR_F              2394
CLEAR_SCREEN        1102
CMP_EA              1DC8
CR                  D
DATA_ERROR          222E
DECODE_LOOP         10C2
DECODE_OP_ERROR     25BF
DECODE_OP_UNSUPPORT  25FC
DECODE_PAUSE        10E8
DECODE_START        10C0
DESTMODE            1C0
DIVS_EA             1D1C
DIVU_EA             1D16
DONE                241E
EAJUMPTABLE         1F24
EA_DECODER          1F12
EA_PRINT_IMMEDIATE_NUMBER  1F06
END_ADDR            106E
END_ADDR_ERROR      2528
END_MESS            24B2
END_PROGRAM         11BA
ERROR_END_ADDR      240E
ERROR_START_ADDR    23FE
HELPER_ADDA_L       1940
HELPER_ADDA_W       1954
HELPER_ADDSUBQ_CONVERT_B  1892
HELPER_ADDSUBQ_CONVERT_L  186A
HELPER_ADDSUBQ_CONVERT_W  187E
HELPER_ADD_CONVERT_B  19CA
HELPER_ADD_CONVERT_L  19A2
HELPER_ADD_CONVERT_W  19B6
HELPER_ADD_SIZE_CAL  1978
HELPER_CMP_CONVERT_B  1AA4
HELPER_CMP_CONVERT_L  1A7C
HELPER_CMP_CONVERT_W  1A90
HELPER_CMP_SIZE_CAL  1A60
HELPER_ORIB         1676
HELPER_ORIL         169E
HELPER_ORIW         168A
HELPER_SUB_CONVERT_B  18FE
HELPER_SUB_CONVERT_L  18D6
HELPER_SUB_CONVERT_W  18EA
HELPER_SUB_SIZE_CAL  18AC
HELPER__ADDSUBQ_SIZE_CAL  1840
IMMEDIATE_EA        1BC8
INDEX0000           1220
INDEX0001           123E
INDEX0010           1266
INDEX0011           12A6
INDEX0100           12E6
INDEX0101           1304
INDEX0110           1320
INDEX0111           133E
INDEX1000           134E
INDEX1001           136E
INDEX1010           1384
INDEX1011           138A
INDEX1100           13AE
INDEX1101           13DA
INDEX1110           13F4
INDEX1110_MEM       1414
INDEX1111           1432
INPUT_N             4E
INPUT_NL            4E
INPUT_Y             59
INPUT_YL            79
INVALID_MESS        2499
ITOA                222E
ITOA_ADD_CHAR       227E
ITOA_ADD_CHAR_DONE  239E
ITOA_CONVERT        226A
ITOA_CONVERT_N      2278
ITOA_DONE           2268
ITOA_LOOP           223A
LEA_EA              1CB2
LF                  A
LINESONSCREEN       1D
MAIN                1000
MAX_SCREEN_OUTPUT   2591
MODE0               1F54
MODE1               1F96
MODE2               1FD8
MODE3               2022
MODE4               2070
MODE5               20BE
MODE6               20C0
MODE7               20C2
MODE_7_2NDARG_END   2184
MODE_7_2NDARG_START  217E
MODE_7_IMM_LONG     2168
MODE_7_IMM_WORD     2142
MODE_7_LONG         2110
MODE_7_LONG_1       211C
MODE_7_LONG_2       2140
MODE_7_SHORT        20DE
MODE_7_SHORT_1      20EA
MODE_7_SHORT_2      210E
MOVEA_EA            1C24
MOVEM_EA            1C66
MOVEM_EA_FROM_MEM   1C7E
MOVEM_EA_TO_MEM     1C7E
MOVEM_L             1770
MOVEM_SIZE_CALC     173E
MOVEM_W             175C
MOVEQ_EA            1C7E
MOVE_EA             1C2A
MOVE_IMM_DATA       1C14
MULS_EA             1DFC
MULU_EA             1E02
NIBBLE2             F00
NIBBLE3             F0
OP_0000_TABLE       1438
OP_01000_TABLE      1498
OP_0110_TABLE       14F8
OP_1110_TABLE       1558
OP_ADD              1968
OP_ADDA             1912
OP_ADDI             1602
OP_ADDQ             1826
OP_ANDI             15CE
OP_ASL_ADDER        1B88
OP_ASL_M            1AB8
OP_ASR_ADDER        1B98
OP_ASR_M            1ACA
OP_BRA              19F4
OP_BSR              19DE
OP_CMP              1A5A
OP_CMPI             1636
OP_DATA_CLR         113E
OP_DATA_CLR_LOOP    1154
OP_DIVS             1A26
OP_DIVU             1A40
OP_EORI             161C
OP_ERROR            1BB8
OP_FINISH           1138
OP_JMP_TABLE        11C0
OP_LEA              16DE
OP_MOVEAL           16C8
OP_MOVEAW           16B2
OP_MOVEM0           171C
OP_MOVEM1           16FA
OP_MULS             1A18
OP_MULU             1A0A
OP_NOP              17C8
OP_NOP_RTS_RTE      1784
OP_ORI              15B8
OP_ORI_SIZE_EXTACT  1650
OP_ROTATION_CHECK   1ADC
OP_ROTATION_HELP    1B0A
OP_ROTATION_SIZE_B  1B40
OP_ROTATION_SIZE_HELP  1B28
OP_ROTATION_SIZE_L  1B70
OP_ROTATION_SIZE_W  1B58
OP_RTE              17EC
OP_RTS              17FC
OP_START            1112
OP_STOP             17D8
OP_SUB              18A6
OP_SUBI             15E8
OP_SUBQ             180C
OP_UNSUPPORTED      1BA8
REPEAT_MESS         2465
REPEAT_PROGRAM      1162
RESTART_PROGRAM     1018
RESTART_PROGRAM_START  11B2
RIGHT12             C
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
SHIFT               C
SHIFT16             1C20
SIZE                C0
SRCMODE             38
STACK               A0000
START               1000
START_ADDR          1036
START_ADDR_ERROR    24FD
START_MESS          244D
SUBQ_EA             1D90
SUB_EA              1D58
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK5               5
USER_INPUT          1012
WELCOME             1006
WELCOME_MESS        2427
