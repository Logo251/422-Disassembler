00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2021 12:41:07 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : Logan and Victor  
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program 
00001000                             9  
00001000  =000A0000                 10  stack   EQU     $000A0000
00001000  =0000000C                 11  shift   EQU     $C
00001000  =00000001                 12  task1   EQU     $01
00001000  =00000002                 13  task2   EQU     $02
00001000  =00000005                 14  task5   EQU     $05
00001000  =0000000D                 15  task13  EQU     $0D
00001000  =0000000E                 16  task14  EQU     $0E
00001000  =00000059                 17  input_Y EQU     $59
00001000  =00000079                 18  input_yl EQU     $79
00001000  =0000004E                 19  input_N EQU     $4E
00001000  =0000004E                 20  input_nl EQU     $4E
00001000  =0000001D                 21  linesOnScreen   EQU     29
00001000  =00000040                 22  bufferSize   EQU      64   
00001000  =0000000C                 23  right12     EQU     12      ; Extract op code
00001000  =00000008                 24  right8      EQU     8       ; Extract 2nd nibble
00001000  =00000006                 25  right6      EQU     6       ; Extract dest mode
00001000  =00000004                 26  right4      EQU     4       ; Extract 3rd Nibble
00001000  =00000003                 27  right3      EQU     3       ; Extract the scr mode
00001000                            28  
00001000  =00000F00                 29  nibble2     EQU     $0F00   ; Extract 2nd nibble
00001000  =000000F0                 30  nibble3     EQU     $00F0   ; Extract 3rd nibble
00001000  =000001C0                 31  destmode    EQU     $01C0   ; Extract the dest mode
00001000  =00000038                 32  srcmode     EQU     $0038   ; Extract the scr mode
00001000  =000000C0                 33  size        EQU     $00C0   ; Extract the size
00001000                            34  
00001000                            35  MAIN:
00001000  4FF9 000A0000             36          LEA     stack, SP
00001006                            37  WELCOME: 
00001006  43F9 00002505             38          LEA     WELCOME_MESS, A1
0000100C  103C 000E                 39          MOVE.B  #task14,D0
00001010  4E4F                      40          TRAP    #15             Display  Openning Message 
00001012                            41  
00001012                            42  ; ----------------------------------------------------------------------------
00001012                            43  ;   User Interface 
00001012                            44  ; ----------------------------------------------------------------------------  
00001012                            45  USER_INPUT:
00001012  4EF9 00001036             46          JMP     START_ADDR
00001018                            47          
00001018                            48  RESTART_PROGRAM: 
00001018  7200                      49          MOVEQ   #0,D1
0000101A  227C 00000000             50          MOVEA.L #$0, A1
00001020  267C 00000000             51          MOVEA.L #$0, A3
00001026  2A7C 00000000             52          MOVEA.L #$0, A5
0000102C  2C7C 00000000             53          MOVEA.L #$0, A6
00001032  7600                      54          MOVEQ   #0,D3       
00001034  7000                      55          MOVEQ   #0,D0
00001036                            56                  
00001036                            57  START_ADDR:
00001036  7400                      58          MOVEQ   #0,D2
00001038                            59          ; Prompt a start address
00001038  43F9 0000252B             60          LEA     START_MESS, A1
0000103E  103C 000E                 61          MOVE.B  #task14,D0
00001042  4E4F                      62          TRAP    #15           Display  Start_Addr Message
00001044                            63  
00001044  227C 00000000             64          MOVEA.L #$0, A1 
0000104A                            65          ; read a start address 
0000104A  103C 0002                 66          MOVE.B  #task2,D0     Gets input from the user
0000104E  4E4F                      67          TRAP    #15
00001050                            68          
00001050  4EB9 0000247E             69          JSR     ATOI
00001056                            70          
00001056                            71          ; Validate start address       
00001056  7200                      72          MOVEQ   #0,D1
00001058  B6BC FFFFFFFF             73          CMP.L   #-1,D3
0000105E  6700 147C                 74          BEQ     ERROR_START_ADDR
00001062                            75          
00001062                            76                          
00001062  E29B                      77          ROR.L   #1, D3          ; Checks for odd number
00001064  6500 1476                 78          BCS     ERROR_START_ADDR
00001068  E39B                      79          ROL.L   #1, D3
0000106A  2A43                      80          MOVEA.L D3,A5           ; A5 = start address
0000106C  5442                      81          ADDQ    #2,D2        
0000106E                            82  END_ADDR:         
0000106E                            83          ; Prompt end address
0000106E  7600                      84          MOVEQ   #0,D3       ; Reset D3 Register
00001070  7200                      85          MOVEQ   #0,D1
00001072                            86          
00001072  43F9 00002590             87          LEA     END_MESS, A1
00001078  103C 000E                 88          MOVE.B  #task14,D0
0000107C  4E4F                      89          TRAP    #15           Display  END_Addr Message
0000107E                            90          
0000107E  227C 00000000             91          MOVEA.L #$0, A1 
00001084  103C 0002                 92          MOVE.B  #task2,D0     Gets input from the user
00001088  4E4F                      93          TRAP    #15
0000108A                            94          
0000108A                            95          ; Read the end address
0000108A  4EB9 0000247E             96          JSR     ATOI
00001090  7200                      97          MOVEQ   #0,D1
00001092  B6BC FFFFFFFF             98          CMP.L   #-1,D3
00001098  6700 1452                 99          BEQ     ERROR_END_ADDR
0000109C                           100          
0000109C                           101          ; Validate end address & check if its greater than start
0000109C  E29B                     102          ROR.L   #1, D3
0000109E  6500 144C                103          BCS     ERROR_END_ADDR
000010A2  E39B                     104          ROL.L   #1, D3
000010A4                           105          
000010A4  B6BC 00FFFFFF            106          CMP.L   #$000FFFFFF, D3 
000010AA  6C00 1440                107          BGE     ERROR_END_ADDR
000010AE                           108          
000010AE  7202                     109          MOVEQ   #2, D1
000010B0  BBC3                     110          CMP.L   D3, A5 
000010B2  6C00 1438                111          BGE     ERROR_END_ADDR
000010B6  2C43                     112          MOVEA.L D3,A6       ; A6 = end address
000010B8  5442                     113          ADDQ    #2,D2
000010BA  4EF9 000010C2            114          JMP     DECODE_LOOP
000010C0                           115        
000010C0                           116  ; ----------------------------------------------------------------------------
000010C0                           117  ;   OP Code Start
000010C0                           118  ; ----------------------------------------------------------------------------          
000010C0                           119  DECODE_START: 
000010C0  4282                     120          CLR.L   D2      ; D2 = Screen line counter
000010C2                           121             
000010C2                           122  DECODE_LOOP:
000010C2                           123          ; Decoding the current address
000010C2  284B                     124          MOVEA.L A3, A4      ; Save the current start address of the string we are printing 
000010C4  4EB9 00001112            125          JSR     OP_START
000010CA                           126          
000010CA  16FC 0000                127          MOVE.B  #$00, (A3)+
000010CE  224C                     128          MOVEA.L A4, A1      
000010D0  103C 000D                129          MOVE.B  #task13, D0     ; Printing out decoded instruction 
000010D4  4E4F                     130          TRAP    #15
000010D6                           131          
000010D6                           132          ; Check if a decode finished
000010D6  BDCD                     133          CMP.L   A5, A6          ; Checks if the program is done
000010D8  6F00 0088                134          BLE     REPEAT_PROGRAM
000010DC                           135          
000010DC                           136          ; Check if the screen filled
000010DC  5202                     137          ADDQ.B  #1,D2           ; Adds one to the total # of lines on the screen 
000010DE  B43C 001D                138          CMP.B   #linesOnScreen, D2  ; Check if it exceds the max 
000010E2  6700 0004                139          BEQ     DECODE_PAUSE
000010E6                           140  
000010E6  60DA                     141          BRA     DECODE_LOOP
000010E8                           142          
000010E8                           143  DECODE_PAUSE:   
000010E8  43F9 0000266F            144          LEA     MAX_SCREEN_OUTPUT,  A1
000010EE  103C 000E                145          MOVE.B  #task14, D0     ; Display the input that it exceeds 
000010F2  4E4F                     146          TRAP    #15 
000010F4                           147          
000010F4  103C 0005                148          MOVE.B  #task5, D0      ; Ask for the user to input to continue 
000010F8  4E4F                     149          TRAP    #15
000010FA                           150          
000010FA                           151          ; Branch b/c user enter any key 
000010FA  4EB9 00001102            152          JSR     CLEAR_SCREEN
00001100                           153          ; Program is is ready to continue the program
00001100  60BE                     154          BRA     DECODE_START
00001102                           155          
00001102                           156  CLEAR_SCREEN: 
00001102                           157          ; Clear output for the screen 
00001102  4282                     158          CLR.L   D2
00001104  43F9 00002502            159          LEA     BLANK,  A1
0000110A  103C 000D                160          MOVE.B  #task13, D0     ; Display the input that it exceeds 
0000110E  4E4F                     161          TRAP    #15 
00001110  4E75                     162          RTS
00001112                           163             
00001112                           164  OP_START: 
00001112  48E7 2002                165          MOVEM.L  D2/A6, -(SP)    ; D2 (Screen line), A6 Ending Address
00001116                           166          
00001116  4EB9 0000113E            167          JSR     OP_DATA_CLR
0000111C                           168          ; LEA     A3, buffer    ; Loads the message in 
0000111C                           169          
0000111C  41F9 000011C0            170          LEA      OP_JMP_TABLE, A0
00001122  4280                     171          CLR.L    D0
00001124  4281                     172          CLR.L    D1
00001126  301D                     173          MOVE.W   (A5)+,D0       ; Loads current word instruction to D0
00001128                           174          
00001128  2200                     175          MOVE.L   D0,D1          ; Move word instruct to D1
0000112A  143C 000C                176          MOVE.B   #right12, D2   
0000112E  E469                     177          LSR.W    D2, D1         ; D1 = op code
00001130  C2FC 0006                178          MULU     #6,D1          ; Computing jmp displacement
00001134  4EF0 1000                179          JMP      0(A0,D1)       ; 
00001138                           180         
00001138                           181  OP_FINISH: 
00001138  4CDF 4004                182          MOVEM.L (SP)+,D2/A6, 
0000113C  4E75                     183          RTS
0000113E                           184           
0000113E                           185  ;-------------------------------------------
0000113E                           186      ;According to instructions, need to 
0000113E                           187      ;clear buffer before decoding questions 
0000113E                           188  ;-------------------------------------------
0000113E                           189  OP_DATA_CLR: 
0000113E  4283                     190          CLR.L   D3
00001140  163C 0040                191          MOVE.B  #bufferSize ,D3
00001144  47F9 0000262F            192          LEA     buffer,A3
0000114A                           193          
0000114A  4EB9 00001154            194          JSR     OP_DATA_CLR_LOOP
00001150                           195          
00001150  284B                     196          MOVEA.L A3, A4      ; Save the start of the address  
00001152  4E75                     197          RTS
00001154                           198          
00001154                           199  OP_DATA_CLR_LOOP:
00001154  2678 0000                200          MOVEA.L $0, A3
00001158  16FC 0000                201          MOVE.B  #0,(A3)+
0000115C  5343                     202          SUBI    #1,D3
0000115E  6EF4                     203          BGT     OP_DATA_CLR_LOOP
00001160  4E75                     204          RTS
00001162                           205          
00001162                           206  REPEAT_PROGRAM: 
00001162                           207          ; Output text to continue 
00001162  43F9 00002543            208          LEA     REPEAT_MESS, A1
00001168  103C 000E                209          MOVE.B  #task14,D0
0000116C  4E4F                     210          TRAP    #15           Display  message asking to repeat 
0000116E                           211          
0000116E  4281                     212          CLR.L   D1
00001170                           213          ; Ask for input 
00001170  227C 00000000            214          MOVEA.L #$0, A1 
00001176                           215          ; read a start address 
00001176  103C 0005                216          MOVE.B  #task5,D0     Gets input from the user
0000117A  4E4F                     217          TRAP    #15
0000117C                           218          ; If y = go to user input
0000117C  B27C 0059                219          CMP.W   #input_Y, D1
00001180  6700 0030                220          BEQ     RESTART_PROGRAM_START
00001184                           221  
00001184  B27C 0079                222          CMP.W   #input_yl, D1
00001188  6700 0028                223          BEQ     RESTART_PROGRAM_START        
0000118C                           224          ; if n = stop program. 
0000118C                           225          
0000118C  B27C 004E                226          CMP.W   #input_N, D1
00001190  6700 0028                227          BEQ     END_PROGRAM
00001194                           228          
00001194  B27C 004E                229          CMP.W   #input_nl, D1
00001198  6700 0020                230          BEQ     END_PROGRAM
0000119C                           231          
0000119C                           232          ; Error Retry: 
0000119C  227C 00000000            233          MOVEA.L #$0, A1 
000011A2  43F9 00002577            234          LEA     INVALID_MESS, A1
000011A8  103C 000E                235          MOVE.B  #task14,D0
000011AC  4E4F                     236          TRAP    #15           Display  Error Message
000011AE                           237          
000011AE  4EF8 1162                238          JMP     REPEAT_PROGRAM
000011B2                           239          
000011B2                           240  RESTART_PROGRAM_START: 
000011B2  4EB8 1102                241          JSR     CLEAR_SCREEN
000011B6  4EF8 1018                242          JMP     RESTART_PROGRAM
000011BA                           243          
000011BA                           244  END_PROGRAM: 
000011BA  4EF9 000024FC            245         JMP      DONE 
000011C0                           246      
000011C0                           247  OP_JMP_TABLE:
000011C0  4EF9 00001220            248          JMP     INDEX0000        ; ORI
000011C6  4EF9 0000123E            249          JMP     INDEX0001        ; MOVE BYTE
000011CC  4EF9 00001266            250          JMP     INDEX0010        ; MOVE WORD / MOVEA
000011D2  4EF9 000012A6            251          JMP     INDEX0011        ; MOVE LONG / MOVEA
000011D8  4EF9 000012E6            252          JMP     INDEX0100        ; NOP, MOVEM, LEA
000011DE  4EF9 00001304            253          JMP     INDEX0101        ; ADDQ
000011E4  4EF9 00001320            254          JMP     INDEX0110        ; BRA, BSR
000011EA  4EF9 0000133E            255          JMP     INDEX0111        ; MOVEQ
000011F0  4EF9 0000134E            256          JMP     INDEX1000        ; DIVU
000011F6  4EF9 0000136E            257          JMP     INDEX1001        ; SUB
000011FC  4EF9 00001384            258          JMP     INDEX1010
00001202  4EF9 0000138A            259          JMP     INDEX1011        ; CMP 
00001208  4EF9 000013AE            260          JMP     INDEX1100        ; MULU
0000120E  4EF9 000013DA            261          JMP     INDEX1101        ; ADD, ADDA
00001214  4EF9 000013F4            262          JMP     INDEX1110        ; ASL, ASR
0000121A  4EF9 00001432            263          JMP     INDEX1111        ; Unsupported    
00001220                           264  
00001220                           265  ; ------------------------------------
00001220                           266  ;   OP ORI 
00001220                           267  ; ------------------------------------        
00001220                           268  INDEX0000: 
00001220  41F9 00001438            269          LEA   OP_0000_TABLE, A0  
00001226  4281                     270          CLR.L   D1
00001228  4282                     271          CLR.L   D2
0000122A  2200                     272          MOVE.L  D0,D1               ; Current instruct word
0000122C  0241 0F00                273          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001230  143C 0008                274          MOVE.B  #right8, D2         
00001234  E469                     275          LSR.W   D2,D1               ; D1 = 2nd nibble
00001236  C2FC 0006                276          MULU    #6,D1               
0000123A  4EF0 1000                277          JMP      0(A0,D1)
0000123E                           278          
0000123E                           279  ; ------------------------------------
0000123E                           280  ;   OP MOVE.B 
0000123E                           281  ; ------------------------------------
0000123E                           282  INDEX0001: 
0000123E  4283                     283          CLR.L   D3
00001240  163C 0001                284          MOVE.B   #1, D3        ; byte size
00001244  16FC 004D                285          MOVE.B  #'M', (A3)+
00001248  16FC 004F                286          MOVE.B  #'O', (A3)+
0000124C  16FC 0056                287          MOVE.B  #'V', (A3)+    
00001250  16FC 0045                288          MOVE.B  #'E', (A3)+
00001254  16FC 002E                289          MOVE.B  #'.', (A3)+ 
00001258  16FC 0042                290          MOVE.B  #'B', (A3)+
0000125C                           291          
0000125C                           292          ; Call MOVE EA 
0000125C  4EB9 00001C38            293          JSR     MOVEA_EA
00001262  4EF8 1138                294          JMP     OP_FINISH
00001266                           295          
00001266                           296  ; ------------------------------------
00001266                           297  ;   OP MOVEA / MOVE long
00001266                           298  ; ------------------------------------
00001266                           299  INDEX0010:
00001266  4283                     300          CLR.L   D3
00001268  4282                     301          CLR.L   D2
0000126A  163C 0004                302          MOVE.B   #4, D3        ; Long  size
0000126E                           303          
0000126E  16FC 004D                304          MOVE.B  #'M', (A3)+
00001272  16FC 004F                305          MOVE.B  #'O', (A3)+
00001276  16FC 0056                306          MOVE.B  #'V', (A3)+
0000127A  16FC 0045                307          MOVE.B  #'E', (A3)+
0000127E                           308          
0000127E  4281                     309          CLR.L   D1
00001280  2200                     310          MOVE.L  D0,D1               ; Current instruct word
00001282  0241 01C0                311          ANDI.W  #destmode,D1         ; Extract dest mode
00001286  143C 0006                312          MOVE.B  #right6, D2         
0000128A  E469                     313          LSR.W   D2,D1 
0000128C                           314  
0000128C  B23C 0001                315          CMP.B   #1, D1
00001290  6700 0436                316          BEQ     OP_MOVEAL               
00001294                           317  
00001294  16FC 002E                318          MOVE.B  #'.', (A3)+
00001298  16FC 004C                319          MOVE.B  #'L', (A3)+
0000129C                           320          
0000129C                           321          ; Call MOVE EA
0000129C  4EB9 00001C38            322          JSR     MOVEA_EA
000012A2  4EF8 1138                323          JMP     OP_FINISH
000012A6                           324          
000012A6                           325  ; ------------------------------------
000012A6                           326  ;   OP MOVEA / MOVE word  
000012A6                           327  ; ------------------------------------
000012A6                           328  INDEX0011:
000012A6  4283                     329          CLR.L   D3
000012A8  4281                     330          CLR.L   D1
000012AA  4282                     331          CLR.L   D2
000012AC  163C 0002                332          MOVE.B   #2, D3        ; word 
000012B0                           333          
000012B0  16FC 004D                334          MOVE.B  #'M', (A3)+
000012B4  16FC 004F                335          MOVE.B  #'O', (A3)+
000012B8  16FC 0056                336          MOVE.B  #'V', (A3)+
000012BC  16FC 0045                337          MOVE.B  #'E', (A3)+
000012C0                           338          
000012C0  2200                     339          MOVE.L  D0,D1                ; Current instruct word
000012C2  0241 01C0                340          ANDI.W  #destmode,D1         ; Extract dest mode
000012C6  143C 0006                341          MOVE.B  #right6, D2         
000012CA  E469                     342          LSR.W   D2,D1 
000012CC                           343          
000012CC  B23C 0001                344          CMP.B   #1, D1
000012D0  6700 03E0                345          BEQ     OP_MOVEAW
000012D4                           346          
000012D4  16FC 002E                347          MOVE.B  #'.', (A3)+
000012D8  16FC 0057                348          MOVE.B  #'W', (A3)+
000012DC                           349          
000012DC                           350          ; Call MOVE EA
000012DC  4EB9 00001C38            351          JSR     MOVEA_EA
000012E2  4EF8 1138                352          JMP     OP_FINISH
000012E6                           353          
000012E6                           354  ; ------------------------------------
000012E6                           355  ;   OP  NOP, MOVEM, LEA 
000012E6                           356  ; ------------------------------------ 
000012E6                           357  INDEX0100: 
000012E6  4281                     358          CLR.L   D1
000012E8  4282                     359          CLR.L   D2
000012EA  41F9 00001498            360          LEA     OP_01000_TABLE, A0
000012F0  2200                     361          MOVE.L  D0,D1               ; Current instruct word
000012F2  0241 0F00                362          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
000012F6  143C 0008                363          MOVE.B  #right8, D2         
000012FA  E469                     364          LSR.W   D2,D1               ; D1 = 2nd nibble
000012FC  C2FC 0006                365          MULU    #6,D1               
00001300  4EF0 1000                366          JMP      0(A0,D1)           ; JMP to table
00001304                           367  
00001304                           368  ; -------------------------------
00001304                           369  ;   OP ADDQ / SUBQ  
00001304                           370  ; --------------------------------
00001304                           371  INDEX0101:
00001304  4281                     372          CLR.L   D1 
00001306  4282                     373          CLR.L   D2
00001308  2200                     374          MOVE.L  D0,D1               ; Current instruct word
0000130A  0241 0F00                375          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
0000130E  143C 0008                376          MOVE.B  #right8, D2         
00001312  E469                     377          LSR.W   D2,D1               ; D1 = 2nd nibble
00001314                           378      
00001314  0201 0001                379          ANDI.B  #1, D1
00001318  6700 04F2                380          BEQ     OP_SUBQ             ; If last bit = 1 --> SUBQ 
0000131C  6600 0508                381          BNE     OP_ADDQ             ; If lat bit = 0 --> ADDQ
00001320                           382          
00001320                           383          
00001320                           384  ; ------------------------------------
00001320                           385  ;   OP BRA,BSR  
00001320                           386  ; ------------------------------------
00001320                           387  INDEX0110: 
00001320  41F9 000014F8            388          LEA     OP_0110_TABLE, A0
00001326                           389          
00001326  4282                     390          CLR.L   D2
00001328  4281                     391          CLR.L   D1
0000132A  2200                     392          MOVE.L  D0,D1               ; Current instruct word
0000132C  0241 0F00                393          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001330  143C 0008                394          MOVE.B  #right8, D2         
00001334  E469                     395          LSR.W   D2,D1               ; D1 = 2nd nibble
00001336  C2FC 0006                396          MULU    #6,D1               
0000133A  4EF0 1000                397          JMP     0(A0,D1)
0000133E                           398  
0000133E                           399  ; ------------------------------------
0000133E                           400  ;   OP MOVEQ --> DONE
0000133E                           401  ; ------------------------------------
0000133E                           402  INDEX0111: 
0000133E  4283                     403          CLR.L   D3
00001340  163C 0004                404          MOVE.B   #4, D3        ; long 
00001344                           405          
00001344  4EB9 00001CD2            406          JSR     MOVEQ_EA
0000134A  4EF8 1138                407          JMP     OP_FINISH
0000134E                           408  
0000134E                           409  ; ----------------------------------------------------------
0000134E                           410  ;   OP DIVU, DIVS   -->  DONE
0000134E                           411  ; ---------------------------------------------------------
0000134E                           412  INDEX1000: 
0000134E  4283                     413          CLR.L   D3
00001350  163C 0002                414          MOVE.B   #2, D3        ; word
00001354                           415          
00001354  4281                     416          CLR.L   D1
00001356  2200                     417          MOVE.L  D0,D1               ; Current instruct word
00001358  0241 0100                418          ANDI.W  #$0100,D1         ; Extract 2nd nibble
0000135C  143C 0008                419          MOVE.B  #right8, D2         
00001360  E469                     420          LSR.W   D2,D1               ; D1 = 2nd nibble
00001362                           421  
00001362  B23C 0001                422          CMP.B  #1, D1
00001366  6700 06BE                423          BEQ     OP_DIVS           ; If last bit = 1 --> DIVS 
0000136A  6600 06D4                424          BNE     OP_DIVU            ; If lat bit = 0 --> DIVU
0000136E                           425                  
0000136E                           426  ; ------------------------------------
0000136E                           427  ;   OP SUB --> Need to Implement
0000136E                           428  ; ------------------------------------ 
0000136E                           429  INDEX1001: 
0000136E  16FC 0053                430          MOVE.B  #'S', (A3)+
00001372  16FC 0055                431          MOVE.B  #'U', (A3)+
00001376  16FC 0042                432          MOVE.B  #'B', (A3)+  
0000137A  16FC 002E                433          MOVE.B  #'.', (A3)+   
0000137E                           434  
0000137E  4EF9 000018A6            435          JMP     OP_SUB
00001384                           436  
00001384                           437  ; ------------------------------------
00001384                           438  ;   OP Code not supported 
00001384                           439  ; ------------------------------------         
00001384                           440  INDEX1010: 
00001384  4EF9 00001BBC            441          JMP     OP_UNSUPPORTED
0000138A                           442          
0000138A                           443  ; ------------------------------------
0000138A                           444  ;   OP CMP --> Forgot to do this one lol 
0000138A                           445  ; ------------------------------------         
0000138A                           446  INDEX1011: 
0000138A  16FC 0043                447          MOVE.B  #'C', (A3)+
0000138E  16FC 004D                448          MOVE.B  #'M', (A3)+
00001392  16FC 0050                449          MOVE.B  #'P', (A3)+
00001396  16FC 002E                450          MOVE.B  #'.', (A3)+
0000139A                           451          
0000139A  4281                     452          CLR.L   D1 
0000139C  2200                     453          MOVE.L  D0,D1               ; Current instruct word
0000139E  0241 00C0                454          ANDI.W  #size,D1         ; Extract 2nd nibble
000013A2  143C 0008                455          MOVE.B  #right8, D2         
000013A6  E469                     456          LSR.W   D2,D1               ; D1 = 2nd nibble
000013A8                           457          
000013A8  4EF9 00001A5A            458          JMP     OP_CMP
000013AE                           459          
000013AE                           460  ; ------------------------------------
000013AE                           461  ;   OP MULU --> Done
000013AE                           462  ; ------------------------------------ 
000013AE                           463  INDEX1100: 
000013AE  16FC 004D                464          MOVE.B  #'M', (A3)+
000013B2  16FC 0055                465          MOVE.B  #'U', (A3)+
000013B6  16FC 004C                466          MOVE.B  #'L', (A3)+    
000013BA                           467          
000013BA  4283                     468          CLR.L   D3
000013BC  163C 0002                469          MOVE.B   #2, D3
000013C0                           470  
000013C0  4281                     471          CLR.L   D1
000013C2  2200                     472          MOVE.L  D0,D1               ; Current instruct word
000013C4  0241 0100                473          ANDI.W  #$100,D1         ; Extract 2nd nibble
000013C8  143C 0008                474          MOVE.B  #right8, D2         
000013CC  E469                     475          LSR.W   D2,D1               ; 
000013CE                           476          
000013CE  B23C 0001                477          CMP.B   #1, D1
000013D2  6700 0644                478          BEQ     OP_MULS  
000013D6  6600 0632                479          BNE     OP_MULU
000013DA                           480          
000013DA                           481  ; ------------------------------------
000013DA                           482  ;   OP ADD,ADDA     --> Needs a lot of work 
000013DA                           483  ; ------------------------------------
000013DA                           484  INDEX1101:
000013DA  4281                     485          CLR.L   D1 
000013DC  2200                     486          MOVE.L  D0,D1               ; Current instruct word
000013DE  0241 00C0                487          ANDI.W  #size,D1         ; Extract dest mode
000013E2  143C 0006                488          MOVE.B  #right6, D2         
000013E6  E469                     489          LSR.W   D2,D1
000013E8                           490      
000013E8  B23C 0003                491          CMP.B   #3,D1
000013EC  6700 0524                492          BEQ     OP_ADDA
000013F0  6600 0576                493          BNE     OP_ADD
000013F4                           494          
000013F4                           495  ; ------------------------------------
000013F4                           496  ;   OP ASL,ASR    --> Figure out Rotation 
000013F4                           497  ; ------------------------------------ 
000013F4                           498  INDEX1110:       
000013F4                           499  
000013F4                           500          ; Extract the size (7 -8 )
000013F4  4281                     501          CLR.L   D1 
000013F6  2200                     502          MOVE.L  D0,D1               ; Current instruct word
000013F8  0241 00C0                503          ANDI.W  #size,D1         ; Extract 2nd nibble
000013FC  143C 0006                504          MOVE.B  #right6, D2             
00001400  E469                     505          LSR.W   D2,D1               ; 
00001402                           506          
00001402  4283                     507          CLR.L   D3
00001404  1601                     508          MOVE.B   D1, D3 
00001406                           509  
00001406  B63C 0003                510          CMP.B #3, D3 
0000140A  6700 0008                511          BEQ     INDEX1110_MEM
0000140E                           512  
0000140E  4EF9 00001AF0            513          JMP     OP_ROTATION_CHECK
00001414                           514  INDEX1110_MEM:
00001414                           515          ; Memory Register Shift 11  
00001414  41F9 00001558            516          LEA     OP_1110_TABLE, A0  
0000141A  4281                     517          CLR.L   D1
0000141C  4282                     518          CLR.L   D2
0000141E  2200                     519          MOVE.L  D0,D1               ; Current instruct word
00001420  0241 0F00                520          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001424  143C 0008                521          MOVE.B  #right8, D2         
00001428  E469                     522          LSR.W   D2,D1               ; D1 = 2nd nibble
0000142A  C2FC 0006                523          MULU    #6,D1               
0000142E  4EF0 1000                524          JMP     0(A0,D1)
00001432                           525  ; ------------------------------------
00001432                           526  ;   OP Code not supported 
00001432                           527  ; ------------------------------------         
00001432                           528  INDEX1111:
00001432  4EF9 00001BBC            529          JMP     OP_UNSUPPORTED
00001438                           530          
00001438                           531  ; ------------------------------------
00001438                           532  ;   JUMP Tables for OP codes 
00001438                           533  ; ------------------------------------         
00001438                           534  OP_0000_TABLE: 
00001438  4EF9 000015B8            535          JMP     OP_ORI              ; 0: ORI
0000143E  4EF9 00001BBC            536          JMP     OP_UNSUPPORTED      ; 1: Not supported  
00001444  4EF9 000015CE            537          JMP     OP_ANDI             ; 2: Not supported      ANDI
0000144A  4EF9 00001BBC            538          JMP     OP_UNSUPPORTED      ; 3: Not supported      
00001450  4EF9 000015E8            539          JMP     OP_SUBI             ; 4: Not supported      SUBI
00001456  4EF9 00001BBC            540          JMP     OP_UNSUPPORTED      ; 5: Not supported
0000145C  4EF9 00001602            541          JMP     OP_ADDI             ; 6: Not supported      ADDI
00001462  4EF9 00001BBC            542          JMP     OP_UNSUPPORTED      ; 7: Not supported
00001468  4EF9 00001BBC            543          JMP     OP_UNSUPPORTED      ; 8: Not supported
0000146E  4EF9 00001BBC            544          JMP     OP_UNSUPPORTED      ; 9: Not supported
00001474  4EF9 0000161C            545          JMP     OP_EORI             ; A: Not supported      EORI
0000147A  4EF9 00001BBC            546          JMP     OP_UNSUPPORTED      ; B: Not supported
00001480  4EF9 00001636            547          JMP     OP_CMPI             ; C: Not supported      CMPI
00001486  4EF9 00001BBC            548          JMP     OP_UNSUPPORTED      ; D: Not supported
0000148C  4EF9 00001BCC            549          JMP     OP_ERROR            ; E: Not supported      INVALID
00001492  4EF9 00001BBC            550          JMP     OP_UNSUPPORTED      ; F: Not supported  
00001498                           551  
00001498                           552  OP_01000_TABLE: 
00001498  4EF9 00001BBC            553          JMP     OP_UNSUPPORTED      ; 0: Not supported      MOVE to SR , NEGX
0000149E  4EF9 000016DE            554          JMP     OP_LEA              ; 1: LEA An = 0   
000014A4  4EF9 00001BBC            555          JMP     OP_UNSUPPORTED      ; 2: Not supported      CLR
000014AA  4EF9 000016DE            556          JMP     OP_LEA              ; 3: LEA An = 1      
000014B0  4EF9 00001BBC            557          JMP     OP_UNSUPPORTED      ; 4: Not supported      NEG , MOVE to CCR    
000014B6  4EF9 000016DE            558          JMP     OP_LEA              ; 5: LEA An = 2     
000014BC  4EF9 00001BBC            559          JMP     OP_UNSUPPORTED      ; 6: Not supported      NOT      
000014C2  4EF9 000016DE            560          JMP     OP_LEA              ; 7: LEA An = 3
000014C8  4EF9 0000171C            561          JMP     OP_MOVEM0           ; 8: MOVEM D = 0     
000014CE  4EF9 000016DE            562          JMP     OP_LEA              ; 9: LEA An = 4
000014D4  4EF9 00001BBC            563          JMP     OP_UNSUPPORTED      ; A: Not supported      
000014DA  4EF9 000016DE            564          JMP     OP_LEA              ; B: LEA An = 5
000014E0  4EF9 000016FA            565          JMP     OP_MOVEM1           ; C: MOVEM D = 1      
000014E6  4EF9 000016DE            566          JMP     OP_LEA              ; D: LEA An = 6
000014EC  4EF9 00001784            567          JMP     OP_NOP_RTS_RTE      ; E: NOP, RTE,RTS, STOP    
000014F2  4EF9 000016DE            568          JMP     OP_LEA              ; F: LEA An = 7
000014F8                           569      
000014F8                           570  OP_0110_TABLE: 
000014F8  4EF9 000019F4            571          JMP     OP_BRA              ; 0: BRA
000014FE  4EF9 000019DE            572          JMP     OP_BSR              ; 1: BSR  
00001504  4EF9 00001BBC            573          JMP     OP_UNSUPPORTED      ; 2: Not supported      BHI
0000150A  4EF9 00001BBC            574          JMP     OP_UNSUPPORTED      ; 3: Not supported      BLS
00001510  4EF9 00001BBC            575          JMP     OP_UNSUPPORTED      ; 4: Not supported      BCC
00001516  4EF9 00001BBC            576          JMP     OP_UNSUPPORTED      ; 5: Not supported      BCS
0000151C  4EF9 00001BBC            577          JMP     OP_UNSUPPORTED      ; 6: Not supported      BNE
00001522  4EF9 00001BBC            578          JMP     OP_UNSUPPORTED      ; 7: Not supported      BEQ
00001528  4EF9 00001BBC            579          JMP     OP_UNSUPPORTED      ; 8: Not supported      BVC
0000152E  4EF9 00001BBC            580          JMP     OP_UNSUPPORTED      ; 9: Not supported      BVS
00001534  4EF9 00001BBC            581          JMP     OP_UNSUPPORTED      ; A: Not supported      BPL
0000153A  4EF9 00001BBC            582          JMP     OP_UNSUPPORTED      ; B: Not supported      BMI
00001540  4EF9 00001BBC            583          JMP     OP_UNSUPPORTED      ; C: Not supported      BGE
00001546  4EF9 00001BBC            584          JMP     OP_UNSUPPORTED      ; D: Not supported      BLT
0000154C  4EF9 00001BBC            585          JMP     OP_UNSUPPORTED      ; E: Not supported      BGT
00001552  4EF9 00001BBC            586          JMP     OP_UNSUPPORTED      ; F: Not supported      BLE
00001558                           587          
00001558                           588  OP_1110_TABLE: 
00001558  4EF9 00001AD4            589          JMP     OP_ASR_M              ; 0: ASR
0000155E  4EF9 00001AB8            590          JMP     OP_ASL_M              ; 1: ASL  
00001564  4EF9 00001BBC            591          JMP     OP_UNSUPPORTED      ; 2: Not Supported      LSR     
0000156A  4EF9 00001BBC            592          JMP     OP_UNSUPPORTED      ; 3: Not Supported      LSL      
00001570  4EF9 00001BBC            593          JMP     OP_UNSUPPORTED      ; 4: Not Supported      ROXR     
00001576  4EF9 00001BBC            594          JMP     OP_UNSUPPORTED      ; 5: Not supported      ROXL      
0000157C  4EF9 00001BBC            595          JMP     OP_UNSUPPORTED      ; 6: Not supported      ROR
00001582  4EF9 00001BBC            596          JMP     OP_UNSUPPORTED      ; 7: Not supported      ROL
00001588  4EF9 00001BCC            597          JMP     OP_ERROR            ; 8: Error     
0000158E  4EF9 00001BCC            598          JMP     OP_ERROR            ; 9: Error       
00001594  4EF9 00001BCC            599          JMP     OP_ERROR            ; A: Error       
0000159A  4EF9 00001BCC            600          JMP     OP_ERROR            ; B: Error        
000015A0  4EF9 00001BCC            601          JMP     OP_ERROR            ; C: Error        
000015A6  4EF9 00001BCC            602          JMP     OP_ERROR            ; D: Error        
000015AC  4EF9 00001BCC            603          JMP     OP_ERROR            ; E: Error        
000015B2  4EF9 00001BCC            604          JMP     OP_ERROR            ; F: Error        
000015B8                           605  
000015B8                           606  ;---------------------------------------------------
000015B8                           607  ; ORI. Gathering instruct size and calling EA
000015B8                           608  ;-------------------------------------------------      
000015B8                           609  OP_ORI:
000015B8  16FC 004F                610          MOVE.B  #'O', (A3)+
000015BC  16FC 0052                611          MOVE.B  #'R', (A3)+
000015C0  16FC 0049                612          MOVE.B  #'I', (A3)+
000015C4  16FC 002E                613          MOVE.B  #'.', (A3)+
000015C8  4EF9 00001650            614          JMP     OP_ORI_SIZE_EXTACT
000015CE                           615  
000015CE                           616  OP_ANDI:     
000015CE  16FC 0041                617          MOVE.B  #'A', (A3)+
000015D2  16FC 004E                618          MOVE.B  #'N', (A3)+
000015D6  16FC 0044                619          MOVE.B  #'D', (A3)+
000015DA  16FC 0049                620          MOVE.B  #'I', (A3)+
000015DE  16FC 002E                621          MOVE.B  #'.', (A3)+
000015E2  4EF9 00001650            622          JMP     OP_ORI_SIZE_EXTACT
000015E8                           623  
000015E8                           624  OP_SUBI:     
000015E8  16FC 0053                625          MOVE.B  #'S', (A3)+
000015EC  16FC 0055                626          MOVE.B  #'U', (A3)+
000015F0  16FC 0042                627          MOVE.B  #'B', (A3)+
000015F4  16FC 0049                628          MOVE.B  #'I', (A3)+
000015F8  16FC 002E                629          MOVE.B  #'.', (A3)+
000015FC  4EF9 00001650            630          JMP     OP_ORI_SIZE_EXTACT
00001602                           631          
00001602                           632  OP_ADDI:     
00001602  16FC 0041                633          MOVE.B  #'A', (A3)+
00001606  16FC 0044                634          MOVE.B  #'D', (A3)+
0000160A  16FC 0044                635          MOVE.B  #'D', (A3)+
0000160E  16FC 0049                636          MOVE.B  #'I', (A3)+
00001612  16FC 002E                637          MOVE.B  #'.', (A3)+
00001616  4EF9 00001650            638          JMP     OP_ORI_SIZE_EXTACT
0000161C                           639          
0000161C                           640  OP_EORI:     
0000161C  16FC 0045                641          MOVE.B  #'E', (A3)+
00001620  16FC 004F                642          MOVE.B  #'O', (A3)+
00001624  16FC 0052                643          MOVE.B  #'R', (A3)+
00001628  16FC 0049                644          MOVE.B  #'I', (A3)+
0000162C  16FC 002E                645          MOVE.B  #'.', (A3)+
00001630  4EF9 00001650            646          JMP     OP_ORI_SIZE_EXTACT
00001636                           647  
00001636                           648  OP_CMPI:     
00001636  16FC 0043                649          MOVE.B  #'C', (A3)+
0000163A  16FC 004D                650          MOVE.B  #'M', (A3)+
0000163E  16FC 0050                651          MOVE.B  #'P', (A3)+
00001642  16FC 0049                652          MOVE.B  #'I', (A3)+
00001646  16FC 002E                653          MOVE.B  #'.', (A3)+
0000164A  4EF9 00001650            654          JMP     OP_ORI_SIZE_EXTACT   
00001650                           655       
00001650                           656  OP_ORI_SIZE_EXTACT:     
00001650  4281                     657          CLR.L   D1    
00001652  2200                     658          MOVE.L  D0,D1               ; Current instruct word
00001654  0241 00C0                659          ANDI.W  #size,D1         ; Extract 2nd nibble
00001658  143C 0006                660          MOVE.B  #right6, D2         
0000165C  E469                     661          LSR.W   D2,D1               ; D1 = 2nd nibble
0000165E                           662  
0000165E  B23C 0000                663          CMP.B   #0,D1       
00001662  6700 0012                664          BEQ     HELPER_ORIB             ;--> BYTE
00001666                           665          
00001666  B23C 0001                666          CMP.B   #1, D1      ;--> Word
0000166A  6700 001E                667          BEQ     HELPER_ORIW
0000166E                           668          
0000166E  B23C 0002                669          CMP.B   #2, D1      ; --> Long
00001672  6700 002A                670          BEQ     HELPER_ORIL
00001676                           671          
00001676                           672  
00001676                           673              
00001676                           674  HELPER_ORIB:
00001676  4283                     675          CLR.L   D3
00001678  163C 0001                676          MOVE.B   #1, D3
0000167C  16FC 0042                677          MOVE.B  #'B', (A3)+
00001680                           678               
00001680  4EB9 00001BDC            679          JSR     IMMEDIATE_EA  
00001686  4EF8 1138                680          JMP     OP_FINISH
0000168A                           681      
0000168A                           682  HELPER_ORIW:
0000168A  4283                     683          CLR.L   D3
0000168C  163C 0002                684          MOVE.B   #2, D3
00001690  16FC 0057                685          MOVE.B  #'W', (A3)+
00001694                           686      
00001694  4EB9 00001BDC            687          JSR     IMMEDIATE_EA   
0000169A  4EF8 1138                688          JMP     OP_FINISH
0000169E                           689          
0000169E                           690  HELPER_ORIL:
0000169E  4283                     691          CLR.L   D3
000016A0  163C 0004                692          MOVE.B   #4, D3
000016A4  16FC 004C                693          MOVE.B  #'L', (A3)+
000016A8                           694      
000016A8  4EB9 00001BDC            695          JSR     IMMEDIATE_EA     
000016AE  4EF8 1138                696          JMP     OP_FINISH
000016B2                           697  ;---------------------------------------------------
000016B2                           698  ; MOVEA . calling EA
000016B2                           699  ;-------------------------------------------------         
000016B2                           700  OP_MOVEAW: 
000016B2  16FC 0041                701          MOVE.B  #'A', (A3)+
000016B6  16FC 002E                702          MOVE.B  #'.', (A3)+
000016BA  16FC 0057                703          MOVE.B  #'W', (A3)+
000016BE                           704  
000016BE  4EB9 00001C38            705          JSR     MOVEA_EA
000016C4  4EF8 1138                706          JMP     OP_FINISH
000016C8                           707          
000016C8                           708  OP_MOVEAL: 
000016C8  16FC 0041                709          MOVE.B  #'A', (A3)+
000016CC  16FC 002E                710          MOVE.B  #'.', (A3)+
000016D0  16FC 004C                711          MOVE.B  #'L', (A3)+
000016D4                           712  
000016D4                           713          ; Call EA for MOVEA
000016D4  4EB9 00001C38            714          JSR     MOVEA_EA
000016DA  4EF8 1138                715          JMP     OP_FINISH
000016DE                           716     
000016DE                           717  ;---------------------------------------------------
000016DE                           718  ; LEA . calling EA
000016DE                           719  ;-------------------------------------------------        
000016DE                           720  OP_LEA: 
000016DE  16FC 004C                721          MOVE.B  #'L', (A3)+
000016E2  16FC 0045                722          MOVE.B  #'E', (A3)+
000016E6  16FC 0041                723          MOVE.B  #'A', (A3)+
000016EA                           724      
000016EA                           725          ; Long Size 
000016EA  4283                     726          CLR.L   D3
000016EC  163C 0004                727          MOVE.B   #4, D3
000016F0                           728         
000016F0                           729          ; Call EA for LEA 
000016F0  4EB9 00001D06            730          JSR     LEA_EA
000016F6  4EF8 1138                731          JMP     OP_FINISH
000016FA                           732          
000016FA                           733  ;---------------------------------------------------
000016FA                           734  ; MOVEM . calling EA and calculating instruct SIZE
000016FA                           735  ;-------------------------------------------------      
000016FA                           736  OP_MOVEM1: 
000016FA  16FC 004D                737          MOVE.B  #'M', (A3)+
000016FE  16FC 004F                738          MOVE.B  #'O', (A3)+
00001702  16FC 0056                739          MOVE.B  #'V', (A3)+
00001706  16FC 0045                740          MOVE.B  #'E', (A3)+
0000170A  16FC 004D                741          MOVE.B  #'M', (A3)+
0000170E  16FC 002E                742          MOVE.B  #'.', (A3)+
00001712                           743          
00001712  4284                     744          CLR.L   D4
00001714  183C 0001                745          MOVE.B   #1, D4
00001718                           746          
00001718  6000 0024                747          BRA     MOVEM_SIZE_CALC 
0000171C                           748  OP_MOVEM0: 
0000171C  16FC 004D                749          MOVE.B  #'M', (A3)+
00001720  16FC 004F                750          MOVE.B  #'O', (A3)+
00001724  16FC 0056                751          MOVE.B  #'V', (A3)+
00001728  16FC 0045                752          MOVE.B  #'E', (A3)+
0000172C  16FC 004D                753          MOVE.B  #'M', (A3)+
00001730  16FC 002E                754          MOVE.B  #'.', (A3)+    
00001734                           755          
00001734  4284                     756          CLR.L   D4
00001736  183C 0000                757          MOVE.B   #0, D4
0000173A                           758          
0000173A  6000 0002                759          BRA     MOVEM_SIZE_CALC  
0000173E                           760  
0000173E                           761  MOVEM_SIZE_CALC: 
0000173E  4281                     762          CLR.L   D1
00001740  2200                     763          MOVE.L  D0,D1               ; Current instruct word
00001742  0241 0040                764          ANDI.W  #$0040,D1         ; Extract S 
00001746  143C 0006                765          MOVE.B  #right6, D2         
0000174A  E469                     766          LSR.W   D2,D1               ; 
0000174C                           767          
0000174C  B23C 0000                768          CMP.B   #0, D1
00001750  6700 000A                769          BEQ     MOVEM_W
00001754                           770          
00001754  B23C 0001                771          CMP.B   #1, D1
00001758  6700 0016                772          BEQ     MOVEM_L
0000175C                           773          
0000175C                           774  MOVEM_W: 
0000175C  16FC 0057                775          MOVE.B  #'W', (A3)+
00001760  4283                     776          CLR.L   D3 
00001762  163C 0002                777          MOVE.B   #2,D3 
00001766                           778          
00001766                           779          ; CALL MOVEM EA
00001766  4EB9 00001C7A            780          JSR     MOVEM_EA
0000176C  4EF8 1138                781          JMP     OP_FINISH
00001770                           782          
00001770                           783  MOVEM_L: 
00001770  16FC 004C                784          MOVE.B  #'L', (A3)+
00001774  4283                     785          CLR.L   D3 
00001776  163C 0004                786          MOVE.B   #4,D3 
0000177A                           787          
0000177A                           788          ; CALL MOVEM EA 
0000177A  4EB9 00001C7A            789          JSR     MOVEM_EA
00001780  4EF8 1138                790          JMP     OP_FINISH       
00001784                           791  ;---------------------------------------------------
00001784                           792  ; NOP, RTS, RTE, STOP
00001784                           793  ;-------------------------------------------------      
00001784                           794  OP_NOP_RTS_RTE: 
00001784  4281                     795          CLR.L   D1
00001786  2200                     796          MOVE.L  D0,D1               ; Current instruct word
00001788                           797          
00001788                           798          ; Check third 3 nibble for 0111 if not error 
00001788  0241 0FF0                799          ANDI.W  #$0FF0, D1
0000178C  143C 0004                800          MOVE.B  #right4, D2         
00001790  E469                     801          LSR.W   D2,D1               ; D1 = 2nd nibble
00001792                           802          
00001792  B27C 0E70                803          CMP.W   #$E70, D1
00001796  6700 0434                804          BEQ     OP_ERROR
0000179A                           805          
0000179A  4281                     806          CLR.L   D1
0000179C  2200                     807          MOVE.L  D0,D1               ; Current instruct word
0000179E                           808          
0000179E                           809          ; Check last 4 bits 
0000179E  0241 000F                810          ANDI.W  #$000F, D1
000017A2                           811  
000017A2  B23C 0001                812          CMP.B   #1, D1       NOP --> 0001 
000017A6  6700 0020                813          BEQ     OP_NOP
000017AA                           814  
000017AA  B23C 0002                815          CMP.B   #2, D1       NOP --> 0001 
000017AE  6700 0028                816          BEQ     OP_STOP
000017B2                           817          
000017B2  B23C 0003                818          CMP.B   #3, D1      RTE --> 0011 
000017B6  6700 0034                819          BEQ     OP_RTE
000017BA                           820  
000017BA  B23C 0005                821          CMP.B   #5, D1      RTS --> 0101
000017BE  6700 003C                822          BEQ     OP_RTS       
000017C2                           823  
000017C2  4EF9 00001BCC            824          JMP     OP_ERROR    ERROR CODE
000017C8                           825  
000017C8                           826  OP_NOP: 
000017C8  16FC 004E                827          MOVE.B  #'N', (A3)+
000017CC  16FC 004F                828          MOVE.B  #'O', (A3)+
000017D0  16FC 0050                829          MOVE.B  #'P', (A3)+
000017D4                           830          
000017D4                           831          ; Loop back into OP Decode
000017D4  4EF8 1138                832          JMP     OP_FINISH
000017D8                           833  OP_STOP: 
000017D8  16FC 0053                834          MOVE.B  #'S', (A3)+
000017DC  16FC 0054                835          MOVE.B  #'T', (A3)+
000017E0  16FC 004F                836          MOVE.B  #'O', (A3)+
000017E4  16FC 0050                837          MOVE.B  #'P', (A3)+     
000017E8                           838  
000017E8  4EF8 1138                839          JMP     OP_FINISH   
000017EC                           840  OP_RTE: 
000017EC  16FC 0052                841          MOVE.B  #'R', (A3)+
000017F0  16FC 0054                842          MOVE.B  #'T', (A3)+
000017F4  16FC 0045                843          MOVE.B  #'E', (A3)+
000017F8                           844          
000017F8  4EF8 1138                845          JMP     OP_FINISH
000017FC                           846  OP_RTS: 
000017FC  16FC 0052                847          MOVE.B  #'R', (A3)+
00001800  16FC 0054                848          MOVE.B  #'T', (A3)+
00001804  16FC 0053                849          MOVE.B  #'S', (A3)+
00001808                           850          
00001808  4EF8 1138                851          JMP     OP_FINISH
0000180C                           852          
0000180C                           853  ;---------------------------------------------------
0000180C                           854  ; SUBQ and ADDQ. Gathering instruct size and calling EA
0000180C                           855  ;-------------------------------------------------        
0000180C                           856  OP_SUBQ: 
0000180C  16FC 0053                857          MOVE.B  #'S', (A3)+
00001810  16FC 0055                858          MOVE.B  #'U', (A3)+
00001814  16FC 0042                859          MOVE.B  #'B', (A3)+
00001818  16FC 0051                860          MOVE.B  #'Q', (A3)+
0000181C  16FC 002E                861          MOVE.B  #'.', (A3)+         
00001820  4EF9 00001840            862          JMP     HELPER__ADDSUBQ_SIZE_CAL      
00001826                           863          
00001826                           864          
00001826                           865  OP_ADDQ:    
00001826  16FC 0041                866          MOVE.B  #'A', (A3)+
0000182A  16FC 0044                867          MOVE.B  #'D', (A3)+
0000182E  16FC 0044                868          MOVE.B  #'D', (A3)+
00001832  16FC 0051                869          MOVE.B  #'Q', (A3)+
00001836  16FC 002E                870          MOVE.B  #'.', (A3)+         
0000183A  4EF9 00001840            871          JMP     HELPER__ADDSUBQ_SIZE_CAL
00001840                           872  
00001840                           873  HELPER__ADDSUBQ_SIZE_CAL:
00001840  4281                     874          CLR.L   D1 
00001842  2200                     875          MOVE.L  D0,D1               ; Current instruct word
00001844  0241 00C0                876          ANDI.W  #size,D1         ; Extract 2nd nibble
00001848  143C 0006                877          MOVE.B  #right6, D2         
0000184C  E469                     878          LSR.W   D2,D1               ; D1 = 2nd nibble
0000184E                           879          
0000184E  4283                     880          CLR.L   D3
00001850  1601                     881          MOVE.B   D1, D3  
00001852                           882  
00001852  B63C 0002                883          CMP.B   #2, D3
00001856  6700 0012                884          BEQ     HELPER_ADDSUBQ_CONVERT_L
0000185A                           885          
0000185A  B63C 0001                886          CMP.B   #1, D3
0000185E  6700 001E                887          BEQ     HELPER_ADDSUBQ_CONVERT_W
00001862                           888          
00001862  B63C 0000                889          CMP.B   #0, D3   
00001866  6700 002A                890          BEQ     HELPER_ADDSUBQ_CONVERT_B
0000186A                           891          
0000186A                           892  HELPER_ADDSUBQ_CONVERT_L: 
0000186A  4283                     893          CLR.L   D3
0000186C  163C 0004                894          MOVE.B  #4, D3 
00001870  16FC 004C                895          MOVE.B  #'L', (A3)+   
00001874                           896          
00001874                           897          ; CALL EA 
00001874  4EB9 00001E0E            898          JSR     ADDQ_EA
0000187A  4EF8 1138                899          JMP     OP_FINISH
0000187E                           900          
0000187E                           901  HELPER_ADDSUBQ_CONVERT_W: 
0000187E  4283                     902          CLR.L   D3
00001880  163C 0002                903          MOVE.B  #2, D3 
00001884  16FC 0057                904          MOVE.B  #'W', (A3)+   
00001888                           905          
00001888                           906          ; CALL EA
00001888  4EB9 00001E0E            907          JSR     ADDQ_EA
0000188E  4EF8 1138                908          JMP     OP_FINISH  
00001892                           909        
00001892                           910  HELPER_ADDSUBQ_CONVERT_B: 
00001892  4283                     911          CLR.L   D3
00001894  163C 0001                912          MOVE.B  #1, D3 
00001898  16FC 0042                913          MOVE.B  #'B', (A3)+ 
0000189C                           914          
0000189C                           915          ; CALL EA  
0000189C  4EB9 00001E0E            916          JSR     ADDQ_EA
000018A2  4EF8 1138                917          JMP     OP_FINISH
000018A6                           918  ;---------------------------------------------------
000018A6                           919  ; SUB. Gathering instruct size and calling EA
000018A6                           920  ;-------------------------------------------------  
000018A6                           921  OP_SUB:
000018A6  4EF9 000018AC            922          JMP     HELPER_SUB_SIZE_CAL
000018AC                           923  
000018AC                           924  HELPER_SUB_SIZE_CAL:
000018AC  4281                     925          CLR.L   D1 
000018AE  2200                     926          MOVE.L  D0,D1               ; Current instruct word
000018B0  0241 00C0                927          ANDI.W  #size,D1         ; Extract 2nd nibble
000018B4  143C 0006                928          MOVE.B  #right6, D2         
000018B8  E469                     929          LSR.W   D2,D1               ; D1 = 2nd nibble
000018BA                           930          
000018BA  4283                     931          CLR.L   D3
000018BC  1601                     932          MOVE.B   D1, D3  
000018BE                           933  
000018BE  B63C 0002                934          CMP.B   #2, D3
000018C2  6700 0012                935          BEQ     HELPER_SUB_CONVERT_L
000018C6                           936          
000018C6  B63C 0001                937          CMP.B   #1, D3
000018CA  6700 001E                938          BEQ     HELPER_SUB_CONVERT_W
000018CE                           939          
000018CE  B63C 0000                940          CMP.B   #0, D3   
000018D2  6700 002A                941          BEQ     HELPER_SUB_CONVERT_B
000018D6                           942          
000018D6                           943  HELPER_SUB_CONVERT_L: 
000018D6  4283                     944          CLR.L   D3
000018D8  163C 0004                945          MOVE.B  #4, D3 
000018DC  16FC 004C                946          MOVE.B  #'L', (A3)+   
000018E0                           947  
000018E0                           948          ; CALL EA  
000018E0  4EB9 00001DDC            949          JSR     SUB_EA
000018E6  4EF8 1138                950          JMP     OP_FINISH  
000018EA                           951          
000018EA                           952  HELPER_SUB_CONVERT_W: 
000018EA  4283                     953          CLR.L   D3
000018EC  163C 0002                954          MOVE.B  #2, D3 
000018F0  16FC 0057                955          MOVE.B  #'W', (A3)+   
000018F4                           956  
000018F4                           957          ; CALL EA
000018F4  4EB9 00001DDC            958          JSR     SUB_EA
000018FA  4EF8 1138                959          JMP     OP_FINISH  
000018FE                           960          
000018FE                           961  HELPER_SUB_CONVERT_B: 
000018FE  4283                     962          CLR.L   D3
00001900  163C 0001                963          MOVE.B  #1, D3 
00001904  16FC 0042                964          MOVE.B  #'B', (A3)+   
00001908                           965  
00001908                           966          ; CALL EA
00001908  4EB9 00001DDC            967          JSR     SUB_EA
0000190E  4EF8 1138                968          JMP     OP_FINISH    
00001912                           969        
00001912                           970  ;---------------------------------------------------
00001912                           971  ; ADDA. Gathering instruct size and calling EA
00001912                           972  ;-------------------------------------------------       
00001912                           973  OP_ADDA: 
00001912  16FC 0041                974          MOVE.B  #'A', (A3)+
00001916  16FC 0044                975          MOVE.B  #'D', (A3)+
0000191A  16FC 0044                976          MOVE.B  #'D', (A3)+
0000191E  16FC 0041                977          MOVE.B  #'A', (A3)+
00001922  16FC 002E                978          MOVE.B  #'.', (A3)+
00001926                           979          
00001926                           980          ; Calculate instruct size
00001926  4281                     981          CLR.L   D1
00001928  2200                     982          MOVE.L  D0,D1               ; Current instruct word
0000192A  0241 0100                983          ANDI.W  #$100,D1         ; Extract 2nd nibble
0000192E  143C 0008                984          MOVE.B  #right8, D2         
00001932  E469                     985          LSR.W   D2,D1               ; 
00001934                           986          
00001934  B23C 0001                987          CMP.B   #1, D1
00001938  6700 0006                988          BEQ     HELPER_ADDA_L
0000193C  6600 0016                989          BNE     HELPER_ADDA_W
00001940                           990          ; EA Calculator 
00001940                           991  HELPER_ADDA_L: 
00001940  4283                     992          CLR.L   D3
00001942  163C 0004                993          MOVE.B   #4, D3 
00001946  16FC 004C                994          MOVE.B   #'L', (A3)+
0000194A                           995          
0000194A                           996          ;CALL EA
0000194A  4EB9 00001ED4            997          JSR     ADDA_EA
00001950  4EF8 1138                998          JMP     OP_FINISH 
00001954                           999          
00001954                          1000  HELPER_ADDA_W: 
00001954  4283                    1001          CLR.L   D3
00001956  163C 0002               1002          MOVE.B  #2, D3 
0000195A  16FC 0057               1003          MOVE.B  #'W', (A3)+
0000195E                          1004  
0000195E                          1005          ;CALL EA
0000195E  4EB9 00001ED4           1006          JSR     ADDA_EA
00001964  4EF8 1138               1007          JMP     OP_FINISH 
00001968                          1008  ;---------------------------------------------------
00001968                          1009  ; ADD. Gathering instruct size and calling EA
00001968                          1010  ;-------------------------------------------------       
00001968                          1011  OP_ADD: 
00001968  16FC 0041               1012          MOVE.B  #'A', (A3)+
0000196C  16FC 0044               1013          MOVE.B  #'D', (A3)+
00001970  16FC 0044               1014          MOVE.B  #'D', (A3)+
00001974  16FC 002E               1015          MOVE.B  #'.', (A3)+
00001978                          1016          
00001978                          1017          ; Calculate instruct size
00001978                          1018          
00001978                          1019  HELPER_ADD_SIZE_CAL:
00001978  4281                    1020          CLR.L   D1 
0000197A  2200                    1021          MOVE.L  D0,D1               ; Current instruct word
0000197C  0241 00C0               1022          ANDI.W  #size,D1         ; Extract 2nd nibble
00001980  143C 0006               1023          MOVE.B  #right6, D2         
00001984  E469                    1024          LSR.W   D2,D1               ; 
00001986                          1025          
00001986  4283                    1026          CLR.L   D3
00001988  1601                    1027          MOVE.B   D1, D3  
0000198A                          1028  
0000198A  B63C 0002               1029          CMP.B   #2, D3
0000198E  6700 0012               1030          BEQ     HELPER_ADD_CONVERT_L
00001992                          1031          
00001992  B63C 0001               1032          CMP.B   #1, D3
00001996  6700 001E               1033          BEQ     HELPER_ADD_CONVERT_W
0000199A                          1034          
0000199A  B63C 0000               1035          CMP.B   #0, D3   
0000199E  6700 002A               1036          BEQ     HELPER_ADD_CONVERT_B
000019A2                          1037                  
000019A2                          1038  HELPER_ADD_CONVERT_L: 
000019A2  4283                    1039          CLR.L   D3
000019A4  163C 0004               1040          MOVE.B  #4, D3 
000019A8  16FC 004C               1041          MOVE.B  #'L', (A3)+   
000019AC                          1042  
000019AC                          1043          ; CALL EA  
000019AC  4EB9 00001ECE           1044          JSR     ADD_EA
000019B2  4EF8 1138               1045          JMP     OP_FINISH 
000019B6                          1046          
000019B6                          1047  HELPER_ADD_CONVERT_W: 
000019B6  4283                    1048          CLR.L   D3
000019B8  163C 0002               1049          MOVE.B  #2, D3 
000019BC  16FC 0057               1050          MOVE.B  #'W', (A3)+   
000019C0                          1051  
000019C0                          1052          ; CALL EA
000019C0  4EB9 00001ECE           1053          JSR     ADD_EA
000019C6  4EF8 1138               1054          JMP     OP_FINISH
000019CA                          1055          
000019CA                          1056  HELPER_ADD_CONVERT_B: 
000019CA  4283                    1057          CLR.L   D3
000019CC  163C 0001               1058          MOVE.B  #1, D3 
000019D0  16FC 0042               1059          MOVE.B  #'B', (A3)+   
000019D4                          1060  
000019D4                          1061          ; CALL EA
000019D4  4EB9 00001ECE           1062          JSR     ADD_EA
000019DA  4EF8 1138               1063          JMP     OP_FINISH             
000019DE                          1064  ;---------------------------------------------------
000019DE                          1065  ; BSR. Gathering instruct size and calling EA
000019DE                          1066  ;-------------------------------------------------         
000019DE                          1067  OP_BSR:    
000019DE  16FC 0042               1068          MOVE.B  #'B', (A3)+
000019E2  16FC 0053               1069          MOVE.B  #'S', (A3)+
000019E6  16FC 0052               1070          MOVE.B  #'R', (A3)+
000019EA                          1071   
000019EA  4EB9 00001D48           1072          JSR     BSR_EA
000019F0  4EF8 1138               1073          JMP     OP_FINISH
000019F4                          1074          
000019F4                          1075  ;---------------------------------------------------
000019F4                          1076  ; BRA   Check. Gathering instruct size and calling EA
000019F4                          1077  ;------------------------------------------------- 
000019F4                          1078  OP_BRA:    
000019F4  16FC 0042               1079          MOVE.B  #'B', (A3)+
000019F8  16FC 0052               1080          MOVE.B  #'R', (A3)+
000019FC  16FC 0041               1081          MOVE.B  #'A', (A3)+
00001A00                          1082       
00001A00                          1083          ; Call BRA EA 
00001A00  4EB9 00001D42           1084          JSR     BRA_EA
00001A06  4EF8 1138               1085          JMP     OP_FINISH
00001A0A                          1086          
00001A0A                          1087  ;---------------------------------------------------
00001A0A                          1088  ; MULU  calling EA
00001A0A                          1089  ;------------------------------------------------- 
00001A0A                          1090  OP_MULU: 
00001A0A  16FC 0055               1091          MOVE.B  #'U', (A3)+
00001A0E                          1092  
00001A0E                          1093          ; Call EA
00001A0E  4EB9 00001E94           1094          JSR     MULU_EA
00001A14  4EF8 1138               1095          JMP     OP_FINISH
00001A18                          1096  
00001A18                          1097  ;---------------------------------------------------
00001A18                          1098  ; MULS  calling EA
00001A18                          1099  ;------------------------------------------------- 
00001A18                          1100  OP_MULS: 
00001A18  16FC 0053               1101          MOVE.B  #'S', (A3)+
00001A1C                          1102  
00001A1C                          1103          ; Call EA
00001A1C  4EB9 00001E94           1104          JSR     MULU_EA
00001A22  4EF8 1138               1105          JMP     OP_FINISH        
00001A26                          1106          
00001A26                          1107  ;---------------------------------------------------
00001A26                          1108  ; DIVS   calling EA
00001A26                          1109  ;------------------------------------------------- 
00001A26                          1110  OP_DIVS: 
00001A26  16FC 0044               1111          MOVE.B  #'D', (A3)+
00001A2A  16FC 0049               1112          MOVE.B  #'I', (A3)+
00001A2E  16FC 0056               1113          MOVE.B  #'V', (A3)+
00001A32  16FC 0053               1114          MOVE.B  #'S', (A3)+
00001A36                          1115          
00001A36                          1116          ; Call EA
00001A36  4EB9 00001DA0           1117          JSR     DIVS_EA
00001A3C  4EF8 1138               1118          JMP     OP_FINISH
00001A40                          1119  ;---------------------------------------------------
00001A40                          1120  ; DIVU   calling EA
00001A40                          1121  ;------------------------------------------------- 
00001A40                          1122  OP_DIVU:
00001A40  16FC 0044               1123          MOVE.B  #'D', (A3)+
00001A44  16FC 0049               1124          MOVE.B  #'I', (A3)+
00001A48  16FC 0056               1125          MOVE.B  #'V', (A3)+
00001A4C  16FC 0055               1126          MOVE.B  #'U', (A3)+
00001A50                          1127          
00001A50                          1128          ; Call EA
00001A50  4EB9 00001D9A           1129          JSR     DIVU_EA
00001A56  4EF8 1138               1130          JMP     OP_FINISH
00001A5A                          1131  ;------------------------------------------------
00001A5A                          1132  ; CMP   calling EA and finding size
00001A5A                          1133  ;------------------------------------------------ 
00001A5A                          1134  OP_CMP: 
00001A5A  4EF9 00001A60           1135        JMP   HELPER_CMP_SIZE_CAL   
00001A60                          1136       
00001A60                          1137  HELPER_CMP_SIZE_CAL:         
00001A60  4283                    1138          CLR.L   D3
00001A62  1601                    1139          MOVE.B   D1, D3  
00001A64                          1140  
00001A64  B63C 0002               1141          CMP.B   #2, D3
00001A68  6700 0012               1142          BEQ     HELPER_CMP_CONVERT_L
00001A6C                          1143          
00001A6C  B63C 0001               1144          CMP.B   #1, D3
00001A70  6700 001E               1145          BEQ     HELPER_CMP_CONVERT_W
00001A74                          1146          
00001A74  B63C 0000               1147          CMP.B   #0, D3   
00001A78  6700 002A               1148          BEQ     HELPER_CMP_CONVERT_B
00001A7C                          1149          
00001A7C                          1150  HELPER_CMP_CONVERT_L: 
00001A7C  4283                    1151          CLR.L   D3
00001A7E  163C 0004               1152          MOVE.B  #4, D3 
00001A82  16FC 004C               1153          MOVE.B  #'L', (A3)+   
00001A86                          1154          ; CALL EA   
00001A86  4EB9 00001E5A           1155          JSR     CMP_EA
00001A8C  4EF8 1138               1156          JMP     OP_FINISH
00001A90                          1157          
00001A90                          1158  HELPER_CMP_CONVERT_W: 
00001A90  4283                    1159          CLR.L   D3
00001A92  163C 0002               1160          MOVE.B  #2, D3 
00001A96  16FC 0057               1161          MOVE.B  #'W', (A3)+   
00001A9A                          1162          ; CALL EA
00001A9A  4EB9 00001E5A           1163          JSR     CMP_EA
00001AA0  4EF8 1138               1164          JMP     OP_FINISH
00001AA4                          1165          
00001AA4                          1166  HELPER_CMP_CONVERT_B: 
00001AA4  4283                    1167          CLR.L   D3
00001AA6  163C 0001               1168          MOVE.B  #1, D3 
00001AAA  16FC 0042               1169          MOVE.B  #'B', (A3)+ 
00001AAE                          1170    
00001AAE                          1171          ; CALL EA
00001AAE  4EB9 00001E5A           1172          JSR     CMP_EA
00001AB4  4EF8 1138               1173          JMP     OP_FINISH
00001AB8                          1174  
00001AB8                          1175  ;---------------------------------------------------
00001AB8                          1176  ; ASL   Memory Shift only word size 
00001AB8                          1177  ;-------------------------------------------------             
00001AB8                          1178  OP_ASL_M: 
00001AB8  16FC 0041               1179          MOVE.B  #'A', (A3)+
00001ABC  16FC 0053               1180          MOVE.B  #'S', (A3)+
00001AC0  16FC 004C               1181          MOVE.B  #'L', (A3)+ 
00001AC4  4283                    1182          CLR.L   D3
00001AC6  163C 0002               1183          MOVE.B  #2, D3 
00001ACA                          1184          ; Get ready to call Mode 7 subclass 1
00001ACA                          1185          
00001ACA  4EB9 00001F10           1186          JSR     ASL_EA
00001AD0  4EF8 1138               1187          JMP     OP_FINISH
00001AD4                          1188  ;---------------------------------------------------
00001AD4                          1189  ; ASR    Memory Shift only word size 
00001AD4                          1190  ;------------------------------------------------- 
00001AD4                          1191  OP_ASR_M: 
00001AD4  16FC 0041               1192          MOVE.B  #'A', (A3)+
00001AD8  16FC 0053               1193          MOVE.B  #'S', (A3)+
00001ADC  16FC 0052               1194          MOVE.B  #'R', (A3)+ 
00001AE0                          1195          
00001AE0  4283                    1196          CLR.L   D3
00001AE2  163C 0002               1197          MOVE.B  #2, D3 
00001AE6                          1198          ; Get ready to call Mode 7 subclass 1
00001AE6                          1199          
00001AE6  4EB9 00001F10           1200          JSR     ASL_EA
00001AEC  4EF8 1138               1201          JMP     OP_FINISH
00001AF0                          1202  *-------------------------------------------------
00001AF0                          1203  *  Rotation Checker, Mainly looking for ASL/ASR
00001AF0                          1204  *------------------------------------------------        
00001AF0                          1205  OP_ROTATION_CHECK: 
00001AF0                          1206         ; Check the 4 - 5 bit for 00 
00001AF0  4281                    1207          CLR.L   D1 
00001AF2  2200                    1208          MOVE.L  D0,D1               ; Current instruct word
00001AF4  0241 0018               1209          ANDI.W  #$18,D1         ; Extract 2nd nibble
00001AF8  143C 0003               1210          MOVE.B  #3, D2         
00001AFC  E469                    1211          LSR.W   D2,D1    
00001AFE                          1212          
00001AFE  B23C 0000               1213          CMP.B   #0, D1      ; AS
00001B02  6700 001A               1214          BEQ     OP_ROTATION_HELP
00001B06                          1215          
00001B06  B23C 0001               1216          CMP.B   #1, D1      ; LS
00001B0A  6700 00B0               1217          BEQ     OP_UNSUPPORTED
00001B0E                          1218  
00001B0E  B23C 0002               1219          CMP.B   #2, D1      ; ROXd
00001B12  6700 00A8               1220          BEQ     OP_UNSUPPORTED
00001B16                          1221          
00001B16  B23C 0003               1222          CMP.B   #3, D1      ; ROXd
00001B1A  6700 00A0               1223          BEQ     OP_UNSUPPORTED   
00001B1E                          1224   
00001B1E                          1225  OP_ROTATION_HELP: 
00001B1E                          1226          ; Find the Rotation 
00001B1E                          1227          ; Extract the size 
00001B1E  4281                    1228          CLR.L   D1 
00001B20  2200                    1229          MOVE.L  D0,D1               ; Current instruct word
00001B22  0241 0100               1230          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001B26  143C 0008               1231          MOVE.B  #right8, D2             
00001B2A  E469                    1232          LSR.W   D2,D1  
00001B2C                          1233  
00001B2C  B23C 0000               1234          CMP.B   #0, D1      ; Right Rotation 
00001B30  6700 007A               1235          BEQ     OP_ASR_ADDER
00001B34                          1236          
00001B34  B23C 0001               1237          CMP.B   #1, D1      ; Left rotation
00001B38  6700 0062               1238          BEQ     OP_ASL_ADDER
00001B3C                          1239          
00001B3C                          1240  OP_ROTATION_SIZE_HELP:        
00001B3C                          1241          ; Check the size 
00001B3C  B63C 0002               1242          CMP.B   #2, D3
00001B40  6700 0042               1243          BEQ     OP_ROTATION_SIZE_L    
00001B44                          1244          
00001B44  B63C 0001               1245          CMP.B   #1, D3
00001B48  6700 0022               1246          BEQ     OP_ROTATION_SIZE_W   
00001B4C                          1247          
00001B4C  B63C 0000               1248          CMP.B   #0, D3
00001B50  6700 0002               1249          BEQ     OP_ROTATION_SIZE_B 
00001B54                          1250          
00001B54                          1251          
00001B54                          1252  OP_ROTATION_SIZE_B: 
00001B54  4283                    1253          CLR.L   D3
00001B56  163C 0001               1254          MOVE.B  #1, D3     
00001B5A  16FC 002E               1255          MOVE.B  #'.', (A3)+
00001B5E  16FC 0042               1256          MOVE.B  #'B', (A3)+
00001B62                          1257          
00001B62  4EB9 00001F10           1258          JSR     ASL_EA
00001B68  4EF8 1138               1259          JMP     OP_FINISH
00001B6C                          1260          
00001B6C                          1261  OP_ROTATION_SIZE_W: 
00001B6C  4283                    1262          CLR.L   D3
00001B6E  163C 0002               1263          MOVE.B  #2, D3 
00001B72  16FC 002E               1264          MOVE.B  #'.', (A3)+
00001B76  16FC 0057               1265          MOVE.B  #'W', (A3)+
00001B7A                          1266          
00001B7A  4EB9 00001F10           1267          JSR     ASL_EA
00001B80  4EF8 1138               1268          JMP     OP_FINISH
00001B84                          1269          
00001B84                          1270  OP_ROTATION_SIZE_L:
00001B84  4283                    1271          CLR.L   D3
00001B86  163C 0004               1272          MOVE.B  #4, D3  
00001B8A  16FC 002E               1273          MOVE.B  #'.', (A3)+
00001B8E  16FC 004C               1274          MOVE.B  #'L', (A3)+
00001B92                          1275          
00001B92  4EB9 00001F10           1276          JSR     ASL_EA
00001B98  4EF8 1138               1277          JMP     OP_FINISH
00001B9C                          1278          
00001B9C                          1279  OP_ASL_ADDER: 
00001B9C  16FC 0041               1280          MOVE.B  #'A', (A3)+
00001BA0  16FC 0053               1281          MOVE.B  #'S', (A3)+
00001BA4  16FC 004C               1282          MOVE.B  #'L', (A3)+    
00001BA8                          1283          
00001BA8  4EF8 1B3C               1284          JMP     OP_ROTATION_SIZE_HELP 
00001BAC                          1285          
00001BAC                          1286  OP_ASR_ADDER: 
00001BAC  16FC 0041               1287          MOVE.B  #'A', (A3)+
00001BB0  16FC 0053               1288          MOVE.B  #'S', (A3)+
00001BB4  16FC 0052               1289          MOVE.B  #'R', (A3)+    
00001BB8                          1290          
00001BB8  4EF8 1B3C               1291          JMP     OP_ROTATION_SIZE_HELP  
00001BBC                          1292  ;--------------------------------------------------
00001BBC                          1293  ; Error Handling    
00001BBC                          1294  ;------------------------------------------------- 
00001BBC                          1295  OP_UNSUPPORTED: 
00001BBC  43F9 00002712           1296          LEA     DECODE_OP_UNSUPPORT, A1
00001BC2  103C 000E               1297          MOVE.B  #task14,D0
00001BC6  4E4F                    1298          TRAP    #15           Display  Error Message
00001BC8  4EF8 1018               1299          JMP     RESTART_PROGRAM
00001BCC                          1300          
00001BCC                          1301  OP_ERROR: 
00001BCC  43F9 0000269D           1302          LEA     DECODE_OP_ERROR, A1
00001BD2  103C 000E               1303          MOVE.B  #task14,D0
00001BD6  4E4F                    1304          TRAP    #15           Display  Error Message
00001BD8  4EF8 1018               1305          JMP     RESTART_PROGRAM
00001BDC                          1306                
00001BDC                          1307  ;--------------------------------------------------
00001BDC                          1308  ; Effective Address Start   
00001BDC                          1309  ;------------------------------------------------- 
00001BDC                          1310  
00001BDC                          1311  ;----------------------------------------------
00001BDC                          1312  ;IMMEDIATE_EA for ORI,ANDI,SUBI,ADDI
00001BDC                          1313      *D3 = # of ITOA Loop ITERATION
00001BDC                          1314      *D1 = size of instruct
00001BDC                          1315      *D0 = Shift Data
00001BDC                          1316      *D5 = Mode
00001BDC                          1317      *D6 = Register
00001BDC                          1318      *D7 = current immediate data
00001BDC                          1319  ;----------------------------------------------    
00001BDC                          1320  IMMEDIATE_EA
00001BDC                          1321          ; Extract dst mode and register
00001BDC  4EB9 00001C28           1322          JSR     MOVE_IMM_DATA
00001BE2                          1323          
00001BE2  4286                    1324          CLR.L   D6
00001BE4  4285                    1325          CLR.L   D5
00001BE6  2C00                    1326          MOVE.L  D0,D6               ; Current Instruct word Register    
00001BE8  2A00                    1327          MOVE.L  D0,D5               ; Current instruct word Mode
00001BEA                          1328          
00001BEA  0246 0007               1329          ANDI.W  #$7,D6              ; Gets the Register
00001BEE                          1330          
00001BEE  0245 0038               1331          ANDI.W  #$38,D5              
00001BF2  103C 0003               1332          MOVE.B  #$3, D0            
00001BF6  E06D                    1333          LSR.W   D0,D5               ; Extract the Mode      
00001BF8                          1334           
00001BF8  BA3C 0001               1335          CMP.B   #1, D5          ; Check for valid dst 
00001BFC  6700 06EE               1336          BEQ     DATA_ERROR    
00001C00                          1337          
00001C00  1203                    1338          MOVE.B  D3,D1           ; Size Instruct 
00001C02  C6FC 0002               1339          MULU    #2, D3          ; Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
00001C06                          1340   
00001C06  16FC 0020               1341          MOVE.B  #' ', (A3)+
00001C0A  16FC 0023               1342          MOVE.B  #'#', (A3)+
00001C0E  16FC 0024               1343          MOVE.B  #'$', (A3)+
00001C12                          1344          
00001C12                          1345          ; Call ITOA 
00001C12  4EB9 0000230C           1346          JSR     ITOA
00001C18                          1347          
00001C18  16FC 002C               1348          MOVE.B  #',', (A3)+
00001C1C  16FC 0020               1349          MOVE.B  #' ', (A3)+
00001C20                          1350          
00001C20  4EB9 00001FD0           1351          JSR     EA_DECODER
00001C26  4E75                    1352          RTS
00001C28                          1353          
00001C28                          1354  MOVE_IMM_DATA: 
00001C28  B63C 0002               1355          CMP.B   #2, D3
00001C2C  6700 0006               1356          BEQ     SHIFT16
00001C30                          1357          
00001C30  2E1D                    1358          MOVE.L  (A5)+, D7
00001C32  4E75                    1359          RTS
00001C34                          1360          
00001C34                          1361  SHIFT16: 
00001C34  3E1D                    1362          MOVE.W  (A5)+, D7
00001C36  4E75                    1363          RTS
00001C38                          1364  
00001C38                          1365          
00001C38                          1366  MOVEA_EA
00001C38                          1367          ;This is the same as MOVE, just that first operand is for sure an address.
00001C38  4EF9 00001C3E           1368          JMP MOVE_EA
00001C3E                          1369  
00001C3E                          1370  MOVE_EA
00001C3E  2A00                    1371          MOVE.L D0, D5
00001C40  2C00                    1372          MOVE.L D0, D6
00001C42                          1373          
00001C42                          1374          ;and off mode
00001C42  0245 0038               1375          ANDI #56, D5
00001C46  E685                    1376          ASR.L #3, D5
00001C48                          1377          ;and off data
00001C48  0246 0007               1378          ANDI #7, D6
00001C4C  4EB9 00001FD0           1379          JSR EA_DECODER
00001C52                          1380      
00001C52  16FC 002C               1381          MOVE.B #',', (A3)+
00001C56                          1382          ;Reset D5 and D6 just in case.
00001C56  4285                    1383          CLR.L D5
00001C58  4286                    1384          CLR.L D6
00001C5A                          1385          ;Second argument, set D4
00001C5A  383C 0001               1386          MOVE #1, D4
00001C5E                          1387      
00001C5E                          1388          ; Grab the other mode
00001C5E  2A00                    1389          MOVE.L D0, D5
00001C60  2C00                    1390          MOVE.L D0, D6
00001C62                          1391      
00001C62                          1392          ;and off mode
00001C62  0245 01C0               1393          ANDI #448, D5
00001C66  EC85                    1394          ASR.L #6, D5
00001C68                          1395          ;and off data
00001C68  0246 0E00               1396          ANDI #3584, D6
00001C6C  E086                    1397          ASR.L #8, D6
00001C6E  E286                    1398          ASR.L #1, D6
00001C70  4EB9 00001FD0           1399          JSR EA_DECODER
00001C76                          1400          
00001C76                          1401          ;Clear D4
00001C76  4284                    1402          CLR.L D4
00001C78                          1403          
00001C78  4E75                    1404          RTS
00001C7A                          1405  
00001C7A                          1406  MOVEM_EA
00001C7A                          1407          ; Extract the mode and register
00001C7A  4285                    1408          CLR.L   D5
00001C7C  4286                    1409          CLR.L   D6
00001C7E                          1410          
00001C7E  2A00                    1411          MOVE.L D0, D5
00001C80  2C00                    1412          MOVE.L D0, D6
00001C82                          1413          
00001C82  0246 0007               1414          ANDI #7, D6
00001C86  0245 0038               1415          ANDI #56, D5
00001C8A  E685                    1416          ASR.L #3, D5
00001C8C                          1417              
00001C8C                          1418          ; Call the right mode to fix 
00001C8C  BC3C 0002               1419          CMP.B   #2, D6              ; Error Handling for wrong modes
00001C90  6D00 066A               1420          BLT     DATA_UNSUPPORTED   
00001C94                          1421          
00001C94  4EB9 00001FD0           1422          JSR EA_DECODER
00001C9A                          1423          
00001C9A  B87C 0000               1424          CMP #0, D4
00001C9E  6700 000A               1425          BEQ MOVEM_REG_TO_MEM
00001CA2                          1426          
00001CA2  B87C 0001               1427          CMP #1, D4
00001CA6  6700 0010               1428          BEQ MOVEM_POST      ; Mem To Register
00001CAA                          1429          
00001CAA                          1430  MOVEM_REG_TO_MEM
00001CAA  BA7C 0004               1431          CMP.W   #4, D5      ; Register List Mask is flipped
00001CAE  6700 001E               1432          BEQ     MOVEM_PRE
00001CB2  4EF9 00001CB8           1433          JMP     MOVEM_POST  
00001CB8                          1434  
00001CB8                          1435  *---------------------------------
00001CB8                          1436  *   D6 = Set Address
00001CB8                          1437  *   D5 = Loop Counter (16 Shifts) 
00001CB8                          1438  *   D4 = even = Address, odd = Data Register 
00001CB8                          1439  *---------------------------------
00001CB8                          1440  ; Mode 3        
00001CB8                          1441  MOVEM_POST
00001CB8  3E1D                    1442          MOVE.W  (A5)+, D7
00001CBA                          1443          
00001CBA                          1444  MOVE_POST_LOOP        
00001CBA  BA3C 0010               1445          CMP.B   #16, D5
00001CBE  6700 0010               1446          BEQ     MOVEM_FINISH
00001CC2                          1447          
00001CC2  BA3C 0008               1448          CMP.B   #8, D5
00001CC6  6700 0004               1449          BEQ     MOVEM_SWITCH
00001CCA                          1450          
00001CCA  5206                    1451          ADD.B   #1, D6
00001CCC                          1452  
00001CCC                          1453  MOVEM_SWITCH:
00001CCC  4286                    1454          CLR.L   D6
00001CCE                          1455          ; Even num = address
00001CCE                          1456  
00001CCE                          1457          ; Odd num  = data register          
00001CCE                          1458  
00001CCE                          1459  
00001CCE                          1460  
00001CCE                          1461  
00001CCE                          1462  ; Mode 4
00001CCE                          1463  MOVEM_PRE
00001CCE  3E1D                    1464          MOVE.W  (A5)+, D7
00001CD0                          1465  
00001CD0                          1466  MOVEM_FINISH:
00001CD0  4E75                    1467          RTS
00001CD2                          1468  
00001CD2                          1469          
00001CD2                          1470  MOVEQ_EA
00001CD2  2A00                    1471          MOVE.L D0, D5
00001CD4  2C00                    1472          MOVE.L D0, D6
00001CD6                          1473      
00001CD6                          1474          ;set mode to immediate
00001CD6  303C 0007               1475          MOVE #7, D0
00001CDA                          1476          ;and off data
00001CDA  0247 00FF               1477          ANDI #255, D7
00001CDE  4EB9 00001FC4           1478          JSR EA_PRINT_IMMEDIATE_NUMBER
00001CE4                          1479      
00001CE4  16FC 002C               1480          MOVE.B #',', (A3)+
00001CE8                          1481          ;Reset D6 just in case.
00001CE8  4286                    1482          CLR.L D6
00001CEA                          1483          ;Second argument, set D4
00001CEA  383C 0001               1484          MOVE #1, D4
00001CEE                          1485  
00001CEE  2A00                    1486          MOVE.L D0, D5
00001CF0  2C00                    1487          MOVE.L D0, D6
00001CF2                          1488      
00001CF2                          1489          ;set mode to data register
00001CF2  4285                    1490          CLR.L D5
00001CF4                          1491          ;and off data
00001CF4  0246 0E00               1492          ANDI #3584, D6
00001CF8  E086                    1493          ASR.L #8, D6
00001CFA  E286                    1494          ASR.L #1, D6
00001CFC  4EB9 00001FD0           1495          JSR EA_DECODER
00001D02                          1496          
00001D02                          1497          ;Reset D4
00001D02  4284                    1498          CLR.L D4
00001D04                          1499          
00001D04  4E75                    1500          RTS
00001D06                          1501  
00001D06                          1502  LEA_EA
00001D06  2A00                    1503          MOVE.L D0, D5
00001D08  2C00                    1504          MOVE.L D0, D6
00001D0A                          1505      
00001D0A                          1506          ;and off mode
00001D0A  0245 01C0               1507          ANDI #448, D5
00001D0E  EC85                    1508          ASR.L #6, D5
00001D10                          1509          ;and off data
00001D10  0246 0E00               1510          ANDI #3584, D6
00001D14  E086                    1511          ASR.L #8, D6
00001D16  E286                    1512          ASR.L #1, D6
00001D18  4EB9 00001FD0           1513          JSR EA_DECODER
00001D1E                          1514      
00001D1E  16FC 002C               1515          MOVE.B #',', (A3)+
00001D22                          1516          ;Reset D5 and D6 just in case.
00001D22  4285                    1517          CLR.L D5
00001D24  4286                    1518          CLR.L D6
00001D26                          1519          ;Second argument, set D4
00001D26  383C 0001               1520          MOVE #1, D4
00001D2A                          1521      
00001D2A                          1522          ; Grab the other mode
00001D2A  2A00                    1523          MOVE.L D0, D5
00001D2C  2C00                    1524          MOVE.L D0, D6
00001D2E                          1525      
00001D2E                          1526          ;and off mode
00001D2E  0245 0038               1527          ANDI #56, D5
00001D32  E685                    1528          ASR.L #3, D5
00001D34                          1529          ;and off data
00001D34  0246 0007               1530          ANDI #7, D6
00001D38  4EB9 00001FD0           1531          JSR EA_DECODER
00001D3E                          1532          
00001D3E                          1533          ;Reset D4
00001D3E  4284                    1534          CLR.L D4
00001D40                          1535      
00001D40  4E75                    1536          RTS
00001D42                          1537      
00001D42                          1538  BRA_EA
00001D42                          1539          ;Effectively the same as BRA
00001D42  4EF9 00001D48           1540          JMP BSR_EA
00001D48                          1541  
00001D48                          1542  BSR_EA
00001D48  4287                    1543          CLR.L D7
00001D4A  4286                    1544          CLR.L D6
00001D4C  4285                    1545          CLR.L D5
00001D4E  4284                    1546          CLR.L D4
00001D50                          1547          
00001D50  3A3C 0007               1548          MOVE #7, D5     ; Immediate Addressing 
00001D54                          1549  
00001D54  3E00                    1550          MOVE D0, D7 
00001D56  0247 00FF               1551          ANDI #255, D7
00001D5A                          1552          
00001D5A  BE3C 0000               1553          CMP.B  #$00, D7
00001D5E  6700 001A               1554          BEQ    BSR_EA_16
00001D62                          1555   
00001D62  BE3C 00FF               1556          CMP.B  #$FF, D7
00001D66  6700 0022               1557          BEQ  BSR_EA_32
00001D6A                          1558          
00001D6A  1C3C 0000               1559          MOVE.B  #0, D6
00001D6E  183C 0000               1560          MOVE.B  #0, D4
00001D72  4EB9 00001FD0           1561          JSR EA_DECODER
00001D78                          1562      
00001D78  4E75                    1563          RTS
00001D7A                          1564  
00001D7A                          1565  BSR_EA_16
00001D7A                          1566          ;Mode 7 Word
00001D7A  1C3C 0000               1567          MOVE.B  #0, D6
00001D7E  183C 0000               1568          MOVE.B  #0, D4
00001D82  4EB9 00001FD0           1569          JSR EA_DECODER
00001D88  4E75                    1570          RTS
00001D8A                          1571  
00001D8A                          1572  BSR_EA_32
00001D8A                          1573          ;Mode 7 : Long 
00001D8A                          1574          
00001D8A  1C3C 0001               1575          MOVE.B  #1, D6
00001D8E  183C 0000               1576          MOVE.B  #0, D4
00001D92  4EB9 00001FD0           1577          JSR EA_DECODER
00001D98  4E75                    1578          RTS
00001D9A                          1579      
00001D9A                          1580  DIVU_EA
00001D9A                          1581          ;Practically the same as DIVS
00001D9A  4EF9 00001DA0           1582          JMP DIVS_EA
00001DA0                          1583  
00001DA0                          1584  DIVS_EA
00001DA0  2A00                    1585          MOVE.L D0, D5
00001DA2  2C00                    1586          MOVE.L D0, D6
00001DA4                          1587      
00001DA4                          1588          ;and off mode
00001DA4  0245 01C0               1589          ANDI #448, D5
00001DA8  EC85                    1590          ASR.L #6, D5
00001DAA                          1591          ;and off data
00001DAA  0246 0E00               1592          ANDI #3584, D6
00001DAE  E086                    1593          ASR.L #8, D6
00001DB0  E286                    1594          ASR.L #1, D6
00001DB2  4EB9 00001FD0           1595          JSR EA_DECODER
00001DB8                          1596      
00001DB8  16FC 002C               1597          MOVE.B #',', (A3)+
00001DBC                          1598          ;Reset D5 and D6 just in case.
00001DBC  4285                    1599          CLR.L D5
00001DBE  4286                    1600          CLR.L D6
00001DC0                          1601          ;Second argument, set D4
00001DC0  383C 0001               1602          MOVE #1, D4
00001DC4                          1603      
00001DC4                          1604          ; Grab the other mode
00001DC4  2A00                    1605          MOVE.L D0, D5
00001DC6  2C00                    1606          MOVE.L D0, D6
00001DC8                          1607      
00001DC8                          1608          ;and off mode
00001DC8  0245 0038               1609          ANDI #56, D5
00001DCC  E685                    1610          ASR.L #3, D5
00001DCE                          1611          ;and off data
00001DCE  0246 0007               1612          ANDI #7, D6
00001DD2  4EB9 00001FD0           1613          JSR EA_DECODER
00001DD8                          1614          
00001DD8                          1615          ;Clear D4
00001DD8  4284                    1616          CLR.L D4
00001DDA                          1617      
00001DDA  4E75                    1618          RTS
00001DDC                          1619  
00001DDC                          1620  SUB_EA
00001DDC  2A00                    1621          MOVE.L D0, D5
00001DDE  2C00                    1622          MOVE.L D0, D6
00001DE0                          1623      
00001DE0                          1624          ;and off mode
00001DE0  0245 0038               1625          ANDI #56, D5
00001DE4                          1626          ;and off data
00001DE4  0246 0007               1627          ANDI #7, D6
00001DE8  4EB9 00001FD0           1628          JSR EA_DECODER
00001DEE  2C00                    1629          MOVE.L D0, D6
00001DF0                          1630      
00001DF0  16FC 002C               1631          MOVE.B #',', (A3)+
00001DF4                          1632          ;Reset D6 just in case.
00001DF4  4286                    1633          CLR.L D6
00001DF6                          1634          ;Second argument, set D4
00001DF6  383C 0001               1635          MOVE #1, D4
00001DFA                          1636      
00001DFA                          1637          ;sub only works on data registers, so we set mode to data
00001DFA  4285                    1638          CLR.L D5
00001DFC                          1639          ;and off data
00001DFC  0246 0E00               1640          ANDI #3584, D6
00001E00  E086                    1641          ASR.L #8, D6
00001E02  E286                    1642          ASR.L #1, D6
00001E04  4EB9 00001FD0           1643          JSR EA_DECODER
00001E0A                          1644          
00001E0A                          1645          ;Clear D4
00001E0A  4284                    1646          CLR.L D4
00001E0C                          1647  
00001E0C  4E75                    1648          RTS
00001E0E                          1649  
00001E0E                          1650  ADDQ_EA
00001E0E                          1651          ;For EA effectively SUBQ
00001E0E  4EF9 00001E14           1652          JMP SUBQ_EA
00001E14                          1653  
00001E14                          1654  SUBQ_EA
00001E14  2A00                    1655          MOVE.L D0, D5
00001E16  2E00                    1656          MOVE.L D0, D7
00001E18                          1657          
00001E18                          1658          
00001E18                          1659          ;Set to immediate data;
00001E18  3A3C 0007               1660          MOVE #7, D5
00001E1C                          1661          ;Get the immediate data.
00001E1C  3E00                    1662          MOVE D0, D7
00001E1E  0247 0E00               1663          ANDI #3584, D7
00001E22  E087                    1664          ASR.L #8, D7
00001E24  E287                    1665          ASR.L #1, D7
00001E26  BE7C 0000               1666          CMP #0, D7
00001E2A  6600 0004               1667          BNE SUBQ_EA_1
00001E2E                          1668          
00001E2E  7E08                    1669          MOVE.L #8, D7
00001E30                          1670          
00001E30                          1671  SUBQ_EA_1        
00001E30  4EB9 00001FC4           1672          JSR EA_PRINT_IMMEDIATE_NUMBER
00001E36                          1673      
00001E36  16FC 002C               1674          MOVE.B #',', (A3)+
00001E3A                          1675          ;Reset D5 and D6 just in case.
00001E3A  4285                    1676          CLR.L D5
00001E3C  4286                    1677          CLR.L D6
00001E3E                          1678          ;Second argument, set D4
00001E3E  383C 0001               1679          MOVE #1, D4
00001E42                          1680      
00001E42  2A00                    1681          MOVE.L D0, D5
00001E44  2C00                    1682          MOVE.L D0, D6
00001E46                          1683      
00001E46                          1684          ;and off mode
00001E46  0245 0038               1685          ANDI #56, D5
00001E4A  E685                    1686          ASR.L #3, D5
00001E4C                          1687          ;and off data
00001E4C  0246 0007               1688          ANDI #7, D6
00001E50  4EB9 00001FD0           1689          JSR EA_DECODER
00001E56                          1690          
00001E56                          1691          ;Clear d4
00001E56  4284                    1692          CLR.L D4
00001E58                          1693      
00001E58  4E75                    1694          RTS
00001E5A                          1695  
00001E5A                          1696  CMP_EA
00001E5A  2A00                    1697          MOVE.L D0, D5
00001E5C  2C00                    1698          MOVE.L D0, D6
00001E5E                          1699      
00001E5E                          1700          ;and off mode
00001E5E  0245 0038               1701          ANDI #56, D5
00001E62                          1702          ;and off data
00001E62  0246 0007               1703          ANDI #7, D6
00001E66  4EB9 00001FD0           1704          JSR EA_DECODER
00001E6C                          1705              
00001E6C  16FC 002C               1706          MOVE.B #',', (A3)+
00001E70                          1707          ;Reset D6 just in case.
00001E70  4286                    1708          CLR.L D6
00001E72                          1709          ;Second argument, set D4
00001E72  383C 0001               1710          MOVE #1, D4
00001E76                          1711      
00001E76                          1712          ;Do other part of the EA
00001E76  2A00                    1713          MOVE.L D0, D5
00001E78  2C00                    1714          MOVE.L D0, D6
00001E7A                          1715      
00001E7A                          1716          ;set mode to data register
00001E7A  4285                    1717          CLR.L D5
00001E7C                          1718          ;and off data
00001E7C  0246 0E00               1719          ANDI #3584, D6
00001E80  E086                    1720          ASR.L #8, D6
00001E82  E286                    1721          ASR.L #1, D6
00001E84  4EB9 00001FD0           1722          JSR EA_DECODER
00001E8A                          1723          
00001E8A                          1724          ;Clear D4
00001E8A  4284                    1725          CLR.L D4
00001E8C                          1726  
00001E8C  4E75                    1727          RTS
00001E8E                          1728  
00001E8E                          1729  MULS_EA
00001E8E                          1730      ;Same as MULU
00001E8E  4EF9 00001E94           1731      JMP MULU_EA
00001E94                          1732  
00001E94                          1733  MULU_EA
00001E94  2A00                    1734          MOVE.L D0, D5
00001E96  2E00                    1735          MOVE.L D0, D7
00001E98                          1736      
00001E98                          1737          ;Get mode
00001E98  0245 0038               1738          ANDI #56, D5
00001E9C  E685                    1739          ASR.L #3, D5
00001E9E                          1740          ;and off data
00001E9E  0246 0007               1741          ANDI #7, D6
00001EA2  4EB9 00001FD0           1742          JSR EA_DECODER
00001EA8                          1743     
00001EA8  16FC 002C               1744          MOVE.B #',', (A3)+
00001EAC                          1745          ;Reset D6 just in case.
00001EAC  4286                    1746          CLR.L D6
00001EAE                          1747          ;Second argument, set D4
00001EAE  383C 0001               1748          MOVE #1, D4
00001EB2                          1749      
00001EB2  2A00                    1750          MOVE.L D0, D5
00001EB4  2C00                    1751          MOVE.L D0, D6
00001EB6                          1752      
00001EB6                          1753          ;set mode data register
00001EB6  4285                    1754          CLR.L D5
00001EB8                          1755          ;and off data for register
00001EB8  0247 0E00               1756          ANDI #3584, D7
00001EBC  E086                    1757          ASR.L #8, D6
00001EBE  E286                    1758          ASR.L #1, D6
00001EC0  4EB9 00001FD0           1759          JSR EA_DECODER
00001EC6                          1760      
00001EC6  2A00                    1761          MOVE.L D0, D5
00001EC8  2C00                    1762          MOVE.L D0, D6
00001ECA                          1763          
00001ECA                          1764          ;Clear D
00001ECA  4284                    1765          CLR.L D4
00001ECC                          1766          
00001ECC  4E75                    1767          RTS
00001ECE                          1768          
00001ECE                          1769  ADD_EA
00001ECE                          1770          ;Effective the same as ADD
00001ECE  4EF9 00001ED4           1771          JMP ADDA_EA
00001ED4                          1772  
00001ED4                          1773  ADDA_EA
00001ED4  2A00                    1774          MOVE.L D0, D5
00001ED6  2C00                    1775          MOVE.L D0, D6
00001ED8                          1776      
00001ED8                          1777          ;and off mode
00001ED8  0245 0038               1778          ANDI #56, D5
00001EDC  E685                    1779          ASR.L #3, D5
00001EDE                          1780          ;and off data
00001EDE  0246 0007               1781          ANDI #7, D6
00001EE2  4EB9 00001FD0           1782          JSR EA_DECODER
00001EE8                          1783      
00001EE8  16FC 002C               1784          MOVE.B #',', (A3)+
00001EEC                          1785          ;Reset D5 and D6 just in case.
00001EEC  4285                    1786          CLR.L D5
00001EEE  4286                    1787          CLR.L D6
00001EF0                          1788          ;Second argument, set D4
00001EF0  383C 0001               1789          MOVE #1, D4
00001EF4                          1790      
00001EF4                          1791          ; Grab the other mode
00001EF4  2A00                    1792          MOVE.L D0, D5
00001EF6  2C00                    1793          MOVE.L D0, D6
00001EF8                          1794          
00001EF8                          1795          ;and off mode
00001EF8  0245 01C0               1796          ANDI #448, D5
00001EFC  E085                    1797          ASR.L #8, D5
00001EFE                          1798          ;and off data
00001EFE  0246 0E00               1799          ANDI #3584, D6
00001F02  E086                    1800          ASR.L #8, D6
00001F04  E286                    1801          ASR.L #1, D6
00001F06  4EB9 00001FD0           1802          JSR EA_DECODER
00001F0C                          1803          
00001F0C                          1804          ;Clear D4
00001F0C  4284                    1805          CLR.L D4
00001F0E                          1806      
00001F0E  4E75                    1807          RTS
00001F10                          1808  
00001F10                          1809  ASL_EA
00001F10                          1810          ;Practically the same as ASR
00001F10  4EF9 00001F16           1811          JMP ASR_EA
00001F16                          1812  
00001F16                          1813  ASR_EA
00001F16                          1814          ;Check bit 6 and 7 to see if this is a memory transfer
00001F16  3A00                    1815          MOVE D0, D5
00001F18  0245 00C0               1816          ANDI #192, D5
00001F1C  EC85                    1817          ASR.L #6, D5
00001F1E  BA7C 0003               1818          CMP #3, D5
00001F22  6700 001C               1819          BEQ ASR_EA_MEM
00001F26                          1820          
00001F26                          1821          ;Check bit 5 to see if its a register or count.
00001F26  3A00                    1822          MOVE D0, D5
00001F28  0245 0020               1823          ANDI #32, D5
00001F2C  EA85                    1824          ASR.L #5, D5
00001F2E  BA7C 0000               1825          CMP #0, D5
00001F32  6700 0028               1826          BEQ ASR_EA_NUM
00001F36  BA7C 0001               1827          CMP #1, D5
00001F3A  6700 005A               1828          BEQ ASR_EA_REG
00001F3E                          1829      
00001F3E                          1830          ;Error-handling return
00001F3E  4E75                    1831          RTS
00001F40                          1832      
00001F40                          1833  ASR_EA_MEM
00001F40  2A00                    1834          MOVE.L D0, D5
00001F42  2C00                    1835          MOVE.L D0, D6
00001F44                          1836          ;and off mode
00001F44  0245 0038               1837          ANDI #56, D5
00001F48  E685                    1838          ASR.L #3, D5
00001F4A                          1839          ;and off data
00001F4A  0246 0007               1840          ANDI #7, D6
00001F4E  4EB9 00001FD0           1841          JSR EA_DECODER
00001F54                          1842      
00001F54                          1843          ;Reset D5 and D6 just in case.
00001F54  4285                    1844          CLR.L D5
00001F56  4286                    1845          CLR.L D6
00001F58                          1846          
00001F58                          1847          ;Clear D4
00001F58  4284                    1848          CLR.L D4
00001F5A                          1849          
00001F5A  4E75                    1850          RTS
00001F5C                          1851      
00001F5C                          1852  ASR_EA_NUM
00001F5C                          1853          ;Set to immediate data;
00001F5C  3A3C 0007               1854          MOVE #7, D5
00001F60                          1855          ;Get the immediate data.
00001F60  3E00                    1856          MOVE D0, D7
00001F62  0247 0E00               1857          ANDI #3584, D7
00001F66  E087                    1858          ASR.L #8, D7
00001F68  E287                    1859          ASR.L #1, D7
00001F6A  BE7C 0000               1860          CMP #0, D7
00001F6E  6600 0004               1861          BNE ASR_EA_NUM_1
00001F72                          1862          
00001F72  7E08                    1863          MOVE.L #8, D7
00001F74                          1864          
00001F74                          1865  ASR_EA_NUM_1        
00001F74  4EB9 00001FC4           1866          JSR EA_PRINT_IMMEDIATE_NUMBER
00001F7A                          1867      
00001F7A  16FC 002C               1868          MOVE.B #',', (A3)+
00001F7E                          1869          ;Reset D6 just in case.
00001F7E  4286                    1870          CLR.L D6
00001F80                          1871          ;Second argument, set D4
00001F80  383C 0001               1872          MOVE #1, D4
00001F84                          1873      
00001F84                          1874          ;Set to data register
00001F84  4285                    1875          CLR.L D5
00001F86  3C00                    1876          MOVE D0, D6
00001F88  CC7C 0007               1877          AND #7, D6
00001F8C  4EB9 00001FD0           1878          JSR EA_DECODER
00001F92                          1879  
00001F92                          1880          ;clear D4
00001F92  4284                    1881          CLR.L D4
00001F94                          1882          
00001F94  4E75                    1883          RTS    
00001F96                          1884  
00001F96                          1885  ASR_EA_REG
00001F96                          1886          ;Set to data register
00001F96  4285                    1887          CLR.L D5
00001F98  3C00                    1888          MOVE D0, D6
00001F9A  CC7C 0E00               1889          AND #3584, D6
00001F9E  E086                    1890          ASR.L #8, D6
00001FA0  E286                    1891          ASR.L #1, D6
00001FA2  4EB9 00001FD0           1892          JSR EA_DECODER  
00001FA8                          1893      
00001FA8  16FC 002C               1894          MOVE.B #',', (A3)+
00001FAC                          1895          ;Reset D6 just in case.
00001FAC  4286                    1896          CLR.L D6
00001FAE                          1897          ;Second argument, set D4
00001FAE  383C 0001               1898          MOVE #1, D4
00001FB2                          1899      
00001FB2                          1900          ;Set to data register
00001FB2  4285                    1901          CLR.L D5
00001FB4  3C00                    1902          MOVE D0, D6
00001FB6  CC7C 0007               1903          AND #7, D6
00001FBA  4EB9 00001FD0           1904          JSR EA_DECODER    
00001FC0                          1905          
00001FC0                          1906          ;Clear D4
00001FC0  4284                    1907          CLR.L D4
00001FC2                          1908          
00001FC2  4E75                    1909          RTS
00001FC4                          1910  
00001FC4                          1911  ;For the instructions that have a immediate number in the instruction itself, not in a following word/long
00001FC4                          1912  EA_PRINT_IMMEDIATE_NUMBER
00001FC4  16FC 0023               1913      MOVE.B #'#', (A3)+
00001FC8  4EB9 0000230C           1914      JSR ITOA
00001FCE  4E75                    1915      RTS
00001FD0                          1916  
00001FD0                          1917  
00001FD0                          1918  EA_DECODER:
00001FD0                          1919          ;Add space.
00001FD0  16FC 0020               1920          MOVE.B #' ', (A3)+
00001FD4                          1921          ;Jump to the Mode given.
00001FD4  41F9 00001FE2           1922          LEA EAJUMPTABLE, A0
00001FDA  CAFC 0006               1923          MULU #6, D5
00001FDE  4EF0 5000               1924          JMP 0(A0,D5)
00001FE2                          1925          
00001FE2                          1926      ;   This is a jump table that will jump to certain sub-functions based on what the mode is.
00001FE2                          1927  EAJUMPTABLE
00001FE2  4EF9 00002012           1928          JMP MODE0       
00001FE8  4EF9 00002054           1929          JMP MODE1      
00001FEE  4EF9 00002096           1930          JMP MODE2       
00001FF4  4EF9 000020E0           1931          JMP MODE3       
00001FFA  4EF9 0000212E           1932          JMP MODE4       
00002000  4EF9 0000217C           1933          JMP MODE5       
00002006  4EF9 0000217E           1934          JMP MODE6       
0000200C  4EF9 00002180           1935          JMP MODE7      
00002012                          1936      
00002012                          1937  MODE0      
00002012                          1938          ; Figure the  that relate to it op codes 
00002012                          1939          
00002012  BC7C 0000               1940          CMP #0, D6
00002016  6700 0234               1941          BEQ APPEND_D0
0000201A                          1942      
0000201A  BC7C 0001               1943          CMP #1, D6
0000201E  6700 0236               1944          BEQ APPEND_D1
00002022                          1945      
00002022  BC7C 0002               1946          CMP #2, D6
00002026  6700 0238               1947          BEQ APPEND_D2
0000202A                          1948      
0000202A  BC7C 0003               1949          CMP #3, D6
0000202E  6700 023A               1950          BEQ APPEND_D3
00002032                          1951      
00002032  BC7C 0004               1952          CMP #4, D6
00002036  6700 023C               1953          BEQ APPEND_D4
0000203A                          1954          
0000203A  BC7C 0005               1955          CMP #5, D6
0000203E  6700 023E               1956          BEQ APPEND_D5
00002042                          1957      
00002042  BC7C 0006               1958          CMP #6, D6
00002046  6700 0240               1959          BEQ APPEND_D6
0000204A                          1960      
0000204A  BC7C 0007               1961          CMP #7, D6
0000204E  6700 0242               1962          BEQ APPEND_D7
00002052                          1963      
00002052                          1964          ;Return
00002052  4E75                    1965          RTS
00002054                          1966  
00002054                          1967  MODE1
00002054  BC7C 0000               1968          CMP #0, D6
00002058  6700 0242               1969          BEQ APPEND_A0
0000205C                          1970      
0000205C  BC7C 0001               1971          CMP #1, D6
00002060  6700 0244               1972          BEQ APPEND_A1
00002064                          1973      
00002064  BC7C 0002               1974          CMP #2, D6
00002068  6700 0246               1975          BEQ APPEND_A2
0000206C                          1976      
0000206C  BC7C 0003               1977          CMP #3, D6
00002070  6700 0248               1978          BEQ APPEND_A3
00002074                          1979      
00002074  BC7C 0004               1980          CMP #4, D6
00002078  6700 024A               1981          BEQ APPEND_A4
0000207C                          1982      
0000207C  BC7C 0005               1983          CMP #5, D6
00002080  6700 024C               1984          BEQ APPEND_A5
00002084                          1985      
00002084  BC7C 0006               1986          CMP #6, D6
00002088  6700 024E               1987          BEQ APPEND_A6
0000208C                          1988      
0000208C  BC7C 0007               1989          CMP #7, D6
00002090  6700 0250               1990          BEQ APPEND_A7
00002094                          1991      
00002094                          1992          ;Return
00002094  4E75                    1993          RTS
00002096                          1994  
00002096                          1995  MODE2
00002096  16FC 0028               1996          MOVE.B #'(', (A3)+
0000209A                          1997  
0000209A  BC7C 0000               1998          CMP #0, D6
0000209E  6700 01FC               1999          BEQ APPEND_A0
000020A2                          2000      
000020A2  BC7C 0001               2001          CMP #1, D6
000020A6  6700 01FE               2002          BEQ APPEND_A1
000020AA                          2003      
000020AA  BC7C 0002               2004          CMP #2, D6
000020AE  6700 0200               2005          BEQ APPEND_A2
000020B2                          2006      
000020B2  BC7C 0003               2007          CMP #3, D6
000020B6  6700 0202               2008          BEQ APPEND_A3
000020BA                          2009      
000020BA  BC7C 0004               2010          CMP #4, D6
000020BE  6700 0204               2011          BEQ APPEND_A4
000020C2                          2012      
000020C2  BC7C 0005               2013          CMP #5, D6
000020C6  6700 0206               2014          BEQ APPEND_A5
000020CA                          2015      
000020CA  BC7C 0006               2016          CMP #6, D6
000020CE  6700 0208               2017          BEQ APPEND_A6
000020D2                          2018      
000020D2  BC7C 0007               2019          CMP #7, D6
000020D6  6700 020A               2020          BEQ APPEND_A7
000020DA                          2021          
000020DA  16FC 0029               2022          MOVE.B #')', (A3)+
000020DE                          2023      
000020DE                          2024          ;Return
000020DE  4E75                    2025          RTS
000020E0                          2026  
000020E0                          2027  MODE3
000020E0  16FC 0028               2028          MOVE.B #'(', (A3)+
000020E4                          2029  
000020E4  BC7C 0000               2030          CMP #0, D6
000020E8  6700 01B2               2031          BEQ APPEND_A0
000020EC                          2032      
000020EC  BC7C 0001               2033          CMP #1, D6
000020F0  6700 01B4               2034          BEQ APPEND_A1
000020F4                          2035      
000020F4  BC7C 0002               2036          CMP #2, D6
000020F8  6700 01B6               2037          BEQ APPEND_A2
000020FC                          2038      
000020FC  BC7C 0003               2039          CMP #3, D6
00002100  6700 01B8               2040          BEQ APPEND_A3
00002104                          2041      
00002104  BC7C 0004               2042          CMP #4, D6
00002108  6700 01BA               2043          BEQ APPEND_A4
0000210C                          2044      
0000210C  BC7C 0005               2045          CMP #5, D6
00002110  6700 01BC               2046          BEQ APPEND_A5
00002114                          2047      
00002114  BC7C 0006               2048          CMP #6, D6
00002118  6700 01BE               2049          BEQ APPEND_A6
0000211C                          2050      
0000211C  BC7C 0007               2051          CMP #7, D6
00002120  6700 01C0               2052          BEQ APPEND_A7
00002124                          2053      
00002124  16FC 0029               2054          MOVE.B #')', (A3)+
00002128  16FC 002B               2055          MOVE.B #'+', (A3)+
0000212C                          2056      
0000212C                          2057          ;Return
0000212C  4E75                    2058          RTS
0000212E                          2059  
0000212E                          2060  MODE4
0000212E  16FC 002D               2061          MOVE.B #'-', (A3)+
00002132  16FC 0028               2062          MOVE.B #'(', (A3)+
00002136                          2063  
00002136  BC7C 0000               2064          CMP #0, D6
0000213A  6700 0160               2065          BEQ APPEND_A0
0000213E                          2066      
0000213E  BC7C 0001               2067          CMP #1, D6
00002142  6700 0162               2068          BEQ APPEND_A1
00002146                          2069      
00002146  BC7C 0002               2070          CMP #2, D6
0000214A  6700 0164               2071          BEQ APPEND_A2
0000214E                          2072      
0000214E  BC7C 0003               2073          CMP #3, D6
00002152  6700 0166               2074          BEQ APPEND_A3
00002156                          2075      
00002156  BC7C 0004               2076          CMP #4, D6
0000215A  6700 0168               2077          BEQ APPEND_A4
0000215E                          2078      
0000215E  BC7C 0005               2079          CMP #5, D6
00002162  6700 016A               2080          BEQ APPEND_A5
00002166                          2081      
00002166  BC7C 0006               2082          CMP #6, D6
0000216A  6700 016C               2083          BEQ APPEND_A6
0000216E                          2084      
0000216E  BC7C 0007               2085          CMP #7, D6
00002172  6700 016E               2086          BEQ APPEND_A7
00002176                          2087      
00002176  16FC 0029               2088          MOVE.B #')', (A3)+
0000217A                          2089      
0000217A                          2090          ;Return
0000217A  4E75                    2091          RTS
0000217C                          2092  
0000217C                          2093  MODE5
0000217C                          2094          ;Error-handling mode.
0000217C  4E75                    2095          RTS
0000217E                          2096      
0000217E                          2097  MODE6
0000217E                          2098          ;Error-handling mode.
0000217E  4E75                    2099          RTS
00002180                          2100      
00002180                          2101  MODE7
00002180  4287                    2102          CLR.L D7
00002182  BC7C 0000               2103          CMP #0, D6
00002186  6700 0014               2104          BEQ MODE_7_SHORT
0000218A                          2105      
0000218A  BC7C 0001               2106          CMP #1, D6
0000218E  6700 003E               2107          BEQ MODE_7_LONG
00002192                          2108      
00002192  BC7C 0004               2109          CMP #4, D6
00002196  6700 0068               2110          BEQ MODE_7_IMM_WORD
0000219A                          2111      
0000219A  4E75                    2112          RTS
0000219C                          2113          
0000219C                          2114  ;MODE 7 WHEN IT IS WORD
0000219C                          2115  ;======================
0000219C                          2116  MODE_7_SHORT
0000219C  B87C 0000               2117          CMP #0, D4
000021A0  6700 0006               2118          BEQ MODE_7_SHORT_1
000021A4                          2119          
000021A4  16FC 0028               2120          MOVE.B #'(', (A3)+
000021A8                          2121  
000021A8                          2122  MODE_7_SHORT_1
000021A8  16FC 0024               2123          MOVE.B #'$', (A3)+
000021AC  3E1D                    2124          MOVE.W (A5)+, D7
000021AE  363C 0004               2125          MOVE #4, D3
000021B2  4EB9 0000230C           2126          JSR ITOA
000021B8                          2127      
000021B8  B87C 0000               2128          CMP #0, D4
000021BC  6700 000E               2129          BEQ MODE_7_SHORT_2
000021C0                          2130          
000021C0  16FC 0029               2131          MOVE.B #')', (A3)+
000021C4  16FC 002E               2132          MOVE.B #'.', (A3)+
000021C8  16FC 0057               2133          MOVE.B #'W', (A3)+
000021CC                          2134  MODE_7_SHORT_2        
000021CC  4E75                    2135          RTS
000021CE                          2136  
000021CE                          2137  ;MODE 7 WHEN IT IS LONG
000021CE                          2138  ;======================    
000021CE                          2139  MODE_7_LONG
000021CE  B87C 0000               2140          CMP #0, D4
000021D2  6700 0006               2141          BEQ MODE_7_LONG_1
000021D6                          2142          
000021D6  16FC 0028               2143          MOVE.B #'(', (A3)+
000021DA                          2144  
000021DA                          2145  MODE_7_LONG_1
000021DA  16FC 0024               2146          MOVE.B #'$', (A3)+
000021DE  2E1D                    2147          MOVE.L (A5)+, D7
000021E0  363C 0008               2148          MOVE #8, D3
000021E4  4EB9 0000230C           2149          JSR ITOA
000021EA                          2150          
000021EA  B87C 0000               2151          CMP #0, D4
000021EE  6700 000E               2152          BEQ MODE_7_LONG_2
000021F2                          2153          
000021F2  16FC 0029               2154          MOVE.B #')', (A3)+
000021F6  16FC 002E               2155          MOVE.B #'.', (A3)+
000021FA  16FC 004C               2156          MOVE.B #'L', (A3)+
000021FE                          2157  MODE_7_LONG_2  
000021FE  4E75                    2158          RTS
00002200                          2159  
00002200                          2160  ;MODE 7 WHEN IT IS IMMEDIATE WORD
00002200                          2161  ;================================
00002200                          2162  MODE_7_IMM_WORD
00002200                          2163          ;Immediate data can't be written to.
00002200  B87C 0001               2164          CMP #1, D4
00002204  6700 00E6               2165          BEQ DATA_ERROR
00002208                          2166       
00002208                          2167          ;If the instruction is a long, we belong in next operation.
00002208  B67C 0004               2168          CMP #4, D3
0000220C  6700 0018               2169          BEQ MODE_7_IMM_LONG   
00002210                          2170       
00002210  16FC 0023               2171          MOVE.B #'#',(A3)+
00002214  16FC 0024               2172          MOVE.B #'$',(A3)+
00002218  3E1D                    2173          MOVE.W (A5)+, D7
0000221A  363C 0004               2174          MOVE #4, D3
0000221E  4EB9 0000230C           2175          JSR ITOA
00002224                          2176          
00002224  4E75                    2177          RTS
00002226                          2178  
00002226                          2179  ;MODE 7 WHEN IT IS IMMEDIATE LONG
00002226                          2180  ;================================
00002226                          2181  MODE_7_IMM_LONG
00002226  16FC 0023               2182          MOVE.B #'#',(A3)+
0000222A  16FC 0024               2183          MOVE.B #'$',(A3)+
0000222E  2E1D                    2184          MOVE.L (A5)+, D7
00002230  363C 0008               2185          MOVE #8, D3
00002234  4EB9 0000230C           2186          JSR ITOA
0000223A                          2187          
0000223A  4E75                    2188          RTS
0000223C                          2189  
0000223C                          2190  MODE_7_2NDARG_START
0000223C  16FC 0028               2191          MOVE.B #'(', (A3)+
00002240  4E75                    2192          RTS
00002242                          2193  
00002242                          2194  MODE_7_2NDARG_END
00002242  16FC 0029               2195          MOVE.B #')', (A3)+
00002246  16FC 002E               2196          MOVE.B #'.', (A3)+
0000224A  4E75                    2197          RTS
0000224C                          2198  
0000224C                          2199  APPEND_D0
0000224C  16FC 0044               2200          MOVE.B  #'D', (A3)+
00002250  16FC 0030               2201          MOVE.B  #'0', (A3)+
00002254  4E75                    2202          RTS
00002256                          2203  
00002256                          2204  APPEND_D1
00002256  16FC 0044               2205          MOVE.B  #'D', (A3)+
0000225A  16FC 0031               2206          MOVE.B  #'1', (A3)+
0000225E  4E75                    2207          RTS
00002260                          2208  
00002260                          2209  APPEND_D2
00002260  16FC 0044               2210          MOVE.B  #'D', (A3)+
00002264  16FC 0032               2211          MOVE.B  #'2', (A3)+
00002268  4E75                    2212          RTS
0000226A                          2213  
0000226A                          2214  APPEND_D3
0000226A  16FC 0044               2215          MOVE.B  #'D', (A3)+
0000226E  16FC 0033               2216          MOVE.B  #'3', (A3)+
00002272  4E75                    2217          RTS
00002274                          2218  
00002274                          2219  APPEND_D4
00002274  16FC 0044               2220          MOVE.B  #'D', (A3)+
00002278  16FC 0034               2221          MOVE.B  #'4', (A3)+
0000227C  4E75                    2222          RTS
0000227E                          2223  
0000227E                          2224  APPEND_D5
0000227E  16FC 0044               2225          MOVE.B  #'D', (A3)+
00002282  16FC 0035               2226          MOVE.B  #'5', (A3)+
00002286  4E75                    2227          RTS
00002288                          2228  
00002288                          2229  APPEND_D6
00002288  16FC 0044               2230          MOVE.B  #'D', (A3)+
0000228C  16FC 0036               2231          MOVE.B  #'6', (A3)+
00002290  4E75                    2232          RTS
00002292                          2233  
00002292                          2234  APPEND_D7
00002292  16FC 0044               2235          MOVE.B  #'D', (A3)+
00002296  16FC 0037               2236          MOVE.B  #'7', (A3)+
0000229A  4E75                    2237          RTS
0000229C                          2238      
0000229C                          2239  APPEND_A0
0000229C  16FC 0041               2240          MOVE.B  #'A', (A3)+
000022A0  16FC 0030               2241          MOVE.B  #'0', (A3)+
000022A4  4E75                    2242          RTS
000022A6                          2243  
000022A6                          2244  APPEND_A1
000022A6  16FC 0041               2245          MOVE.B  #'A', (A3)+
000022AA  16FC 0031               2246          MOVE.B  #'1', (A3)+
000022AE  4E75                    2247          RTS
000022B0                          2248  
000022B0                          2249  APPEND_A2
000022B0  16FC 0041               2250          MOVE.B  #'A', (A3)+
000022B4  16FC 0032               2251          MOVE.B  #'2', (A3)+
000022B8  4E75                    2252          RTS
000022BA                          2253  
000022BA                          2254  APPEND_A3
000022BA  16FC 0041               2255          MOVE.B  #'A', (A3)+
000022BE  16FC 0033               2256          MOVE.B  #'3', (A3)+
000022C2  4E75                    2257          RTS
000022C4                          2258  
000022C4                          2259  APPEND_A4
000022C4  16FC 0041               2260          MOVE.B  #'A', (A3)+
000022C8  16FC 0034               2261          MOVE.B  #'4', (A3)+
000022CC  4E75                    2262          RTS
000022CE                          2263  
000022CE                          2264  APPEND_A5
000022CE  16FC 0041               2265          MOVE.B  #'A', (A3)+
000022D2  16FC 0035               2266          MOVE.B  #'5', (A3)+
000022D6  4E75                    2267          RTS
000022D8                          2268  
000022D8                          2269  APPEND_A6
000022D8  16FC 0041               2270          MOVE.B  #'A', (A3)+
000022DC  16FC 0036               2271          MOVE.B  #'6', (A3)+
000022E0  4E75                    2272          RTS
000022E2                          2273      
000022E2                          2274  APPEND_A7
000022E2  16FC 0041               2275          MOVE.B  #'A', (A3)+
000022E6  16FC 0037               2276          MOVE.B  #'7', (A3)+
000022EA  4E75                    2277          RTS
000022EC                          2278  
000022EC                          2279          
000022EC                          2280  ; -------------------------------------------------------------
000022EC                          2281  ;   ERROR when Data has incorrect Addressing MODE
000022EC                          2282  ; -------------------------------------------------------------          
000022EC                          2283  DATA_ERROR:      
000022EC  43F9 0000269D           2284          LEA     DECODE_OP_ERROR, A1
000022F2  103C 000E               2285          MOVE.B  #task14,D0
000022F6  4E4F                    2286          TRAP    #15           Display  Error Message
000022F8  4EF8 1018               2287          JMP     RESTART_PROGRAM
000022FC                          2288  
000022FC                          2289  DATA_UNSUPPORTED:      
000022FC  43F9 00002731           2290          LEA     DECODE_EA_UNSUPPORT, A1
00002302  103C 000E               2291          MOVE.B  #task14,D0
00002306  4E4F                    2292          TRAP    #15           Display  Error Message
00002308  4EF8 1018               2293          JMP     RESTART_PROGRAM
0000230C                          2294   
0000230C                          2295  *-------------------------------------------------------------------        
0000230C                          2296      * ITOA CONVERT for IMMEDIATE DATA
0000230C                          2297      ;Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
0000230C                          2298      *D3 = # of ITOA Loop ITERATION
0000230C                          2299      *D7 = immediate address 
0000230C                          2300      *D6 = LSR Moving count
0000230C                          2301      *D0 = Data that is shifted
0000230C                          2302  *-------------------------------------------------------------------   
0000230C                          2303  ITOA:                       ; Converts hex string into int 
0000230C                          2304          ; D7 has the immediate address
0000230C  2F00                    2305          MOVE.L D0, -(SP)  
0000230E  4EB9 00002318           2306          JSR     ITOA_LOOP
00002314  201F                    2307          MOVE.L (SP)+, D0
00002316  4E75                    2308          RTS
00002318                          2309          
00002318                          2310  ITOA_LOOP:
00002318  4280                    2311          CLR.L   D0 
0000231A  4281                    2312          CLR.L   D1
0000231C                          2313          
0000231C  5303                    2314          SUB.B   #1, D3  
0000231E  2007                    2315          MOVE.L  D7, D0
00002320  1203                    2316          MOVE.B  D3, D1
00002322                          2317  
00002322  C2FC 0004               2318          MULU    #4, D1      ; The amount that we shift 
00002326  E2A8                    2319          LSR.L   D1, D0       ; Shift D0 with iteration Loop * 4
00002328                          2320          
00002328  0280 0000000F           2321          ANDI.L  #$F, D0          ; Last 4 bits in hex 
0000232E                          2322          
0000232E                          2323          ; Convert Hex into ASCII 
0000232E  4EB9 00002348           2324          JSR     ITOA_CONVERT
00002334                          2325          
00002334                          2326          ; ADD to A3 Counter 
00002334  4EB9 0000235C           2327          JSR     ITOA_ADD_CHAR                  
0000233A                          2328          ; Checks if counter is empty, ITOA is completed 
0000233A  B63C 0000               2329          CMP.B   #0,D3
0000233E  6700 0006               2330          BEQ     ITOA_DONE
00002342                          2331          
00002342  4EF8 2318               2332          JMP     ITOA_LOOP   ; Continue Reading more bits from immediate data         
00002346                          2333                         
00002346                          2334  ITOA_DONE:          
00002346  4E75                    2335          RTS         ; Returns back to last JSR 
00002348                          2336  
00002348                          2337  ITOA_CONVERT: 
00002348  B03C 0009               2338          CMP.B       #9,D0
0000234C  6300 0008               2339          BLS         ITOA_CONVERT_N
00002350                          2340          
00002350  0640 0037               2341          ADDI.W      #$37, D0
00002354  4E75                    2342          RTS 
00002356                          2343          
00002356                          2344  ITOA_CONVERT_N
00002356  0640 0030               2345          ADDI.W     #$30,D0
0000235A  4E75                    2346          RTS
0000235C                          2347          
0000235C                          2348  ITOA_ADD_CHAR: 
0000235C  B03C 0030               2349          CMP.B   #$30, D0
00002360  6700 007A               2350          BEQ     CHAR_0
00002364                          2351          
00002364  B03C 0031               2352          CMP.B   #$31, D0
00002368  6700 007C               2353          BEQ     CHAR_1
0000236C                          2354          
0000236C  B03C 0032               2355          CMP.B   #$32, D0
00002370  6700 007E               2356          BEQ     CHAR_2
00002374                          2357          
00002374  B03C 0033               2358          CMP.B   #$33, D0
00002378  6700 0080               2359          BEQ     CHAR_3
0000237C                          2360          
0000237C  B03C 0034               2361          CMP.B   #$34, D0
00002380  6700 0082               2362          BEQ     CHAR_4
00002384                          2363          
00002384  B03C 0035               2364          CMP.B   #$35, D0
00002388  6700 0084               2365          BEQ     CHAR_5
0000238C                          2366          
0000238C  B03C 0036               2367          CMP.B   #$36, D0
00002390  6700 0086               2368          BEQ     CHAR_6
00002394                          2369          
00002394  B03C 0037               2370          CMP.B   #$37, D0
00002398  6700 0088               2371          BEQ     CHAR_7
0000239C                          2372          
0000239C  B03C 0038               2373          CMP.B   #$38, D0
000023A0  6700 008A               2374          BEQ     CHAR_8
000023A4                          2375          
000023A4  B03C 0039               2376          CMP.B   #$39, D0
000023A8  6700 008C               2377          BEQ     CHAR_9
000023AC                          2378          
000023AC  B03C 0041               2379          CMP.B   #$41, D0
000023B0  6700 008E               2380          BEQ     CHAR_A
000023B4                          2381          
000023B4  B03C 0042               2382          CMP.B   #$42, D0
000023B8  6700 0090               2383          BEQ     CHAR_B        
000023BC                          2384          
000023BC  B03C 0043               2385          CMP.B   #$43, D0
000023C0  6700 0092               2386          BEQ     CHAR_C
000023C4                          2387          
000023C4  B03C 0044               2388          CMP.B   #$44, D0
000023C8  6700 0094               2389          BEQ     CHAR_D
000023CC                          2390          
000023CC  B03C 0045               2391          CMP.B   #$45, D0
000023D0  6700 0096               2392          BEQ     CHAR_E
000023D4                          2393          
000023D4  B03C 0046               2394          CMP.B   #$46, D0
000023D8  6700 0098               2395          BEQ     CHAR_F  
000023DC                          2396          
000023DC                          2397  CHAR_0:
000023DC  16FC 0030               2398          MOVE.B  #'0', (A3)+ 
000023E0  4EF9 0000247C           2399          JMP     ITOA_ADD_CHAR_DONE        
000023E6                          2400  CHAR_1:
000023E6  16FC 0031               2401          MOVE.B  #'1', (A3)+ 
000023EA  4EF9 0000247C           2402          JMP     ITOA_ADD_CHAR_DONE
000023F0                          2403  CHAR_2:
000023F0  16FC 0032               2404          MOVE.B  #'2', (A3)+ 
000023F4  4EF9 0000247C           2405          JMP     ITOA_ADD_CHAR_DONE
000023FA                          2406  CHAR_3:
000023FA  16FC 0033               2407          MOVE.B  #'3', (A3)+ 
000023FE  4EF9 0000247C           2408          JMP     ITOA_ADD_CHAR_DONE
00002404                          2409  CHAR_4:
00002404  16FC 0034               2410          MOVE.B  #'4', (A3)+ 
00002408  4EF9 0000247C           2411          JMP     ITOA_ADD_CHAR_DONE
0000240E                          2412  CHAR_5:
0000240E  16FC 0035               2413          MOVE.B  #'5', (A3)+ 
00002412  4EF9 0000247C           2414          JMP     ITOA_ADD_CHAR_DONE
00002418                          2415  CHAR_6:
00002418  16FC 0036               2416          MOVE.B  #'6', (A3)+ 
0000241C  4EF9 0000247C           2417          JMP     ITOA_ADD_CHAR_DONE
00002422                          2418  CHAR_7:
00002422  16FC 0037               2419          MOVE.B  #'7', (A3)+ 
00002426  4EF9 0000247C           2420          JMP     ITOA_ADD_CHAR_DONE
0000242C                          2421  CHAR_8:
0000242C  16FC 0038               2422          MOVE.B  #'8', (A3)+ 
00002430  4EF9 0000247C           2423          JMP     ITOA_ADD_CHAR_DONE
00002436                          2424  CHAR_9:
00002436  16FC 0039               2425          MOVE.B  #'9', (A3)+ 
0000243A  4EF9 0000247C           2426          JMP     ITOA_ADD_CHAR_DONE
00002440                          2427  CHAR_A:
00002440  16FC 0041               2428          MOVE.B  #'A', (A3)+ 
00002444  4EF9 0000247C           2429          JMP     ITOA_ADD_CHAR_DONE
0000244A                          2430  CHAR_B:
0000244A  16FC 0042               2431          MOVE.B  #'B', (A3)+ 
0000244E  4EF9 0000247C           2432          JMP     ITOA_ADD_CHAR_DONE
00002454                          2433  CHAR_C:
00002454  16FC 0043               2434          MOVE.B  #'C', (A3)+ 
00002458  4EF9 0000247C           2435          JMP     ITOA_ADD_CHAR_DONE
0000245E                          2436  CHAR_D:
0000245E  16FC 0044               2437          MOVE.B  #'D', (A3)+ 
00002462  4EF9 0000247C           2438          JMP     ITOA_ADD_CHAR_DONE
00002468                          2439  CHAR_E:
00002468  16FC 0045               2440          MOVE.B  #'E', (A3)+ 
0000246C  4EF9 0000247C           2441          JMP     ITOA_ADD_CHAR_DONE
00002472                          2442  CHAR_F:
00002472  16FC 0046               2443          MOVE.B  #'F', (A3)+ 
00002476  4EF9 0000247C           2444          JMP     ITOA_ADD_CHAR_DONE
0000247C                          2445          
0000247C                          2446  ITOA_ADD_CHAR_DONE:
0000247C  4E75                    2447          RTS                
0000247E                          2448  ; -------------------------------------------------------------
0000247E                          2449  ;   Converts User string input into HEX 
0000247E                          2450  ; -------------------------------------------------------------         
0000247E                          2451  ATOI:                       ; Converts hex string into int 
0000247E  4EB9 00002486           2452          JSR     ATOI_LOOP
00002484  4E75                    2453          RTS
00002486                          2454          
00002486                          2455  ATOI_LOOP: 
00002486  1219                    2456          MOVE.B  (A1)+, D1
00002488                          2457          
00002488                          2458          ; Checks if it is 00/ NULL, Reading is done
00002488  B23C 0000               2459          CMP.B   #0,D1
0000248C  6700 004C               2460          BEQ     ATOI_DONE
00002490                          2461          
00002490  B23C 0030               2462          CMP.B   #$30, D1         ; Error / non valid input
00002494  6D34                    2463          BLT.B    ATOI_ERROR
00002496                          2464          
00002496  B23C 0040               2465          CMP.B   #$40,D1          ; Checks for value in range of num (0 - 9) 
0000249A  6D16                    2466          BLT.B   ATOI_NUM_VALUE
0000249C                          2467          
0000249C  B23C 0041               2468          CMP.B   #$41, D1         ; Error / non valid input
000024A0  6D00 0028               2469          BLT     ATOI_ERROR                
000024A4                          2470          
000024A4  B23C 0047               2471          CMP.B   #$47, D1          
000024A8  6D00 0014               2472          BLT     ATOI_CAP_LETTR_VALUE   ; Checks for value in range of A-F
000024AC                          2473          
000024AC  4EF9 000024CA           2474          JMP     ATOI_ERROR      ;Error if it reaches all the way to the end
000024B2                          2475                  
000024B2                          2476  ATOI_NUM_VALUE: 
000024B2  E98B                    2477          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000024B4  0401 0030               2478          SUBI.B  #$30, D1        ; ASCI Value subtracts 30 
000024B8  D681                    2479          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000024BA  4EF8 2486               2480          JMP     ATOI_LOOP
000024BE                          2481          
000024BE                          2482  
000024BE                          2483  ATOI_CAP_LETTR_VALUE: 
000024BE  E98B                    2484          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000024C0  0401 0037               2485          SUBI.B  #$37, D1        ; ASCI Value subtracts 30 
000024C4  D681                    2486          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000024C6  4EF8 2486               2487          JMP     ATOI_LOOP
000024CA                          2488                  
000024CA                          2489  ATOI_ERROR: 
000024CA  43F9 000025A8           2490          LEA     ATOI_MESS_ERROR, A1
000024D0  103C 000E               2491          MOVE.B  #task14,D0
000024D4  4E4F                    2492          TRAP    #15           Display  Error Message
000024D6  4EF8 1012               2493          JMP     USER_INPUT
000024DA                          2494          
000024DA                          2495  ATOI_DONE: 
000024DA  4E75                    2496          RTS
000024DC                          2497         
000024DC                          2498  ERROR_START_ADDR:   
000024DC  43F9 000025DB           2499          LEA     START_ADDR_ERROR , A1
000024E2  103C 000E               2500          MOVE.B  #task14,D0
000024E6  4E4F                    2501          TRAP    #15           Display  Error Message
000024E8  4EF8 1018               2502          JMP     RESTART_PROGRAM
000024EC                          2503          
000024EC                          2504  ERROR_END_ADDR:   
000024EC  43F9 00002606           2505          LEA     END_ADDR_ERROR , A1
000024F2  103C 000E               2506          MOVE.B  #task14,D0
000024F6  4E4F                    2507          TRAP    #15           Display  Error Message
000024F8  4EF8 1018               2508          JMP     RESTART_PROGRAM       
000024FC                          2509                  
000024FC                          2510  DONE:
000024FC  103C 0009               2511          MOVE.B  #9, D0
00002500  4E4F                    2512          TRAP    #15             Halt Simulator   
00002502                          2513          
00002502                          2514  * Put variables and constants here
00002502  =0000000D               2515  CR      EQU     $0D
00002502  =0000000A               2516  LF      EQU     $0A
00002502= 0D 0A 00                2517  BLANK                   DC.B    '',CR,LF,0
00002505= 57 65 6C 63 6F 6D ...   2518  WELCOME_MESS            DC.B    'Welcome to the disassembler program',CR,LF,0
0000252B= 45 6E 74 65 72 20 ...   2519  START_MESS              DC.B    'Enter a start address',CR,LF,0
00002543= 45 6E 74 65 72 20 ...   2520  REPEAT_MESS             DC.B    'Enter Y to disassemble another program, N to quit',CR,LF,0
00002577= 57 72 6F 6E 67 20 ...   2521  INVALID_MESS            DC.B    'Wrong Input, Try again', CR,LF,0
00002590= 45 6E 74 65 72 20 ...   2522  END_MESS                DC.B    'Enter the end address',CR,LF,0
000025A8= 49 6E 76 61 6C 69 ...   2523  ATOI_MESS_ERROR         DC.B    'Invalid inputs for HEX values, Please try again',CR,LF,LF,0
000025DB= 49 6E 76 61 6C 69 ...   2524  START_ADDR_ERROR        DC.B    'Invalid start address, Please try again',CR,LF,LF,0
00002606= 49 6E 76 61 6C 69 ...   2525  END_ADDR_ERROR          DC.B    'Invalid end address, Please try again',CR,LF,LF,0
0000262F                          2526  buffer                  DS.B    bufferSize
0000266F= 50 72 65 73 73 20 ...   2527  MAX_SCREEN_OUTPUT       DC.B    'Press enter any key to continue the program',CR,LF,0
0000269D= 45 72 72 6F 72 20 ...   2528  DECODE_OP_ERROR         DC.B    'Error in reading the instruction. Invalid Op code readings', CR, LF,0
000026DA= 45 72 72 6F 72 20 ...   2529  DECODE_EA_ERROR         DC.B    'Error in reading the instruction. Invalid EA readings', CR, LF,0
00002712= 55 6E 73 75 70 70 ...   2530  DECODE_OP_UNSUPPORT     DC.B    'Unsupported Op code readings', CR, LF,0
00002731= 55 6E 73 75 70 70 ...   2531  DECODE_EA_UNSUPPORT     DC.B    'Unsupported EA code readings', CR, LF,0
00002750                          2532          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA             1ED4
ADDQ_EA             1E0E
ADD_EA              1ECE
APPEND_A0           229C
APPEND_A1           22A6
APPEND_A2           22B0
APPEND_A3           22BA
APPEND_A4           22C4
APPEND_A5           22CE
APPEND_A6           22D8
APPEND_A7           22E2
APPEND_D0           224C
APPEND_D1           2256
APPEND_D2           2260
APPEND_D3           226A
APPEND_D4           2274
APPEND_D5           227E
APPEND_D6           2288
APPEND_D7           2292
ASL_EA              1F10
ASR_EA              1F16
ASR_EA_MEM          1F40
ASR_EA_NUM          1F5C
ASR_EA_NUM_1        1F74
ASR_EA_REG          1F96
ATOI                247E
ATOI_CAP_LETTR_VALUE  24BE
ATOI_DONE           24DA
ATOI_ERROR          24CA
ATOI_LOOP           2486
ATOI_MESS_ERROR     25A8
ATOI_NUM_VALUE      24B2
BLANK               2502
BRA_EA              1D42
BSR_EA              1D48
BSR_EA_16           1D7A
BSR_EA_32           1D8A
BUFFER              262F
BUFFERSIZE          40
CHAR_0              23DC
CHAR_1              23E6
CHAR_2              23F0
CHAR_3              23FA
CHAR_4              2404
CHAR_5              240E
CHAR_6              2418
CHAR_7              2422
CHAR_8              242C
CHAR_9              2436
CHAR_A              2440
CHAR_B              244A
CHAR_C              2454
CHAR_D              245E
CHAR_E              2468
CHAR_F              2472
CLEAR_SCREEN        1102
CMP_EA              1E5A
CR                  D
DATA_ERROR          22EC
DATA_UNSUPPORTED    22FC
DECODE_EA_ERROR     26DA
DECODE_EA_UNSUPPORT  2731
DECODE_LOOP         10C2
DECODE_OP_ERROR     269D
DECODE_OP_UNSUPPORT  2712
DECODE_PAUSE        10E8
DECODE_START        10C0
DESTMODE            1C0
DIVS_EA             1DA0
DIVU_EA             1D9A
DONE                24FC
EAJUMPTABLE         1FE2
EA_DECODER          1FD0
EA_PRINT_IMMEDIATE_NUMBER  1FC4
END_ADDR            106E
END_ADDR_ERROR      2606
END_MESS            2590
END_PROGRAM         11BA
ERROR_END_ADDR      24EC
ERROR_START_ADDR    24DC
HELPER_ADDA_L       1940
HELPER_ADDA_W       1954
HELPER_ADDSUBQ_CONVERT_B  1892
HELPER_ADDSUBQ_CONVERT_L  186A
HELPER_ADDSUBQ_CONVERT_W  187E
HELPER_ADD_CONVERT_B  19CA
HELPER_ADD_CONVERT_L  19A2
HELPER_ADD_CONVERT_W  19B6
HELPER_ADD_SIZE_CAL  1978
HELPER_CMP_CONVERT_B  1AA4
HELPER_CMP_CONVERT_L  1A7C
HELPER_CMP_CONVERT_W  1A90
HELPER_CMP_SIZE_CAL  1A60
HELPER_ORIB         1676
HELPER_ORIL         169E
HELPER_ORIW         168A
HELPER_SUB_CONVERT_B  18FE
HELPER_SUB_CONVERT_L  18D6
HELPER_SUB_CONVERT_W  18EA
HELPER_SUB_SIZE_CAL  18AC
HELPER__ADDSUBQ_SIZE_CAL  1840
IMMEDIATE_EA        1BDC
INDEX0000           1220
INDEX0001           123E
INDEX0010           1266
INDEX0011           12A6
INDEX0100           12E6
INDEX0101           1304
INDEX0110           1320
INDEX0111           133E
INDEX1000           134E
INDEX1001           136E
INDEX1010           1384
INDEX1011           138A
INDEX1100           13AE
INDEX1101           13DA
INDEX1110           13F4
INDEX1110_MEM       1414
INDEX1111           1432
INPUT_N             4E
INPUT_NL            4E
INPUT_Y             59
INPUT_YL            79
INVALID_MESS        2577
ITOA                230C
ITOA_ADD_CHAR       235C
ITOA_ADD_CHAR_DONE  247C
ITOA_CONVERT        2348
ITOA_CONVERT_N      2356
ITOA_DONE           2346
ITOA_LOOP           2318
LEA_EA              1D06
LF                  A
LINESONSCREEN       1D
MAIN                1000
MAX_SCREEN_OUTPUT   266F
MODE0               2012
MODE1               2054
MODE2               2096
MODE3               20E0
MODE4               212E
MODE5               217C
MODE6               217E
MODE7               2180
MODE_7_2NDARG_END   2242
MODE_7_2NDARG_START  223C
MODE_7_IMM_LONG     2226
MODE_7_IMM_WORD     2200
MODE_7_LONG         21CE
MODE_7_LONG_1       21DA
MODE_7_LONG_2       21FE
MODE_7_SHORT        219C
MODE_7_SHORT_1      21A8
MODE_7_SHORT_2      21CC
MOVEA_EA            1C38
MOVEM_EA            1C7A
MOVEM_FINISH        1CD0
MOVEM_L             1770
MOVEM_POST          1CB8
MOVEM_PRE           1CCE
MOVEM_REG_TO_MEM    1CAA
MOVEM_SIZE_CALC     173E
MOVEM_SWITCH        1CCC
MOVEM_W             175C
MOVEQ_EA            1CD2
MOVE_EA             1C3E
MOVE_IMM_DATA       1C28
MOVE_POST_LOOP      1CBA
MULS_EA             1E8E
MULU_EA             1E94
NIBBLE2             F00
NIBBLE3             F0
OP_0000_TABLE       1438
OP_01000_TABLE      1498
OP_0110_TABLE       14F8
OP_1110_TABLE       1558
OP_ADD              1968
OP_ADDA             1912
OP_ADDI             1602
OP_ADDQ             1826
OP_ANDI             15CE
OP_ASL_ADDER        1B9C
OP_ASL_M            1AB8
OP_ASR_ADDER        1BAC
OP_ASR_M            1AD4
OP_BRA              19F4
OP_BSR              19DE
OP_CMP              1A5A
OP_CMPI             1636
OP_DATA_CLR         113E
OP_DATA_CLR_LOOP    1154
OP_DIVS             1A26
OP_DIVU             1A40
OP_EORI             161C
OP_ERROR            1BCC
OP_FINISH           1138
OP_JMP_TABLE        11C0
OP_LEA              16DE
OP_MOVEAL           16C8
OP_MOVEAW           16B2
OP_MOVEM0           171C
OP_MOVEM1           16FA
OP_MULS             1A18
OP_MULU             1A0A
OP_NOP              17C8
OP_NOP_RTS_RTE      1784
OP_ORI              15B8
OP_ORI_SIZE_EXTACT  1650
OP_ROTATION_CHECK   1AF0
OP_ROTATION_HELP    1B1E
OP_ROTATION_SIZE_B  1B54
OP_ROTATION_SIZE_HELP  1B3C
OP_ROTATION_SIZE_L  1B84
OP_ROTATION_SIZE_W  1B6C
OP_RTE              17EC
OP_RTS              17FC
OP_START            1112
OP_STOP             17D8
OP_SUB              18A6
OP_SUBI             15E8
OP_SUBQ             180C
OP_UNSUPPORTED      1BBC
REPEAT_MESS         2543
REPEAT_PROGRAM      1162
RESTART_PROGRAM     1018
RESTART_PROGRAM_START  11B2
RIGHT12             C
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
SHIFT               C
SHIFT16             1C34
SIZE                C0
SRCMODE             38
STACK               A0000
START               1000
START_ADDR          1036
START_ADDR_ERROR    25DB
START_MESS          252B
SUBQ_EA             1E14
SUBQ_EA_1           1E30
SUB_EA              1DDC
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK5               5
USER_INPUT          1012
WELCOME             1006
WELCOME_MESS        2505
