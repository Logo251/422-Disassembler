00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/17/2021 1:23:23 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 
00000000                             3  * Written by : Logan and Victor  
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program 
00001000                             9  
00001000  =000A0000                 10  stack   EQU     $000A0000
00001000  =0000000C                 11  shift   EQU     $C
00001000  =00000001                 12  task1   EQU     $01
00001000  =00000002                 13  task2   EQU     $02
00001000  =00000005                 14  task5   EQU     $05
00001000  =0000000D                 15  task13  EQU     $0D
00001000  =0000000E                 16  task14  EQU     $0E
00001000  =00000059                 17  input_Y EQU     $59
00001000  =00000079                 18  input_yl EQU     $79
00001000  =0000004E                 19  input_N EQU     $4E
00001000  =0000004E                 20  input_nl EQU     $4E
00001000  =0000001D                 21  linesOnScreen   EQU     29
00001000  =00000040                 22  bufferSize   EQU      64   
00001000  =0000000C                 23  right12     EQU     12      ; Extract op code
00001000  =00000008                 24  right8      EQU     8       ; Extract 2nd nibble
00001000  =00000006                 25  right6      EQU     6       ; Extract dest mode
00001000  =00000004                 26  right4      EQU     4       ; Extract 3rd Nibble
00001000  =00000003                 27  right3      EQU     3       ; Extract the scr mode
00001000                            28  
00001000  =00000F00                 29  nibble2     EQU     $0F00   ; Extract 2nd nibble
00001000  =000000F0                 30  nibble3     EQU     $00F0   ; Extract 3rd nibble
00001000  =000001C0                 31  destmode    EQU     $01C0   ; Extract the dest mode
00001000  =00000038                 32  srcmode     EQU     $0038   ; Extract the scr mode
00001000  =000000C0                 33  size        EQU     $00C0   ; Extract the size
00001000                            34  
00001000                            35  MAIN:
00001000  4FF9 000A0000             36          LEA     stack, SP
00001006                            37  WELCOME: 
00001006  43F9 000024EF             38          LEA     WELCOME_MESS, A1
0000100C  103C 000E                 39          MOVE.B  #task14,D0
00001010  4E4F                      40          TRAP    #15             Display  Openning Message 
00001012                            41  
00001012                            42  ; ----------------------------------------------------------------------------
00001012                            43  ;   User Interface 
00001012                            44  ; ----------------------------------------------------------------------------  
00001012                            45  USER_INPUT:
00001012  4EF9 00001036             46          JMP     START_ADDR
00001018                            47          
00001018                            48  RESTART_PROGRAM: 
00001018  7200                      49          MOVEQ   #0,D1
0000101A  227C 00000000             50          MOVEA.L #$0, A1
00001020  267C 00000000             51          MOVEA.L #$0, A3
00001026  2A7C 00000000             52          MOVEA.L #$0, A5
0000102C  2C7C 00000000             53          MOVEA.L #$0, A6
00001032  7600                      54          MOVEQ   #0,D3       
00001034  7000                      55          MOVEQ   #0,D0
00001036                            56                  
00001036                            57  START_ADDR:
00001036  7400                      58          MOVEQ   #0,D2
00001038                            59          ; Prompt a start address
00001038  43F9 00002515             60          LEA     START_MESS, A1
0000103E  103C 000E                 61          MOVE.B  #task14,D0
00001042  4E4F                      62          TRAP    #15           Display  Start_Addr Message
00001044                            63  
00001044  227C 00000000             64          MOVEA.L #$0, A1 
0000104A                            65          ; read a start address 
0000104A  103C 0002                 66          MOVE.B  #task2,D0     Gets input from the user
0000104E  4E4F                      67          TRAP    #15
00001050                            68          
00001050  4EB9 00002468             69          JSR     ATOI
00001056                            70          
00001056                            71          ; Validate start address       
00001056  7200                      72          MOVEQ   #0,D1
00001058  B6BC FFFFFFFF             73          CMP.L   #-1,D3
0000105E  6700 1466                 74          BEQ     ERROR_START_ADDR
00001062                            75          
00001062                            76                          
00001062  E29B                      77          ROR.L   #1, D3          ; Checks for odd number
00001064  6500 1460                 78          BCS     ERROR_START_ADDR
00001068  E39B                      79          ROL.L   #1, D3
0000106A  2A43                      80          MOVEA.L D3,A5           ; A5 = start address
0000106C  5442                      81          ADDQ    #2,D2        
0000106E                            82  END_ADDR:         
0000106E                            83          ; Prompt end address
0000106E  7600                      84          MOVEQ   #0,D3       ; Reset D3 Register
00001070  7200                      85          MOVEQ   #0,D1
00001072                            86          
00001072  43F9 0000257A             87          LEA     END_MESS, A1
00001078  103C 000E                 88          MOVE.B  #task14,D0
0000107C  4E4F                      89          TRAP    #15           Display  END_Addr Message
0000107E                            90          
0000107E  227C 00000000             91          MOVEA.L #$0, A1 
00001084  103C 0002                 92          MOVE.B  #task2,D0     Gets input from the user
00001088  4E4F                      93          TRAP    #15
0000108A                            94          
0000108A                            95          ; Read the end address
0000108A  4EB9 00002468             96          JSR     ATOI
00001090  7200                      97          MOVEQ   #0,D1
00001092  B6BC FFFFFFFF             98          CMP.L   #-1,D3
00001098  6700 143C                 99          BEQ     ERROR_END_ADDR
0000109C                           100          
0000109C                           101          ; Validate end address & check if its greater than start
0000109C  E29B                     102          ROR.L   #1, D3
0000109E  6500 1436                103          BCS     ERROR_END_ADDR
000010A2  E39B                     104          ROL.L   #1, D3
000010A4                           105          
000010A4  B6BC 00FFFFFF            106          CMP.L   #$000FFFFFF, D3 
000010AA  6C00 142A                107          BGE     ERROR_END_ADDR
000010AE                           108          
000010AE  7202                     109          MOVEQ   #2, D1
000010B0  BBC3                     110          CMP.L   D3, A5 
000010B2  6C00 1422                111          BGE     ERROR_END_ADDR
000010B6  2C43                     112          MOVEA.L D3,A6       ; A6 = end address
000010B8  5442                     113          ADDQ    #2,D2
000010BA  4EF9 000010C2            114          JMP     DECODE_LOOP
000010C0                           115        
000010C0                           116  ; ----------------------------------------------------------------------------
000010C0                           117  ;   OP Code Start
000010C0                           118  ; ----------------------------------------------------------------------------          
000010C0                           119  DECODE_START: 
000010C0  4282                     120          CLR.L   D2      ; D2 = Screen line counter
000010C2                           121             
000010C2                           122  DECODE_LOOP:
000010C2                           123          ; Decoding the current address
000010C2  284B                     124          MOVEA.L A3, A4      ; Save the current start address of the string we are printing 
000010C4  4EB9 00001112            125          JSR     OP_START
000010CA                           126          
000010CA  16FC 0000                127          MOVE.B  #$00, (A3)+
000010CE  224C                     128          MOVEA.L A4, A1      
000010D0  103C 000D                129          MOVE.B  #task13, D0     ; Printing out decoded instruction 
000010D4  4E4F                     130          TRAP    #15
000010D6                           131          
000010D6                           132          ; Check if a decode finished
000010D6  BDCD                     133          CMP.L   A5, A6          ; Checks if the program is done
000010D8  6F00 0088                134          BLE     REPEAT_PROGRAM
000010DC                           135          
000010DC                           136          ; Check if the screen filled
000010DC  5202                     137          ADDQ.B  #1,D2           ; Adds one to the total # of lines on the screen 
000010DE  B43C 001D                138          CMP.B   #linesOnScreen, D2  ; Check if it exceds the max 
000010E2  6700 0004                139          BEQ     DECODE_PAUSE
000010E6                           140  
000010E6  60DA                     141          BRA     DECODE_LOOP
000010E8                           142          
000010E8                           143  DECODE_PAUSE:   
000010E8  43F9 00002659            144          LEA     MAX_SCREEN_OUTPUT,  A1
000010EE  103C 000E                145          MOVE.B  #task14, D0     ; Display the input that it exceeds 
000010F2  4E4F                     146          TRAP    #15 
000010F4                           147          
000010F4  103C 0005                148          MOVE.B  #task5, D0      ; Ask for the user to input to continue 
000010F8  4E4F                     149          TRAP    #15
000010FA                           150          
000010FA                           151          ; Branch b/c user enter any key 
000010FA  4EB9 00001102            152          JSR     CLEAR_SCREEN
00001100                           153          ; Program is is ready to continue the program
00001100  60BE                     154          BRA     DECODE_START
00001102                           155          
00001102                           156  CLEAR_SCREEN: 
00001102                           157          ; Clear output for the screen 
00001102  4282                     158          CLR.L   D2
00001104  43F9 000024EC            159          LEA     BLANK,  A1
0000110A  103C 000D                160          MOVE.B  #task13, D0     ; Display the input that it exceeds 
0000110E  4E4F                     161          TRAP    #15 
00001110  4E75                     162          RTS
00001112                           163             
00001112                           164  OP_START: 
00001112  48E7 2002                165          MOVEM.L  D2/A6, -(SP)    ; D2 (Screen line), A6 Ending Address
00001116                           166          
00001116  4EB9 0000113E            167          JSR     OP_DATA_CLR
0000111C                           168          ; LEA     A3, buffer    ; Loads the message in 
0000111C                           169          
0000111C  41F9 000011C0            170          LEA      OP_JMP_TABLE, A0
00001122  4280                     171          CLR.L    D0
00001124  4281                     172          CLR.L    D1
00001126  301D                     173          MOVE.W   (A5)+,D0       ; Loads current word instruction to D0
00001128                           174          
00001128  2200                     175          MOVE.L   D0,D1          ; Move word instruct to D1
0000112A  143C 000C                176          MOVE.B   #right12, D2   
0000112E  E469                     177          LSR.W    D2, D1         ; D1 = op code
00001130  C2FC 0006                178          MULU     #6,D1          ; Computing jmp displacement
00001134  4EF0 1000                179          JMP      0(A0,D1)       ; 
00001138                           180         
00001138                           181  OP_FINISH: 
00001138  4CDF 4004                182          MOVEM.L (SP)+,D2/A6, 
0000113C  4E75                     183          RTS
0000113E                           184           
0000113E                           185  ;-------------------------------------------
0000113E                           186      ;According to instructions, need to 
0000113E                           187      ;clear buffer before decoding questions 
0000113E                           188  ;-------------------------------------------
0000113E                           189  OP_DATA_CLR: 
0000113E  4283                     190          CLR.L   D3
00001140  163C 0040                191          MOVE.B  #bufferSize ,D3
00001144  47F9 00002619            192          LEA     buffer,A3
0000114A                           193          
0000114A  4EB9 00001154            194          JSR     OP_DATA_CLR_LOOP
00001150                           195          
00001150  284B                     196          MOVEA.L A3, A4      ; Save the start of the address  
00001152  4E75                     197          RTS
00001154                           198          
00001154                           199  OP_DATA_CLR_LOOP:
00001154  2678 0000                200          MOVEA.L $0, A3
00001158  16FC 0000                201          MOVE.B  #0,(A3)+
0000115C  5343                     202          SUBI    #1,D3
0000115E  6EF4                     203          BGT     OP_DATA_CLR_LOOP
00001160  4E75                     204          RTS
00001162                           205          
00001162                           206  REPEAT_PROGRAM: 
00001162                           207          ; Output text to continue 
00001162  43F9 0000252D            208          LEA     REPEAT_MESS, A1
00001168  103C 000E                209          MOVE.B  #task14,D0
0000116C  4E4F                     210          TRAP    #15           Display  message asking to repeat 
0000116E                           211          
0000116E  4281                     212          CLR.L   D1
00001170                           213          ; Ask for input 
00001170  227C 00000000            214          MOVEA.L #$0, A1 
00001176                           215          ; read a start address 
00001176  103C 0005                216          MOVE.B  #task5,D0     Gets input from the user
0000117A  4E4F                     217          TRAP    #15
0000117C                           218          ; If y = go to user input
0000117C  B27C 0059                219          CMP.W   #input_Y, D1
00001180  6700 0030                220          BEQ     RESTART_PROGRAM_START
00001184                           221  
00001184  B27C 0079                222          CMP.W   #input_yl, D1
00001188  6700 0028                223          BEQ     RESTART_PROGRAM_START        
0000118C                           224          ; if n = stop program. 
0000118C                           225          
0000118C  B27C 004E                226          CMP.W   #input_N, D1
00001190  6700 0028                227          BEQ     END_PROGRAM
00001194                           228          
00001194  B27C 004E                229          CMP.W   #input_nl, D1
00001198  6700 0020                230          BEQ     END_PROGRAM
0000119C                           231          
0000119C                           232          ; Error Retry: 
0000119C  227C 00000000            233          MOVEA.L #$0, A1 
000011A2  43F9 00002561            234          LEA     INVALID_MESS, A1
000011A8  103C 000E                235          MOVE.B  #task14,D0
000011AC  4E4F                     236          TRAP    #15           Display  Error Message
000011AE                           237          
000011AE  4EF8 1162                238          JMP     REPEAT_PROGRAM
000011B2                           239          
000011B2                           240  RESTART_PROGRAM_START: 
000011B2  4EB8 1102                241          JSR     CLEAR_SCREEN
000011B6  4EF8 1018                242          JMP     RESTART_PROGRAM
000011BA                           243          
000011BA                           244  END_PROGRAM: 
000011BA  4EF9 000024E6            245         JMP      DONE 
000011C0                           246      
000011C0                           247  OP_JMP_TABLE:
000011C0  4EF9 00001220            248          JMP     INDEX0000        ; ORI
000011C6  4EF9 0000123E            249          JMP     INDEX0001        ; MOVE BYTE
000011CC  4EF9 00001266            250          JMP     INDEX0010        ; MOVE WORD / MOVEA
000011D2  4EF9 000012A6            251          JMP     INDEX0011        ; MOVE LONG / MOVEA
000011D8  4EF9 000012E6            252          JMP     INDEX0100        ; NOP, MOVEM, LEA
000011DE  4EF9 00001304            253          JMP     INDEX0101        ; ADDQ
000011E4  4EF9 00001320            254          JMP     INDEX0110        ; BRA, BSR
000011EA  4EF9 0000133E            255          JMP     INDEX0111        ; MOVEQ
000011F0  4EF9 00001362            256          JMP     INDEX1000        ; DIVU
000011F6  4EF9 00001382            257          JMP     INDEX1001        ; SUB
000011FC  4EF9 00001398            258          JMP     INDEX1010
00001202  4EF9 0000139E            259          JMP     INDEX1011        ; CMP 
00001208  4EF9 000013C2            260          JMP     INDEX1100        ; MULU
0000120E  4EF9 000013EE            261          JMP     INDEX1101        ; ADD, ADDA
00001214  4EF9 00001408            262          JMP     INDEX1110        ; ASL, ASR
0000121A  4EF9 00001446            263          JMP     INDEX1111        ; Unsupported    
00001220                           264  
00001220                           265  ; ------------------------------------
00001220                           266  ;   OP ORI 
00001220                           267  ; ------------------------------------        
00001220                           268  INDEX0000: 
00001220  41F9 0000144C            269          LEA   OP_0000_TABLE, A0  
00001226  4281                     270          CLR.L   D1
00001228  4282                     271          CLR.L   D2
0000122A  2200                     272          MOVE.L  D0,D1               ; Current instruct word
0000122C  0241 0F00                273          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001230  143C 0008                274          MOVE.B  #right8, D2         
00001234  E469                     275          LSR.W   D2,D1               ; D1 = 2nd nibble
00001236  C2FC 0006                276          MULU    #6,D1               
0000123A  4EF0 1000                277          JMP      0(A0,D1)
0000123E                           278          
0000123E                           279  ; ------------------------------------
0000123E                           280  ;   OP MOVE.B 
0000123E                           281  ; ------------------------------------
0000123E                           282  INDEX0001: 
0000123E  4283                     283          CLR.L   D3
00001240  163C 0001                284          MOVE.B   #1, D3        ; byte size
00001244  16FC 004D                285          MOVE.B  #'M', (A3)+
00001248  16FC 004F                286          MOVE.B  #'O', (A3)+
0000124C  16FC 0056                287          MOVE.B  #'V', (A3)+    
00001250  16FC 0045                288          MOVE.B  #'E', (A3)+
00001254  16FC 002E                289          MOVE.B  #'.', (A3)+ 
00001258  16FC 0042                290          MOVE.B  #'B', (A3)+
0000125C                           291          
0000125C                           292          ; Call MOVE EA 
0000125C  4EB9 00001C4C            293          JSR     MOVEA_EA
00001262  4EF8 1138                294          JMP     OP_FINISH
00001266                           295          
00001266                           296  ; ------------------------------------
00001266                           297  ;   OP MOVEA / MOVE long
00001266                           298  ; ------------------------------------
00001266                           299  INDEX0010:
00001266  4283                     300          CLR.L   D3
00001268  4282                     301          CLR.L   D2
0000126A  163C 0004                302          MOVE.B   #4, D3        ; Long  size
0000126E                           303          
0000126E  16FC 004D                304          MOVE.B  #'M', (A3)+
00001272  16FC 004F                305          MOVE.B  #'O', (A3)+
00001276  16FC 0056                306          MOVE.B  #'V', (A3)+
0000127A  16FC 0045                307          MOVE.B  #'E', (A3)+
0000127E                           308          
0000127E  4281                     309          CLR.L   D1
00001280  2200                     310          MOVE.L  D0,D1               ; Current instruct word
00001282  0241 01C0                311          ANDI.W  #destmode,D1         ; Extract dest mode
00001286  143C 0006                312          MOVE.B  #right6, D2         
0000128A  E469                     313          LSR.W   D2,D1 
0000128C                           314  
0000128C  B23C 0001                315          CMP.B   #1, D1
00001290  6700 044A                316          BEQ     OP_MOVEAL               
00001294                           317  
00001294  16FC 002E                318          MOVE.B  #'.', (A3)+
00001298  16FC 004C                319          MOVE.B  #'L', (A3)+
0000129C                           320          
0000129C                           321          ; Call MOVE EA
0000129C  4EB9 00001C4C            322          JSR     MOVEA_EA
000012A2  4EF8 1138                323          JMP     OP_FINISH
000012A6                           324          
000012A6                           325  ; ------------------------------------
000012A6                           326  ;   OP MOVEA / MOVE word  
000012A6                           327  ; ------------------------------------
000012A6                           328  INDEX0011:
000012A6  4283                     329          CLR.L   D3
000012A8  4281                     330          CLR.L   D1
000012AA  4282                     331          CLR.L   D2
000012AC  163C 0002                332          MOVE.B   #2, D3        ; word 
000012B0                           333          
000012B0  16FC 004D                334          MOVE.B  #'M', (A3)+
000012B4  16FC 004F                335          MOVE.B  #'O', (A3)+
000012B8  16FC 0056                336          MOVE.B  #'V', (A3)+
000012BC  16FC 0045                337          MOVE.B  #'E', (A3)+
000012C0                           338          
000012C0  2200                     339          MOVE.L  D0,D1                ; Current instruct word
000012C2  0241 01C0                340          ANDI.W  #destmode,D1         ; Extract dest mode
000012C6  143C 0006                341          MOVE.B  #right6, D2         
000012CA  E469                     342          LSR.W   D2,D1 
000012CC                           343          
000012CC  B23C 0001                344          CMP.B   #1, D1
000012D0  6700 03F4                345          BEQ     OP_MOVEAW
000012D4                           346          
000012D4  16FC 002E                347          MOVE.B  #'.', (A3)+
000012D8  16FC 0057                348          MOVE.B  #'W', (A3)+
000012DC                           349          
000012DC                           350          ; Call MOVE EA
000012DC  4EB9 00001C4C            351          JSR     MOVEA_EA
000012E2  4EF8 1138                352          JMP     OP_FINISH
000012E6                           353          
000012E6                           354  ; ------------------------------------
000012E6                           355  ;   OP  NOP, MOVEM, LEA 
000012E6                           356  ; ------------------------------------ 
000012E6                           357  INDEX0100: 
000012E6  4281                     358          CLR.L   D1
000012E8  4282                     359          CLR.L   D2
000012EA  41F9 000014AC            360          LEA     OP_01000_TABLE, A0
000012F0  2200                     361          MOVE.L  D0,D1               ; Current instruct word
000012F2  0241 0F00                362          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
000012F6  143C 0008                363          MOVE.B  #right8, D2         
000012FA  E469                     364          LSR.W   D2,D1               ; D1 = 2nd nibble
000012FC  C2FC 0006                365          MULU    #6,D1               
00001300  4EF0 1000                366          JMP      0(A0,D1)           ; JMP to table
00001304                           367  
00001304                           368  ; -------------------------------
00001304                           369  ;   OP ADDQ / SUBQ  
00001304                           370  ; --------------------------------
00001304                           371  INDEX0101:
00001304  4281                     372          CLR.L   D1 
00001306  4282                     373          CLR.L   D2
00001308  2200                     374          MOVE.L  D0,D1               ; Current instruct word
0000130A  0241 0F00                375          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
0000130E  143C 0008                376          MOVE.B  #right8, D2         
00001312  E469                     377          LSR.W   D2,D1               ; D1 = 2nd nibble
00001314                           378      
00001314  0201 0001                379          ANDI.B  #1, D1
00001318  6700 0520                380          BEQ     OP_ADDQ             ; If last bit = 1 --> ADDQ 
0000131C  6600 0502                381          BNE     OP_SUBQ             ; If lat bit = 0 --> SUBQ
00001320                           382          
00001320                           383          
00001320                           384  ; ------------------------------------
00001320                           385  ;   OP BRA,BSR  
00001320                           386  ; ------------------------------------
00001320                           387  INDEX0110: 
00001320  41F9 0000150C            388          LEA     OP_0110_TABLE, A0
00001326                           389          
00001326  4282                     390          CLR.L   D2
00001328  4281                     391          CLR.L   D1
0000132A  2200                     392          MOVE.L  D0,D1               ; Current instruct word
0000132C  0241 0F00                393          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001330  143C 0008                394          MOVE.B  #right8, D2         
00001334  E469                     395          LSR.W   D2,D1               ; D1 = 2nd nibble
00001336  C2FC 0006                396          MULU    #6,D1               
0000133A  4EF0 1000                397          JMP     0(A0,D1)
0000133E                           398  
0000133E                           399  ; ------------------------------------
0000133E                           400  ;   OP MOVEQ --> DONE
0000133E                           401  ; ------------------------------------
0000133E                           402  INDEX0111: 
0000133E  16FC 004D                403          MOVE.B  #'M', (A3)+
00001342  16FC 004F                404          MOVE.B  #'O', (A3)+
00001346  16FC 0056                405          MOVE.B  #'V', (A3)+
0000134A  16FC 0045                406          MOVE.B  #'E', (A3)+
0000134E  16FC 0051                407          MOVE.B  #'Q', (A3)+
00001352                           408          
00001352  4283                     409          CLR.L   D3
00001354  163C 0004                410          MOVE.B   #4, D3        ; long 
00001358                           411          
00001358  4EB9 00001CE6            412          JSR     MOVEQ_EA
0000135E  4EF8 1138                413          JMP     OP_FINISH
00001362                           414  
00001362                           415  ; ----------------------------------------------------------
00001362                           416  ;   OP DIVU, DIVS   -->  DONE
00001362                           417  ; ---------------------------------------------------------
00001362                           418  INDEX1000: 
00001362  4283                     419          CLR.L   D3
00001364  163C 0002                420          MOVE.B   #2, D3        ; word
00001368                           421          
00001368  4281                     422          CLR.L   D1
0000136A  2200                     423          MOVE.L  D0,D1               ; Current instruct word
0000136C  0241 0100                424          ANDI.W  #$0100,D1         ; Extract 2nd nibble
00001370  143C 0008                425          MOVE.B  #right8, D2         
00001374  E469                     426          LSR.W   D2,D1               ; D1 = 2nd nibble
00001376                           427  
00001376  B23C 0001                428          CMP.B  #1, D1
0000137A  6700 06BE                429          BEQ     OP_DIVS           ; If last bit = 1 --> DIVS 
0000137E  6600 06D4                430          BNE     OP_DIVU            ; If lat bit = 0 --> DIVU
00001382                           431                  
00001382                           432  ; ------------------------------------
00001382                           433  ;   OP SUB --> Need to Implement
00001382                           434  ; ------------------------------------ 
00001382                           435  INDEX1001: 
00001382  16FC 0053                436          MOVE.B  #'S', (A3)+
00001386  16FC 0055                437          MOVE.B  #'U', (A3)+
0000138A  16FC 0042                438          MOVE.B  #'B', (A3)+  
0000138E  16FC 002E                439          MOVE.B  #'.', (A3)+   
00001392                           440  
00001392  4EF9 000018BA            441          JMP     OP_SUB
00001398                           442  
00001398                           443  ; ------------------------------------
00001398                           444  ;   OP Code not supported 
00001398                           445  ; ------------------------------------         
00001398                           446  INDEX1010: 
00001398  4EF9 00001BD0            447          JMP     OP_UNSUPPORTED
0000139E                           448          
0000139E                           449  ; ------------------------------------
0000139E                           450  ;   OP CMP --> Forgot to do this one lol 
0000139E                           451  ; ------------------------------------         
0000139E                           452  INDEX1011: 
0000139E  16FC 0043                453          MOVE.B  #'C', (A3)+
000013A2  16FC 004D                454          MOVE.B  #'M', (A3)+
000013A6  16FC 0050                455          MOVE.B  #'P', (A3)+
000013AA  16FC 002E                456          MOVE.B  #'.', (A3)+
000013AE                           457          
000013AE  4281                     458          CLR.L   D1 
000013B0  2200                     459          MOVE.L  D0,D1               ; Current instruct word
000013B2  0241 00C0                460          ANDI.W  #size,D1         ; Extract 2nd nibble
000013B6  143C 0008                461          MOVE.B  #right8, D2         
000013BA  E469                     462          LSR.W   D2,D1               ; D1 = 2nd nibble
000013BC                           463          
000013BC  4EF9 00001A6E            464          JMP     OP_CMP
000013C2                           465          
000013C2                           466  ; ------------------------------------
000013C2                           467  ;   OP MULU --> Done
000013C2                           468  ; ------------------------------------ 
000013C2                           469  INDEX1100: 
000013C2  16FC 004D                470          MOVE.B  #'M', (A3)+
000013C6  16FC 0055                471          MOVE.B  #'U', (A3)+
000013CA  16FC 004C                472          MOVE.B  #'L', (A3)+    
000013CE                           473          
000013CE  4283                     474          CLR.L   D3
000013D0  163C 0002                475          MOVE.B   #2, D3
000013D4                           476  
000013D4  4281                     477          CLR.L   D1
000013D6  2200                     478          MOVE.L  D0,D1               ; Current instruct word
000013D8  0241 0100                479          ANDI.W  #$100,D1         ; Extract 2nd nibble
000013DC  143C 0008                480          MOVE.B  #right8, D2         
000013E0  E469                     481          LSR.W   D2,D1               ; 
000013E2                           482          
000013E2  B23C 0001                483          CMP.B   #1, D1
000013E6  6700 0644                484          BEQ     OP_MULS  
000013EA  6600 0632                485          BNE     OP_MULU
000013EE                           486          
000013EE                           487  ; ------------------------------------
000013EE                           488  ;   OP ADD,ADDA     --> Needs a lot of work 
000013EE                           489  ; ------------------------------------
000013EE                           490  INDEX1101:
000013EE  4281                     491          CLR.L   D1 
000013F0  2200                     492          MOVE.L  D0,D1               ; Current instruct word
000013F2  0241 00C0                493          ANDI.W  #size,D1         ; Extract dest mode
000013F6  143C 0006                494          MOVE.B  #right6, D2         
000013FA  E469                     495          LSR.W   D2,D1
000013FC                           496      
000013FC  B23C 0003                497          CMP.B   #3,D1
00001400  6700 0524                498          BEQ     OP_ADDA
00001404  6600 0576                499          BNE     OP_ADD
00001408                           500          
00001408                           501  ; ------------------------------------
00001408                           502  ;   OP ASL,ASR    --> Figure out Rotation 
00001408                           503  ; ------------------------------------ 
00001408                           504  INDEX1110:       
00001408                           505  
00001408                           506          ; Extract the size (7 -8 )
00001408  4281                     507          CLR.L   D1 
0000140A  2200                     508          MOVE.L  D0,D1               ; Current instruct word
0000140C  0241 00C0                509          ANDI.W  #size,D1         ; Extract 2nd nibble
00001410  143C 0006                510          MOVE.B  #right6, D2             
00001414  E469                     511          LSR.W   D2,D1               ; 
00001416                           512          
00001416  4283                     513          CLR.L   D3
00001418  1601                     514          MOVE.B   D1, D3 
0000141A                           515  
0000141A  B63C 0003                516          CMP.B #3, D3 
0000141E  6700 0008                517          BEQ     INDEX1110_MEM
00001422                           518  
00001422  4EF9 00001B04            519          JMP     OP_ROTATION_CHECK
00001428                           520  INDEX1110_MEM:
00001428                           521          ; Memory Register Shift 11  
00001428  41F9 0000156C            522          LEA     OP_1110_TABLE, A0  
0000142E  4281                     523          CLR.L   D1
00001430  4282                     524          CLR.L   D2
00001432  2200                     525          MOVE.L  D0,D1               ; Current instruct word
00001434  0241 0F00                526          ANDI.W  #nibble2,D1         ; Extract 2nd nibble
00001438  143C 0008                527          MOVE.B  #right8, D2         
0000143C  E469                     528          LSR.W   D2,D1               ; D1 = 2nd nibble
0000143E  C2FC 0006                529          MULU    #6,D1               
00001442  4EF0 1000                530          JMP     0(A0,D1)
00001446                           531  ; ------------------------------------
00001446                           532  ;   OP Code not supported 
00001446                           533  ; ------------------------------------         
00001446                           534  INDEX1111:
00001446  4EF9 00001BD0            535          JMP     OP_UNSUPPORTED
0000144C                           536          
0000144C                           537  ; ------------------------------------
0000144C                           538  ;   JUMP Tables for OP codes 
0000144C                           539  ; ------------------------------------         
0000144C                           540  OP_0000_TABLE: 
0000144C  4EF9 000015CC            541          JMP     OP_ORI              ; 0: ORI
00001452  4EF9 00001BD0            542          JMP     OP_UNSUPPORTED      ; 1: Not supported  
00001458  4EF9 000015E2            543          JMP     OP_ANDI             ; 2: Not supported      ANDI
0000145E  4EF9 00001BD0            544          JMP     OP_UNSUPPORTED      ; 3: Not supported      
00001464  4EF9 000015FC            545          JMP     OP_SUBI             ; 4: Not supported      SUBI
0000146A  4EF9 00001BD0            546          JMP     OP_UNSUPPORTED      ; 5: Not supported
00001470  4EF9 00001616            547          JMP     OP_ADDI             ; 6: Not supported      ADDI
00001476  4EF9 00001BD0            548          JMP     OP_UNSUPPORTED      ; 7: Not supported
0000147C  4EF9 00001BD0            549          JMP     OP_UNSUPPORTED      ; 8: Not supported
00001482  4EF9 00001BD0            550          JMP     OP_UNSUPPORTED      ; 9: Not supported
00001488  4EF9 00001630            551          JMP     OP_EORI             ; A: Not supported      EORI
0000148E  4EF9 00001BD0            552          JMP     OP_UNSUPPORTED      ; B: Not supported
00001494  4EF9 0000164A            553          JMP     OP_CMPI             ; C: Not supported      CMPI
0000149A  4EF9 00001BD0            554          JMP     OP_UNSUPPORTED      ; D: Not supported
000014A0  4EF9 00001BE0            555          JMP     OP_ERROR            ; E: Not supported      INVALID
000014A6  4EF9 00001BD0            556          JMP     OP_UNSUPPORTED      ; F: Not supported  
000014AC                           557  
000014AC                           558  OP_01000_TABLE: 
000014AC  4EF9 00001BD0            559          JMP     OP_UNSUPPORTED      ; 0: Not supported      MOVE to SR , NEGX
000014B2  4EF9 000016F2            560          JMP     OP_LEA              ; 1: LEA An = 0   
000014B8  4EF9 00001BD0            561          JMP     OP_UNSUPPORTED      ; 2: Not supported      CLR
000014BE  4EF9 000016F2            562          JMP     OP_LEA              ; 3: LEA An = 1      
000014C4  4EF9 00001BD0            563          JMP     OP_UNSUPPORTED      ; 4: Not supported      NEG , MOVE to CCR    
000014CA  4EF9 000016F2            564          JMP     OP_LEA              ; 5: LEA An = 2     
000014D0  4EF9 00001BD0            565          JMP     OP_UNSUPPORTED      ; 6: Not supported      NOT      
000014D6  4EF9 000016F2            566          JMP     OP_LEA              ; 7: LEA An = 3
000014DC  4EF9 00001730            567          JMP     OP_MOVEM0           ; 8: MOVEM D = 0     
000014E2  4EF9 000016F2            568          JMP     OP_LEA              ; 9: LEA An = 4
000014E8  4EF9 00001BD0            569          JMP     OP_UNSUPPORTED      ; A: Not supported      
000014EE  4EF9 000016F2            570          JMP     OP_LEA              ; B: LEA An = 5
000014F4  4EF9 0000170E            571          JMP     OP_MOVEM1           ; C: MOVEM D = 1      
000014FA  4EF9 000016F2            572          JMP     OP_LEA              ; D: LEA An = 6
00001500  4EF9 00001798            573          JMP     OP_NOP_RTS_RTE      ; E: NOP, RTE,RTS, STOP    
00001506  4EF9 000016F2            574          JMP     OP_LEA              ; F: LEA An = 7
0000150C                           575      
0000150C                           576  OP_0110_TABLE: 
0000150C  4EF9 00001A08            577          JMP     OP_BRA              ; 0: BRA
00001512  4EF9 000019F2            578          JMP     OP_BSR              ; 1: BSR  
00001518  4EF9 00001BD0            579          JMP     OP_UNSUPPORTED      ; 2: Not supported      BHI
0000151E  4EF9 00001BD0            580          JMP     OP_UNSUPPORTED      ; 3: Not supported      BLS
00001524  4EF9 00001BD0            581          JMP     OP_UNSUPPORTED      ; 4: Not supported      BCC
0000152A  4EF9 00001BD0            582          JMP     OP_UNSUPPORTED      ; 5: Not supported      BCS
00001530  4EF9 00001BD0            583          JMP     OP_UNSUPPORTED      ; 6: Not supported      BNE
00001536  4EF9 00001BD0            584          JMP     OP_UNSUPPORTED      ; 7: Not supported      BEQ
0000153C  4EF9 00001BD0            585          JMP     OP_UNSUPPORTED      ; 8: Not supported      BVC
00001542  4EF9 00001BD0            586          JMP     OP_UNSUPPORTED      ; 9: Not supported      BVS
00001548  4EF9 00001BD0            587          JMP     OP_UNSUPPORTED      ; A: Not supported      BPL
0000154E  4EF9 00001BD0            588          JMP     OP_UNSUPPORTED      ; B: Not supported      BMI
00001554  4EF9 00001BD0            589          JMP     OP_UNSUPPORTED      ; C: Not supported      BGE
0000155A  4EF9 00001BD0            590          JMP     OP_UNSUPPORTED      ; D: Not supported      BLT
00001560  4EF9 00001BD0            591          JMP     OP_UNSUPPORTED      ; E: Not supported      BGT
00001566  4EF9 00001BD0            592          JMP     OP_UNSUPPORTED      ; F: Not supported      BLE
0000156C                           593          
0000156C                           594  OP_1110_TABLE: 
0000156C  4EF9 00001AE8            595          JMP     OP_ASR_M              ; 0: ASR
00001572  4EF9 00001ACC            596          JMP     OP_ASL_M              ; 1: ASL  
00001578  4EF9 00001BD0            597          JMP     OP_UNSUPPORTED      ; 2: Not Supported      LSR     
0000157E  4EF9 00001BD0            598          JMP     OP_UNSUPPORTED      ; 3: Not Supported      LSL      
00001584  4EF9 00001BD0            599          JMP     OP_UNSUPPORTED      ; 4: Not Supported      ROXR     
0000158A  4EF9 00001BD0            600          JMP     OP_UNSUPPORTED      ; 5: Not supported      ROXL      
00001590  4EF9 00001BD0            601          JMP     OP_UNSUPPORTED      ; 6: Not supported      ROR
00001596  4EF9 00001BD0            602          JMP     OP_UNSUPPORTED      ; 7: Not supported      ROL
0000159C  4EF9 00001BE0            603          JMP     OP_ERROR            ; 8: Error     
000015A2  4EF9 00001BE0            604          JMP     OP_ERROR            ; 9: Error       
000015A8  4EF9 00001BE0            605          JMP     OP_ERROR            ; A: Error       
000015AE  4EF9 00001BE0            606          JMP     OP_ERROR            ; B: Error        
000015B4  4EF9 00001BE0            607          JMP     OP_ERROR            ; C: Error        
000015BA  4EF9 00001BE0            608          JMP     OP_ERROR            ; D: Error        
000015C0  4EF9 00001BE0            609          JMP     OP_ERROR            ; E: Error        
000015C6  4EF9 00001BE0            610          JMP     OP_ERROR            ; F: Error        
000015CC                           611  
000015CC                           612  ;---------------------------------------------------
000015CC                           613  ; ORI. Gathering instruct size and calling EA
000015CC                           614  ;-------------------------------------------------      
000015CC                           615  OP_ORI:
000015CC  16FC 004F                616          MOVE.B  #'O', (A3)+
000015D0  16FC 0052                617          MOVE.B  #'R', (A3)+
000015D4  16FC 0049                618          MOVE.B  #'I', (A3)+
000015D8  16FC 002E                619          MOVE.B  #'.', (A3)+
000015DC  4EF9 00001664            620          JMP     OP_ORI_SIZE_EXTACT
000015E2                           621  
000015E2                           622  OP_ANDI:     
000015E2  16FC 0041                623          MOVE.B  #'A', (A3)+
000015E6  16FC 004E                624          MOVE.B  #'N', (A3)+
000015EA  16FC 0044                625          MOVE.B  #'D', (A3)+
000015EE  16FC 0049                626          MOVE.B  #'I', (A3)+
000015F2  16FC 002E                627          MOVE.B  #'.', (A3)+
000015F6  4EF9 00001664            628          JMP     OP_ORI_SIZE_EXTACT
000015FC                           629  
000015FC                           630  OP_SUBI:     
000015FC  16FC 0053                631          MOVE.B  #'S', (A3)+
00001600  16FC 0055                632          MOVE.B  #'U', (A3)+
00001604  16FC 0042                633          MOVE.B  #'B', (A3)+
00001608  16FC 0049                634          MOVE.B  #'I', (A3)+
0000160C  16FC 002E                635          MOVE.B  #'.', (A3)+
00001610  4EF9 00001664            636          JMP     OP_ORI_SIZE_EXTACT
00001616                           637          
00001616                           638  OP_ADDI:     
00001616  16FC 0041                639          MOVE.B  #'A', (A3)+
0000161A  16FC 0044                640          MOVE.B  #'D', (A3)+
0000161E  16FC 0044                641          MOVE.B  #'D', (A3)+
00001622  16FC 0049                642          MOVE.B  #'I', (A3)+
00001626  16FC 002E                643          MOVE.B  #'.', (A3)+
0000162A  4EF9 00001664            644          JMP     OP_ORI_SIZE_EXTACT
00001630                           645          
00001630                           646  OP_EORI:     
00001630  16FC 0045                647          MOVE.B  #'E', (A3)+
00001634  16FC 004F                648          MOVE.B  #'O', (A3)+
00001638  16FC 0052                649          MOVE.B  #'R', (A3)+
0000163C  16FC 0049                650          MOVE.B  #'I', (A3)+
00001640  16FC 002E                651          MOVE.B  #'.', (A3)+
00001644  4EF9 00001664            652          JMP     OP_ORI_SIZE_EXTACT
0000164A                           653  
0000164A                           654  OP_CMPI:     
0000164A  16FC 0043                655          MOVE.B  #'C', (A3)+
0000164E  16FC 004D                656          MOVE.B  #'M', (A3)+
00001652  16FC 0050                657          MOVE.B  #'P', (A3)+
00001656  16FC 0049                658          MOVE.B  #'I', (A3)+
0000165A  16FC 002E                659          MOVE.B  #'.', (A3)+
0000165E  4EF9 00001664            660          JMP     OP_ORI_SIZE_EXTACT   
00001664                           661       
00001664                           662  OP_ORI_SIZE_EXTACT:     
00001664  4281                     663          CLR.L   D1    
00001666  2200                     664          MOVE.L  D0,D1               ; Current instruct word
00001668  0241 00C0                665          ANDI.W  #size,D1         ; Extract 2nd nibble
0000166C  143C 0006                666          MOVE.B  #right6, D2         
00001670  E469                     667          LSR.W   D2,D1               ; D1 = 2nd nibble
00001672                           668  
00001672  B23C 0000                669          CMP.B   #0,D1       
00001676  6700 0012                670          BEQ     HELPER_ORIB             ;--> BYTE
0000167A                           671          
0000167A  B23C 0001                672          CMP.B   #1, D1      ;--> Word
0000167E  6700 001E                673          BEQ     HELPER_ORIW
00001682                           674          
00001682  B23C 0002                675          CMP.B   #2, D1      ; --> Long
00001686  6700 002A                676          BEQ     HELPER_ORIL
0000168A                           677          
0000168A                           678  
0000168A                           679              
0000168A                           680  HELPER_ORIB:
0000168A  4283                     681          CLR.L   D3
0000168C  163C 0001                682          MOVE.B   #1, D3
00001690  16FC 0042                683          MOVE.B  #'B', (A3)+
00001694                           684               
00001694  4EB9 00001BF0            685          JSR     IMMEDIATE_EA  
0000169A  4EF8 1138                686          JMP     OP_FINISH
0000169E                           687      
0000169E                           688  HELPER_ORIW:
0000169E  4283                     689          CLR.L   D3
000016A0  163C 0002                690          MOVE.B   #2, D3
000016A4  16FC 0057                691          MOVE.B  #'W', (A3)+
000016A8                           692      
000016A8  4EB9 00001BF0            693          JSR     IMMEDIATE_EA   
000016AE  4EF8 1138                694          JMP     OP_FINISH
000016B2                           695          
000016B2                           696  HELPER_ORIL:
000016B2  4283                     697          CLR.L   D3
000016B4  163C 0004                698          MOVE.B   #4, D3
000016B8  16FC 004C                699          MOVE.B  #'L', (A3)+
000016BC                           700      
000016BC  4EB9 00001BF0            701          JSR     IMMEDIATE_EA     
000016C2  4EF8 1138                702          JMP     OP_FINISH
000016C6                           703  ;---------------------------------------------------
000016C6                           704  ; MOVEA . calling EA
000016C6                           705  ;-------------------------------------------------         
000016C6                           706  OP_MOVEAW: 
000016C6  16FC 0041                707          MOVE.B  #'A', (A3)+
000016CA  16FC 002E                708          MOVE.B  #'.', (A3)+
000016CE  16FC 0057                709          MOVE.B  #'W', (A3)+
000016D2                           710  
000016D2  4EB9 00001C4C            711          JSR     MOVEA_EA
000016D8  4EF8 1138                712          JMP     OP_FINISH
000016DC                           713          
000016DC                           714  OP_MOVEAL: 
000016DC  16FC 0041                715          MOVE.B  #'A', (A3)+
000016E0  16FC 002E                716          MOVE.B  #'.', (A3)+
000016E4  16FC 004C                717          MOVE.B  #'L', (A3)+
000016E8                           718  
000016E8                           719          ; Call EA for MOVEA
000016E8  4EB9 00001C4C            720          JSR     MOVEA_EA
000016EE  4EF8 1138                721          JMP     OP_FINISH
000016F2                           722     
000016F2                           723  ;---------------------------------------------------
000016F2                           724  ; LEA . calling EA
000016F2                           725  ;-------------------------------------------------        
000016F2                           726  OP_LEA: 
000016F2  16FC 004C                727          MOVE.B  #'L', (A3)+
000016F6  16FC 0045                728          MOVE.B  #'E', (A3)+
000016FA  16FC 0041                729          MOVE.B  #'A', (A3)+
000016FE                           730      
000016FE                           731          ; Long Size 
000016FE  4283                     732          CLR.L   D3
00001700  163C 0004                733          MOVE.B   #4, D3
00001704                           734         
00001704                           735          ; Call EA for LEA 
00001704  4EB9 00001D1E            736          JSR     LEA_EA
0000170A  4EF8 1138                737          JMP     OP_FINISH
0000170E                           738          
0000170E                           739  ;---------------------------------------------------
0000170E                           740  ; MOVEM . calling EA and calculating instruct SIZE
0000170E                           741  ;-------------------------------------------------      
0000170E                           742  OP_MOVEM1: 
0000170E  16FC 004D                743          MOVE.B  #'M', (A3)+
00001712  16FC 004F                744          MOVE.B  #'O', (A3)+
00001716  16FC 0056                745          MOVE.B  #'V', (A3)+
0000171A  16FC 0045                746          MOVE.B  #'E', (A3)+
0000171E  16FC 004D                747          MOVE.B  #'M', (A3)+
00001722  16FC 002E                748          MOVE.B  #'.', (A3)+
00001726                           749          
00001726  4284                     750          CLR.L   D4
00001728  183C 0001                751          MOVE.B   #1, D4
0000172C                           752          
0000172C  6000 0024                753          BRA     MOVEM_SIZE_CALC 
00001730                           754  OP_MOVEM0: 
00001730  16FC 004D                755          MOVE.B  #'M', (A3)+
00001734  16FC 004F                756          MOVE.B  #'O', (A3)+
00001738  16FC 0056                757          MOVE.B  #'V', (A3)+
0000173C  16FC 0045                758          MOVE.B  #'E', (A3)+
00001740  16FC 004D                759          MOVE.B  #'M', (A3)+
00001744  16FC 002E                760          MOVE.B  #'.', (A3)+    
00001748                           761          
00001748  4284                     762          CLR.L   D4
0000174A  183C 0000                763          MOVE.B   #0, D4
0000174E                           764          
0000174E  6000 0002                765          BRA     MOVEM_SIZE_CALC  
00001752                           766  
00001752                           767  MOVEM_SIZE_CALC: 
00001752  4281                     768          CLR.L   D1
00001754  2200                     769          MOVE.L  D0,D1               ; Current instruct word
00001756  0241 0040                770          ANDI.W  #$0040,D1         ; Extract S 
0000175A  143C 0006                771          MOVE.B  #right6, D2         
0000175E  E469                     772          LSR.W   D2,D1               ; 
00001760                           773          
00001760  B23C 0000                774          CMP.B   #0, D1
00001764  6700 000A                775          BEQ     MOVEM_W
00001768                           776          
00001768  B23C 0001                777          CMP.B   #1, D1
0000176C  6700 0016                778          BEQ     MOVEM_L
00001770                           779          
00001770                           780  MOVEM_W: 
00001770  16FC 0057                781          MOVE.B  #'W', (A3)+
00001774  4283                     782          CLR.L   D3 
00001776  163C 0002                783          MOVE.B   #2,D3 
0000177A                           784          
0000177A                           785          ; CALL MOVEM EA
0000177A  4EB9 00001C8E            786          JSR     MOVEM_EA
00001780  4EF8 1138                787          JMP     OP_FINISH
00001784                           788          
00001784                           789  MOVEM_L: 
00001784  16FC 004C                790          MOVE.B  #'L', (A3)+
00001788  4283                     791          CLR.L   D3 
0000178A  163C 0004                792          MOVE.B   #4,D3 
0000178E                           793          
0000178E                           794          ; CALL MOVEM EA 
0000178E  4EB9 00001C8E            795          JSR     MOVEM_EA
00001794  4EF8 1138                796          JMP     OP_FINISH       
00001798                           797  ;---------------------------------------------------
00001798                           798  ; NOP, RTS, RTE, STOP
00001798                           799  ;-------------------------------------------------      
00001798                           800  OP_NOP_RTS_RTE: 
00001798  4281                     801          CLR.L   D1
0000179A  2200                     802          MOVE.L  D0,D1               ; Current instruct word
0000179C                           803          
0000179C                           804          ; Check third 3 nibble for 0111 if not error 
0000179C  0241 0FF0                805          ANDI.W  #$0FF0, D1
000017A0  143C 0004                806          MOVE.B  #right4, D2         
000017A4  E469                     807          LSR.W   D2,D1               ; D1 = 2nd nibble
000017A6                           808          
000017A6  B27C 0E70                809          CMP.W   #$E70, D1
000017AA  6700 0434                810          BEQ     OP_ERROR
000017AE                           811          
000017AE  4281                     812          CLR.L   D1
000017B0  2200                     813          MOVE.L  D0,D1               ; Current instruct word
000017B2                           814          
000017B2                           815          ; Check last 4 bits 
000017B2  0241 000F                816          ANDI.W  #$000F, D1
000017B6                           817  
000017B6  B23C 0001                818          CMP.B   #1, D1       NOP --> 0001 
000017BA  6700 0020                819          BEQ     OP_NOP
000017BE                           820  
000017BE  B23C 0002                821          CMP.B   #2, D1       NOP --> 0001 
000017C2  6700 0028                822          BEQ     OP_STOP
000017C6                           823          
000017C6  B23C 0003                824          CMP.B   #3, D1      RTE --> 0011 
000017CA  6700 0034                825          BEQ     OP_RTE
000017CE                           826  
000017CE  B23C 0005                827          CMP.B   #5, D1      RTS --> 0101
000017D2  6700 003C                828          BEQ     OP_RTS       
000017D6                           829  
000017D6  4EF9 00001BE0            830          JMP     OP_ERROR    ERROR CODE
000017DC                           831  
000017DC                           832  OP_NOP: 
000017DC  16FC 004E                833          MOVE.B  #'N', (A3)+
000017E0  16FC 004F                834          MOVE.B  #'O', (A3)+
000017E4  16FC 0050                835          MOVE.B  #'P', (A3)+
000017E8                           836          
000017E8                           837          ; Loop back into OP Decode
000017E8  4EF8 1138                838          JMP     OP_FINISH
000017EC                           839  OP_STOP: 
000017EC  16FC 0053                840          MOVE.B  #'S', (A3)+
000017F0  16FC 0054                841          MOVE.B  #'T', (A3)+
000017F4  16FC 004F                842          MOVE.B  #'O', (A3)+
000017F8  16FC 0050                843          MOVE.B  #'P', (A3)+     
000017FC                           844  
000017FC  4EF8 1138                845          JMP     OP_FINISH   
00001800                           846  OP_RTE: 
00001800  16FC 0052                847          MOVE.B  #'R', (A3)+
00001804  16FC 0054                848          MOVE.B  #'T', (A3)+
00001808  16FC 0045                849          MOVE.B  #'E', (A3)+
0000180C                           850          
0000180C  4EF8 1138                851          JMP     OP_FINISH
00001810                           852  OP_RTS: 
00001810  16FC 0052                853          MOVE.B  #'R', (A3)+
00001814  16FC 0054                854          MOVE.B  #'T', (A3)+
00001818  16FC 0053                855          MOVE.B  #'S', (A3)+
0000181C                           856          
0000181C  4EF8 1138                857          JMP     OP_FINISH
00001820                           858          
00001820                           859  ;---------------------------------------------------
00001820                           860  ; SUBQ and ADDQ. Gathering instruct size and calling EA
00001820                           861  ;-------------------------------------------------        
00001820                           862  OP_SUBQ: 
00001820  16FC 0053                863          MOVE.B  #'S', (A3)+
00001824  16FC 0055                864          MOVE.B  #'U', (A3)+
00001828  16FC 0042                865          MOVE.B  #'B', (A3)+
0000182C  16FC 0051                866          MOVE.B  #'Q', (A3)+
00001830  16FC 002E                867          MOVE.B  #'.', (A3)+         
00001834  4EF9 00001854            868          JMP     HELPER__ADDSUBQ_SIZE_CAL      
0000183A                           869          
0000183A                           870          
0000183A                           871  OP_ADDQ:    
0000183A  16FC 0041                872          MOVE.B  #'A', (A3)+
0000183E  16FC 0044                873          MOVE.B  #'D', (A3)+
00001842  16FC 0044                874          MOVE.B  #'D', (A3)+
00001846  16FC 0051                875          MOVE.B  #'Q', (A3)+
0000184A  16FC 002E                876          MOVE.B  #'.', (A3)+         
0000184E  4EF9 00001854            877          JMP     HELPER__ADDSUBQ_SIZE_CAL
00001854                           878  
00001854                           879  HELPER__ADDSUBQ_SIZE_CAL:
00001854  4281                     880          CLR.L   D1 
00001856  2200                     881          MOVE.L  D0,D1               ; Current instruct word
00001858  0241 00C0                882          ANDI.W  #size,D1         ; Extract 2nd nibble
0000185C  143C 0006                883          MOVE.B  #right6, D2         
00001860  E469                     884          LSR.W   D2,D1               ; D1 = 2nd nibble
00001862                           885          
00001862  4283                     886          CLR.L   D3
00001864  1601                     887          MOVE.B   D1, D3  
00001866                           888  
00001866  B63C 0002                889          CMP.B   #2, D3
0000186A  6700 0012                890          BEQ     HELPER_ADDSUBQ_CONVERT_L
0000186E                           891          
0000186E  B63C 0001                892          CMP.B   #1, D3
00001872  6700 001E                893          BEQ     HELPER_ADDSUBQ_CONVERT_W
00001876                           894          
00001876  B63C 0000                895          CMP.B   #0, D3   
0000187A  6700 002A                896          BEQ     HELPER_ADDSUBQ_CONVERT_B
0000187E                           897          
0000187E                           898  HELPER_ADDSUBQ_CONVERT_L: 
0000187E  4283                     899          CLR.L   D3
00001880  163C 0004                900          MOVE.B  #4, D3 
00001884  16FC 004C                901          MOVE.B  #'L', (A3)+   
00001888                           902          
00001888                           903          ; CALL EA 
00001888  4EB9 00001E24            904          JSR     ADDQ_EA
0000188E  4EF8 1138                905          JMP     OP_FINISH
00001892                           906          
00001892                           907  HELPER_ADDSUBQ_CONVERT_W: 
00001892  4283                     908          CLR.L   D3
00001894  163C 0002                909          MOVE.B  #2, D3 
00001898  16FC 0057                910          MOVE.B  #'W', (A3)+   
0000189C                           911          
0000189C                           912          ; CALL EA
0000189C  4EB9 00001E24            913          JSR     ADDQ_EA
000018A2  4EF8 1138                914          JMP     OP_FINISH  
000018A6                           915        
000018A6                           916  HELPER_ADDSUBQ_CONVERT_B: 
000018A6  4283                     917          CLR.L   D3
000018A8  163C 0001                918          MOVE.B  #1, D3 
000018AC  16FC 0042                919          MOVE.B  #'B', (A3)+ 
000018B0                           920          
000018B0                           921          ; CALL EA  
000018B0  4EB9 00001E24            922          JSR     ADDQ_EA
000018B6  4EF8 1138                923          JMP     OP_FINISH
000018BA                           924  ;---------------------------------------------------
000018BA                           925  ; SUB. Gathering instruct size and calling EA
000018BA                           926  ;-------------------------------------------------  
000018BA                           927  OP_SUB:
000018BA  4EF9 000018C0            928          JMP     HELPER_SUB_SIZE_CAL
000018C0                           929  
000018C0                           930  HELPER_SUB_SIZE_CAL:
000018C0  4281                     931          CLR.L   D1 
000018C2  2200                     932          MOVE.L  D0,D1               ; Current instruct word
000018C4  0241 00C0                933          ANDI.W  #size,D1         ; Extract 2nd nibble
000018C8  143C 0006                934          MOVE.B  #right6, D2         
000018CC  E469                     935          LSR.W   D2,D1               ; D1 = 2nd nibble
000018CE                           936          
000018CE  4283                     937          CLR.L   D3
000018D0  1601                     938          MOVE.B   D1, D3  
000018D2                           939  
000018D2  B63C 0002                940          CMP.B   #2, D3
000018D6  6700 0012                941          BEQ     HELPER_SUB_CONVERT_L
000018DA                           942          
000018DA  B63C 0001                943          CMP.B   #1, D3
000018DE  6700 001E                944          BEQ     HELPER_SUB_CONVERT_W
000018E2                           945          
000018E2  B63C 0000                946          CMP.B   #0, D3   
000018E6  6700 002A                947          BEQ     HELPER_SUB_CONVERT_B
000018EA                           948          
000018EA                           949  HELPER_SUB_CONVERT_L: 
000018EA  4283                     950          CLR.L   D3
000018EC  163C 0004                951          MOVE.B  #4, D3 
000018F0  16FC 004C                952          MOVE.B  #'L', (A3)+   
000018F4                           953  
000018F4                           954          ; CALL EA  
000018F4  4EB9 00001DF2            955          JSR     SUB_EA
000018FA  4EF8 1138                956          JMP     OP_FINISH  
000018FE                           957          
000018FE                           958  HELPER_SUB_CONVERT_W: 
000018FE  4283                     959          CLR.L   D3
00001900  163C 0002                960          MOVE.B  #2, D3 
00001904  16FC 0057                961          MOVE.B  #'W', (A3)+   
00001908                           962  
00001908                           963          ; CALL EA
00001908  4EB9 00001DF2            964          JSR     SUB_EA
0000190E  4EF8 1138                965          JMP     OP_FINISH  
00001912                           966          
00001912                           967  HELPER_SUB_CONVERT_B: 
00001912  4283                     968          CLR.L   D3
00001914  163C 0001                969          MOVE.B  #1, D3 
00001918  16FC 0042                970          MOVE.B  #'B', (A3)+   
0000191C                           971  
0000191C                           972          ; CALL EA
0000191C  4EB9 00001DF2            973          JSR     SUB_EA
00001922  4EF8 1138                974          JMP     OP_FINISH    
00001926                           975        
00001926                           976  ;---------------------------------------------------
00001926                           977  ; ADDA. Gathering instruct size and calling EA
00001926                           978  ;-------------------------------------------------       
00001926                           979  OP_ADDA: 
00001926  16FC 0041                980          MOVE.B  #'A', (A3)+
0000192A  16FC 0044                981          MOVE.B  #'D', (A3)+
0000192E  16FC 0044                982          MOVE.B  #'D', (A3)+
00001932  16FC 0041                983          MOVE.B  #'A', (A3)+
00001936  16FC 002E                984          MOVE.B  #'.', (A3)+
0000193A                           985          
0000193A                           986          ; Calculate instruct size
0000193A  4281                     987          CLR.L   D1
0000193C  2200                     988          MOVE.L  D0,D1               ; Current instruct word
0000193E  0241 0100                989          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001942  143C 0008                990          MOVE.B  #right8, D2         
00001946  E469                     991          LSR.W   D2,D1               ; 
00001948                           992          
00001948  B23C 0001                993          CMP.B   #1, D1
0000194C  6700 0006                994          BEQ     HELPER_ADDA_L
00001950  6600 0016                995          BNE     HELPER_ADDA_W
00001954                           996          ; EA Calculator 
00001954                           997  HELPER_ADDA_L: 
00001954  4283                     998          CLR.L   D3
00001956  163C 0004                999          MOVE.B   #4, D3 
0000195A  16FC 004C               1000          MOVE.B   #'L', (A3)+
0000195E                          1001          
0000195E                          1002          ;CALL EA
0000195E  4EB9 00001EEA           1003          JSR     ADDA_EA
00001964  4EF8 1138               1004          JMP     OP_FINISH 
00001968                          1005          
00001968                          1006  HELPER_ADDA_W: 
00001968  4283                    1007          CLR.L   D3
0000196A  163C 0002               1008          MOVE.B  #2, D3 
0000196E  16FC 0057               1009          MOVE.B  #'W', (A3)+
00001972                          1010  
00001972                          1011          ;CALL EA
00001972  4EB9 00001EEA           1012          JSR     ADDA_EA
00001978  4EF8 1138               1013          JMP     OP_FINISH 
0000197C                          1014  ;---------------------------------------------------
0000197C                          1015  ; ADD. Gathering instruct size and calling EA
0000197C                          1016  ;-------------------------------------------------       
0000197C                          1017  OP_ADD: 
0000197C  16FC 0041               1018          MOVE.B  #'A', (A3)+
00001980  16FC 0044               1019          MOVE.B  #'D', (A3)+
00001984  16FC 0044               1020          MOVE.B  #'D', (A3)+
00001988  16FC 002E               1021          MOVE.B  #'.', (A3)+
0000198C                          1022          
0000198C                          1023          ; Calculate instruct size
0000198C                          1024          
0000198C                          1025  HELPER_ADD_SIZE_CAL:
0000198C  4281                    1026          CLR.L   D1 
0000198E  2200                    1027          MOVE.L  D0,D1               ; Current instruct word
00001990  0241 00C0               1028          ANDI.W  #size,D1         ; Extract 2nd nibble
00001994  143C 0006               1029          MOVE.B  #right6, D2         
00001998  E469                    1030          LSR.W   D2,D1               ; 
0000199A                          1031          
0000199A  4283                    1032          CLR.L   D3
0000199C  1601                    1033          MOVE.B   D1, D3  
0000199E                          1034  
0000199E  B63C 0002               1035          CMP.B   #2, D3
000019A2  6700 0012               1036          BEQ     HELPER_ADD_CONVERT_L
000019A6                          1037          
000019A6  B63C 0001               1038          CMP.B   #1, D3
000019AA  6700 001E               1039          BEQ     HELPER_ADD_CONVERT_W
000019AE                          1040          
000019AE  B63C 0000               1041          CMP.B   #0, D3   
000019B2  6700 002A               1042          BEQ     HELPER_ADD_CONVERT_B
000019B6                          1043                  
000019B6                          1044  HELPER_ADD_CONVERT_L: 
000019B6  4283                    1045          CLR.L   D3
000019B8  163C 0004               1046          MOVE.B  #4, D3 
000019BC  16FC 004C               1047          MOVE.B  #'L', (A3)+   
000019C0                          1048  
000019C0                          1049          ; CALL EA  
000019C0  4EB9 00001EE4           1050          JSR     ADD_EA
000019C6  4EF8 1138               1051          JMP     OP_FINISH 
000019CA                          1052          
000019CA                          1053  HELPER_ADD_CONVERT_W: 
000019CA  4283                    1054          CLR.L   D3
000019CC  163C 0002               1055          MOVE.B  #2, D3 
000019D0  16FC 0057               1056          MOVE.B  #'W', (A3)+   
000019D4                          1057  
000019D4                          1058          ; CALL EA
000019D4  4EB9 00001EE4           1059          JSR     ADD_EA
000019DA  4EF8 1138               1060          JMP     OP_FINISH
000019DE                          1061          
000019DE                          1062  HELPER_ADD_CONVERT_B: 
000019DE  4283                    1063          CLR.L   D3
000019E0  163C 0001               1064          MOVE.B  #1, D3 
000019E4  16FC 0042               1065          MOVE.B  #'B', (A3)+   
000019E8                          1066  
000019E8                          1067          ; CALL EA
000019E8  4EB9 00001EE4           1068          JSR     ADD_EA
000019EE  4EF8 1138               1069          JMP     OP_FINISH             
000019F2                          1070  ;---------------------------------------------------
000019F2                          1071  ; BSR. Gathering instruct size and calling EA
000019F2                          1072  ;-------------------------------------------------         
000019F2                          1073  OP_BSR:    
000019F2  16FC 0042               1074          MOVE.B  #'B', (A3)+
000019F6  16FC 0053               1075          MOVE.B  #'S', (A3)+
000019FA  16FC 0052               1076          MOVE.B  #'R', (A3)+
000019FE                          1077   
000019FE  4EB9 00001D60           1078          JSR     BSR_EA
00001A04  4EF8 1138               1079          JMP     OP_FINISH
00001A08                          1080          
00001A08                          1081  ;---------------------------------------------------
00001A08                          1082  ; BRA   Check. Gathering instruct size and calling EA
00001A08                          1083  ;------------------------------------------------- 
00001A08                          1084  OP_BRA:    
00001A08  16FC 0042               1085          MOVE.B  #'B', (A3)+
00001A0C  16FC 0052               1086          MOVE.B  #'R', (A3)+
00001A10  16FC 0041               1087          MOVE.B  #'A', (A3)+
00001A14                          1088       
00001A14                          1089          ; Call BRA EA 
00001A14  4EB9 00001D5A           1090          JSR     BRA_EA
00001A1A  4EF8 1138               1091          JMP     OP_FINISH
00001A1E                          1092          
00001A1E                          1093  ;---------------------------------------------------
00001A1E                          1094  ; MULU  calling EA
00001A1E                          1095  ;------------------------------------------------- 
00001A1E                          1096  OP_MULU: 
00001A1E  16FC 0055               1097          MOVE.B  #'U', (A3)+
00001A22                          1098          
00001A22                          1099          ; Call EA
00001A22  4EB9 00001EAA           1100          JSR     MULU_EA
00001A28  4EF8 1138               1101          JMP     OP_FINISH
00001A2C                          1102  
00001A2C                          1103  ;---------------------------------------------------
00001A2C                          1104  ; MULS  calling EA
00001A2C                          1105  ;------------------------------------------------- 
00001A2C                          1106  OP_MULS: 
00001A2C  16FC 0053               1107          MOVE.B  #'S', (A3)+
00001A30                          1108  
00001A30                          1109          ; Call EA
00001A30  4EB9 00001EAA           1110          JSR     MULU_EA
00001A36  4EF8 1138               1111          JMP     OP_FINISH        
00001A3A                          1112          
00001A3A                          1113  ;---------------------------------------------------
00001A3A                          1114  ; DIVS   calling EA
00001A3A                          1115  ;------------------------------------------------- 
00001A3A                          1116  OP_DIVS: 
00001A3A  16FC 0044               1117          MOVE.B  #'D', (A3)+
00001A3E  16FC 0049               1118          MOVE.B  #'I', (A3)+
00001A42  16FC 0056               1119          MOVE.B  #'V', (A3)+
00001A46  16FC 0053               1120          MOVE.B  #'S', (A3)+
00001A4A                          1121          
00001A4A                          1122          ; Call EA
00001A4A  4EB9 00001DB8           1123          JSR     DIVS_EA
00001A50  4EF8 1138               1124          JMP     OP_FINISH
00001A54                          1125  ;---------------------------------------------------
00001A54                          1126  ; DIVU   calling EA
00001A54                          1127  ;------------------------------------------------- 
00001A54                          1128  OP_DIVU:
00001A54  16FC 0044               1129          MOVE.B  #'D', (A3)+
00001A58  16FC 0049               1130          MOVE.B  #'I', (A3)+
00001A5C  16FC 0056               1131          MOVE.B  #'V', (A3)+
00001A60  16FC 0055               1132          MOVE.B  #'U', (A3)+
00001A64                          1133          
00001A64                          1134          ; Call EA
00001A64  4EB9 00001DB2           1135          JSR     DIVU_EA
00001A6A  4EF8 1138               1136          JMP     OP_FINISH
00001A6E                          1137  ;------------------------------------------------
00001A6E                          1138  ; CMP   calling EA and finding size
00001A6E                          1139  ;------------------------------------------------ 
00001A6E                          1140  OP_CMP: 
00001A6E  4EF9 00001A74           1141        JMP   HELPER_CMP_SIZE_CAL   
00001A74                          1142       
00001A74                          1143  HELPER_CMP_SIZE_CAL:         
00001A74  4283                    1144          CLR.L   D3
00001A76  1601                    1145          MOVE.B   D1, D3  
00001A78                          1146  
00001A78  B63C 0002               1147          CMP.B   #2, D3
00001A7C  6700 0012               1148          BEQ     HELPER_CMP_CONVERT_L
00001A80                          1149          
00001A80  B63C 0001               1150          CMP.B   #1, D3
00001A84  6700 001E               1151          BEQ     HELPER_CMP_CONVERT_W
00001A88                          1152          
00001A88  B63C 0000               1153          CMP.B   #0, D3   
00001A8C  6700 002A               1154          BEQ     HELPER_CMP_CONVERT_B
00001A90                          1155          
00001A90                          1156  HELPER_CMP_CONVERT_L: 
00001A90  4283                    1157          CLR.L   D3
00001A92  163C 0004               1158          MOVE.B  #4, D3 
00001A96  16FC 004C               1159          MOVE.B  #'L', (A3)+   
00001A9A                          1160          ; CALL EA   
00001A9A  4EB9 00001E70           1161          JSR     CMP_EA
00001AA0  4EF8 1138               1162          JMP     OP_FINISH
00001AA4                          1163          
00001AA4                          1164  HELPER_CMP_CONVERT_W: 
00001AA4  4283                    1165          CLR.L   D3
00001AA6  163C 0002               1166          MOVE.B  #2, D3 
00001AAA  16FC 0057               1167          MOVE.B  #'W', (A3)+   
00001AAE                          1168          ; CALL EA
00001AAE  4EB9 00001E70           1169          JSR     CMP_EA
00001AB4  4EF8 1138               1170          JMP     OP_FINISH
00001AB8                          1171          
00001AB8                          1172  HELPER_CMP_CONVERT_B: 
00001AB8  4283                    1173          CLR.L   D3
00001ABA  163C 0001               1174          MOVE.B  #1, D3 
00001ABE  16FC 0042               1175          MOVE.B  #'B', (A3)+ 
00001AC2                          1176    
00001AC2                          1177          ; CALL EA
00001AC2  4EB9 00001E70           1178          JSR     CMP_EA
00001AC8  4EF8 1138               1179          JMP     OP_FINISH
00001ACC                          1180  
00001ACC                          1181  ;---------------------------------------------------
00001ACC                          1182  ; ASL   Memory Shift only word size 
00001ACC                          1183  ;-------------------------------------------------             
00001ACC                          1184  OP_ASL_M: 
00001ACC  16FC 0041               1185          MOVE.B  #'A', (A3)+
00001AD0  16FC 0053               1186          MOVE.B  #'S', (A3)+
00001AD4  16FC 004C               1187          MOVE.B  #'L', (A3)+ 
00001AD8  4283                    1188          CLR.L   D3
00001ADA  163C 0002               1189          MOVE.B  #2, D3 
00001ADE                          1190          ; Get ready to call Mode 7 subclass 1
00001ADE                          1191          
00001ADE  4EB9 00001F26           1192          JSR     ASL_EA
00001AE4  4EF8 1138               1193          JMP     OP_FINISH
00001AE8                          1194  ;---------------------------------------------------
00001AE8                          1195  ; ASR    Memory Shift only word size 
00001AE8                          1196  ;------------------------------------------------- 
00001AE8                          1197  OP_ASR_M: 
00001AE8  16FC 0041               1198          MOVE.B  #'A', (A3)+
00001AEC  16FC 0053               1199          MOVE.B  #'S', (A3)+
00001AF0  16FC 0052               1200          MOVE.B  #'R', (A3)+ 
00001AF4                          1201          
00001AF4  4283                    1202          CLR.L   D3
00001AF6  163C 0002               1203          MOVE.B  #2, D3 
00001AFA                          1204          ; Get ready to call Mode 7 subclass 1
00001AFA                          1205          
00001AFA  4EB9 00001F26           1206          JSR     ASL_EA
00001B00  4EF8 1138               1207          JMP     OP_FINISH
00001B04                          1208  *-------------------------------------------------
00001B04                          1209  *  Rotation Checker, Mainly looking for ASL/ASR
00001B04                          1210  *------------------------------------------------        
00001B04                          1211  OP_ROTATION_CHECK: 
00001B04                          1212         ; Check the 4 - 5 bit for 00 
00001B04  4281                    1213          CLR.L   D1 
00001B06  2200                    1214          MOVE.L  D0,D1               ; Current instruct word
00001B08  0241 0018               1215          ANDI.W  #$18,D1         ; Extract 2nd nibble
00001B0C  143C 0003               1216          MOVE.B  #3, D2         
00001B10  E469                    1217          LSR.W   D2,D1    
00001B12                          1218          
00001B12  B23C 0000               1219          CMP.B   #0, D1      ; AS
00001B16  6700 001A               1220          BEQ     OP_ROTATION_HELP
00001B1A                          1221          
00001B1A  B23C 0001               1222          CMP.B   #1, D1      ; LS
00001B1E  6700 00B0               1223          BEQ     OP_UNSUPPORTED
00001B22                          1224  
00001B22  B23C 0002               1225          CMP.B   #2, D1      ; ROXd
00001B26  6700 00A8               1226          BEQ     OP_UNSUPPORTED
00001B2A                          1227          
00001B2A  B23C 0003               1228          CMP.B   #3, D1      ; ROXd
00001B2E  6700 00A0               1229          BEQ     OP_UNSUPPORTED   
00001B32                          1230   
00001B32                          1231  OP_ROTATION_HELP: 
00001B32                          1232          ; Find the Rotation 
00001B32                          1233          ; Extract the size 
00001B32  4281                    1234          CLR.L   D1 
00001B34  2200                    1235          MOVE.L  D0,D1               ; Current instruct word
00001B36  0241 0100               1236          ANDI.W  #$100,D1         ; Extract 2nd nibble
00001B3A  143C 0008               1237          MOVE.B  #right8, D2             
00001B3E  E469                    1238          LSR.W   D2,D1  
00001B40                          1239  
00001B40  B23C 0000               1240          CMP.B   #0, D1      ; Right Rotation 
00001B44  6700 007A               1241          BEQ     OP_ASR_ADDER
00001B48                          1242          
00001B48  B23C 0001               1243          CMP.B   #1, D1      ; Left rotation
00001B4C  6700 0062               1244          BEQ     OP_ASL_ADDER
00001B50                          1245          
00001B50                          1246  OP_ROTATION_SIZE_HELP:        
00001B50                          1247          ; Check the size 
00001B50  B63C 0002               1248          CMP.B   #2, D3
00001B54  6700 0042               1249          BEQ     OP_ROTATION_SIZE_L    
00001B58                          1250          
00001B58  B63C 0001               1251          CMP.B   #1, D3
00001B5C  6700 0022               1252          BEQ     OP_ROTATION_SIZE_W   
00001B60                          1253          
00001B60  B63C 0000               1254          CMP.B   #0, D3
00001B64  6700 0002               1255          BEQ     OP_ROTATION_SIZE_B 
00001B68                          1256          
00001B68                          1257          
00001B68                          1258  OP_ROTATION_SIZE_B: 
00001B68  4283                    1259          CLR.L   D3
00001B6A  163C 0001               1260          MOVE.B  #1, D3     
00001B6E  16FC 002E               1261          MOVE.B  #'.', (A3)+
00001B72  16FC 0042               1262          MOVE.B  #'B', (A3)+
00001B76                          1263          
00001B76  4EB9 00001F26           1264          JSR     ASL_EA
00001B7C  4EF8 1138               1265          JMP     OP_FINISH
00001B80                          1266          
00001B80                          1267  OP_ROTATION_SIZE_W: 
00001B80  4283                    1268          CLR.L   D3
00001B82  163C 0002               1269          MOVE.B  #2, D3 
00001B86  16FC 002E               1270          MOVE.B  #'.', (A3)+
00001B8A  16FC 0057               1271          MOVE.B  #'W', (A3)+
00001B8E                          1272          
00001B8E  4EB9 00001F26           1273          JSR     ASL_EA
00001B94  4EF8 1138               1274          JMP     OP_FINISH
00001B98                          1275          
00001B98                          1276  OP_ROTATION_SIZE_L:
00001B98  4283                    1277          CLR.L   D3
00001B9A  163C 0004               1278          MOVE.B  #4, D3  
00001B9E  16FC 002E               1279          MOVE.B  #'.', (A3)+
00001BA2  16FC 004C               1280          MOVE.B  #'L', (A3)+
00001BA6                          1281          
00001BA6  4EB9 00001F26           1282          JSR     ASL_EA
00001BAC  4EF8 1138               1283          JMP     OP_FINISH
00001BB0                          1284          
00001BB0                          1285  OP_ASL_ADDER: 
00001BB0  16FC 0041               1286          MOVE.B  #'A', (A3)+
00001BB4  16FC 0053               1287          MOVE.B  #'S', (A3)+
00001BB8  16FC 004C               1288          MOVE.B  #'L', (A3)+    
00001BBC                          1289          
00001BBC  4EF8 1B50               1290          JMP     OP_ROTATION_SIZE_HELP 
00001BC0                          1291          
00001BC0                          1292  OP_ASR_ADDER: 
00001BC0  16FC 0041               1293          MOVE.B  #'A', (A3)+
00001BC4  16FC 0053               1294          MOVE.B  #'S', (A3)+
00001BC8  16FC 0052               1295          MOVE.B  #'R', (A3)+    
00001BCC                          1296          
00001BCC  4EF8 1B50               1297          JMP     OP_ROTATION_SIZE_HELP  
00001BD0                          1298  ;--------------------------------------------------
00001BD0                          1299  ; Error Handling    
00001BD0                          1300  ;------------------------------------------------- 
00001BD0                          1301  OP_UNSUPPORTED: 
00001BD0  43F9 000026FC           1302          LEA     DECODE_OP_UNSUPPORT, A1
00001BD6  103C 000E               1303          MOVE.B  #task14,D0
00001BDA  4E4F                    1304          TRAP    #15           Display  Error Message
00001BDC  4EF8 1018               1305          JMP     RESTART_PROGRAM
00001BE0                          1306          
00001BE0                          1307  OP_ERROR: 
00001BE0  43F9 00002687           1308          LEA     DECODE_OP_ERROR, A1
00001BE6  103C 000E               1309          MOVE.B  #task14,D0
00001BEA  4E4F                    1310          TRAP    #15           Display  Error Message
00001BEC  4EF8 1018               1311          JMP     RESTART_PROGRAM
00001BF0                          1312                
00001BF0                          1313  ;--------------------------------------------------
00001BF0                          1314  ; Effective Address Start   
00001BF0                          1315  ;------------------------------------------------- 
00001BF0                          1316  
00001BF0                          1317  ;----------------------------------------------
00001BF0                          1318  ;IMMEDIATE_EA for ORI,ANDI,SUBI,ADDI
00001BF0                          1319      *D3 = # of ITOA Loop ITERATION
00001BF0                          1320      *D1 = size of instruct
00001BF0                          1321      *D0 = Shift Data
00001BF0                          1322      *D5 = Mode
00001BF0                          1323      *D6 = Register
00001BF0                          1324      *D7 = current immediate data
00001BF0                          1325  ;----------------------------------------------    
00001BF0                          1326  IMMEDIATE_EA
00001BF0                          1327          ; Extract dst mode and register
00001BF0  4EB9 00001C3C           1328          JSR     MOVE_IMM_DATA
00001BF6                          1329          
00001BF6  4286                    1330          CLR.L   D6
00001BF8  4285                    1331          CLR.L   D5
00001BFA  2C00                    1332          MOVE.L  D0,D6               ; Current Instruct word Register    
00001BFC  2A00                    1333          MOVE.L  D0,D5               ; Current instruct word Mode
00001BFE                          1334          
00001BFE  0246 0007               1335          ANDI.W  #$7,D6              ; Gets the Register
00001C02                          1336          
00001C02  0245 0038               1337          ANDI.W  #$38,D5              
00001C06  103C 0003               1338          MOVE.B  #$3, D0            
00001C0A  E06D                    1339          LSR.W   D0,D5               ; Extract the Mode      
00001C0C                          1340           
00001C0C  BA3C 0001               1341          CMP.B   #1, D5          ; Check for valid dst 
00001C10  6700 06C4               1342          BEQ     DATA_ERROR    
00001C14                          1343          
00001C14  1203                    1344          MOVE.B  D3,D1           ; Size Instruct 
00001C16  C6FC 0002               1345          MULU    #2, D3          ; Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
00001C1A                          1346   
00001C1A  16FC 0020               1347          MOVE.B  #' ', (A3)+
00001C1E  16FC 0023               1348          MOVE.B  #'#', (A3)+
00001C22  16FC 0024               1349          MOVE.B  #'$', (A3)+
00001C26                          1350          
00001C26                          1351          ; Call ITOA 
00001C26  4EB9 000022F6           1352          JSR     ITOA
00001C2C                          1353          
00001C2C  16FC 002C               1354          MOVE.B  #',', (A3)+
00001C30  16FC 0020               1355          MOVE.B  #' ', (A3)+
00001C34                          1356          
00001C34  4EB9 00001FBA           1357          JSR     EA_DECODER
00001C3A  4E75                    1358          RTS
00001C3C                          1359          
00001C3C                          1360  MOVE_IMM_DATA: 
00001C3C  B63C 0002               1361          CMP.B   #2, D3
00001C40  6700 0006               1362          BEQ     SHIFT16
00001C44                          1363          
00001C44  2E1D                    1364          MOVE.L  (A5)+, D7
00001C46  4E75                    1365          RTS
00001C48                          1366          
00001C48                          1367  SHIFT16: 
00001C48  3E1D                    1368          MOVE.W  (A5)+, D7
00001C4A  4E75                    1369          RTS
00001C4C                          1370  
00001C4C                          1371          
00001C4C                          1372  MOVEA_EA
00001C4C                          1373          ;This is the same as MOVE, just that first operand is for sure an address.
00001C4C  4EF9 00001C52           1374          JMP MOVE_EA
00001C52                          1375  
00001C52                          1376  MOVE_EA
00001C52  2A00                    1377          MOVE.L D0, D5
00001C54  2C00                    1378          MOVE.L D0, D6
00001C56                          1379          
00001C56                          1380          ;and off mode
00001C56  0245 0038               1381          ANDI #56, D5
00001C5A  E685                    1382          ASR.L #3, D5
00001C5C                          1383          ;and off data
00001C5C  0246 0007               1384          ANDI #7, D6
00001C60  4EB9 00001FBA           1385          JSR EA_DECODER
00001C66                          1386      
00001C66  16FC 002C               1387          MOVE.B #',', (A3)+
00001C6A                          1388          ;Reset D5 and D6 just in case.
00001C6A  4285                    1389          CLR.L D5
00001C6C  4286                    1390          CLR.L D6
00001C6E                          1391          ;Second argument, set D4
00001C6E  383C 0001               1392          MOVE #1, D4
00001C72                          1393      
00001C72                          1394          ; Grab the other mode
00001C72  2A00                    1395          MOVE.L D0, D5
00001C74  2C00                    1396          MOVE.L D0, D6
00001C76                          1397      
00001C76                          1398          ;and off mode
00001C76  0245 01C0               1399          ANDI #448, D5
00001C7A  EC85                    1400          ASR.L #6, D5
00001C7C                          1401          ;and off data
00001C7C  0246 0E00               1402          ANDI #3584, D6
00001C80  E086                    1403          ASR.L #8, D6
00001C82  E286                    1404          ASR.L #1, D6
00001C84  4EB9 00001FBA           1405          JSR EA_DECODER
00001C8A                          1406          
00001C8A                          1407          ;Clear D4
00001C8A  4284                    1408          CLR.L D4
00001C8C                          1409          
00001C8C  4E75                    1410          RTS
00001C8E                          1411  
00001C8E                          1412  MOVEM_EA
00001C8E                          1413          ; Extract the mode and register
00001C8E  4285                    1414          CLR.L   D5
00001C90  4286                    1415          CLR.L   D6
00001C92                          1416          
00001C92  2A00                    1417          MOVE.L D0, D5
00001C94  2C00                    1418          MOVE.L D0, D6
00001C96                          1419          
00001C96  0246 0007               1420          ANDI #7, D6
00001C9A  0245 0038               1421          ANDI #56, D5
00001C9E  E685                    1422          ASR.L #3, D5
00001CA0                          1423              
00001CA0                          1424          ; Call the right mode to fix 
00001CA0  BC3C 0002               1425          CMP.B   #2, D6              ; Error Handling for wrong modes
00001CA4  6D00 0640               1426          BLT     DATA_UNSUPPORTED   
00001CA8                          1427          
00001CA8  4EB9 00001FBA           1428          JSR EA_DECODER
00001CAE                          1429          
00001CAE  B87C 0000               1430          CMP #0, D4
00001CB2  6700 000A               1431          BEQ MOVEM_REG_TO_MEM
00001CB6                          1432          
00001CB6  B87C 0001               1433          CMP #1, D4
00001CBA  6700 0010               1434          BEQ MOVEM_POST      ; Mem To Register
00001CBE                          1435          
00001CBE                          1436  MOVEM_REG_TO_MEM
00001CBE  BA7C 0004               1437          CMP.W   #4, D5      ; Register List Mask is flipped
00001CC2  6700 001E               1438          BEQ     MOVEM_PRE
00001CC6  4EF9 00001CCC           1439          JMP     MOVEM_POST  
00001CCC                          1440  
00001CCC                          1441  *---------------------------------
00001CCC                          1442  *   D6 = Set Address
00001CCC                          1443  *   D5 = Loop Counter (16 Shifts) 
00001CCC                          1444  *   D4 = even = Address, odd = Data Register 
00001CCC                          1445  *---------------------------------
00001CCC                          1446  ; Mode 3        
00001CCC                          1447  MOVEM_POST
00001CCC  3E1D                    1448          MOVE.W  (A5)+, D7
00001CCE                          1449          
00001CCE                          1450  MOVE_POST_LOOP        
00001CCE  BA3C 0010               1451          CMP.B   #16, D5
00001CD2  6700 0010               1452          BEQ     MOVEM_FINISH
00001CD6                          1453          
00001CD6  BA3C 0008               1454          CMP.B   #8, D5
00001CDA  6700 0004               1455          BEQ     MOVEM_SWITCH
00001CDE                          1456          
00001CDE  5206                    1457          ADD.B   #1, D6
00001CE0                          1458  
00001CE0                          1459  MOVEM_SWITCH:
00001CE0  4286                    1460          CLR.L   D6
00001CE2                          1461          ; Even num = address
00001CE2                          1462  
00001CE2                          1463          ; Odd num  = data register          
00001CE2                          1464  
00001CE2                          1465  
00001CE2                          1466  
00001CE2                          1467  
00001CE2                          1468  ; Mode 4
00001CE2                          1469  MOVEM_PRE
00001CE2  3E1D                    1470          MOVE.W  (A5)+, D7
00001CE4                          1471  
00001CE4                          1472  MOVEM_FINISH:
00001CE4  4E75                    1473          RTS
00001CE6                          1474  
00001CE6                          1475          
00001CE6                          1476  MOVEQ_EA
00001CE6  2A00                    1477          MOVE.L D0, D5
00001CE8  2C00                    1478          MOVE.L D0, D6
00001CEA                          1479          
00001CEA  2E00                    1480          MOVE.L D0, D7
00001CEC                          1481          ;set mode to immediate
00001CEC                          1482          
00001CEC  303C 0007               1483          MOVE #7, D0
00001CF0                          1484          ;and off data
00001CF0  0247 00FF               1485          ANDI #255, D7
00001CF4                          1486          
00001CF4  16FC 0020               1487          MOVE.B  #' ', (A3)+
00001CF8  163C 0002               1488          MOVE.B  #2, D3
00001CFC  4EB9 00001FAE           1489          JSR EA_PRINT_IMMEDIATE_NUMBER
00001D02                          1490      
00001D02  16FC 002C               1491          MOVE.B #',', (A3)+
00001D06                          1492          
00001D06                          1493          ;Reset D6 just in case.
00001D06                          1494  
00001D06                          1495          ;Second argument, set D4
00001D06  383C 0001               1496          MOVE #1, D4
00001D0A                          1497     
00001D0A                          1498          ;set mode to data register
00001D0A  4285                    1499          CLR.L D5
00001D0C                          1500          ;and off data
00001D0C  0246 0E00               1501          ANDI #3584, D6
00001D10  E086                    1502          ASR.L #8, D6
00001D12  E286                    1503          ASR.L #1, D6
00001D14  4EB9 00001FBA           1504          JSR EA_DECODER
00001D1A                          1505          
00001D1A                          1506          ;Reset D4
00001D1A  4284                    1507          CLR.L D4
00001D1C                          1508          
00001D1C  4E75                    1509          RTS
00001D1E                          1510  
00001D1E                          1511  LEA_EA
00001D1E  2A00                    1512          MOVE.L D0, D5
00001D20  2C00                    1513          MOVE.L D0, D6
00001D22                          1514      
00001D22                          1515          ;and off mode
00001D22  0245 01C0               1516          ANDI #448, D5
00001D26  EC85                    1517          ASR.L #6, D5
00001D28                          1518          ;and off data
00001D28  0246 0E00               1519          ANDI #3584, D6
00001D2C  E086                    1520          ASR.L #8, D6
00001D2E  E286                    1521          ASR.L #1, D6
00001D30  4EB9 00001FBA           1522          JSR EA_DECODER
00001D36                          1523      
00001D36  16FC 002C               1524          MOVE.B #',', (A3)+
00001D3A                          1525          ;Reset D5 and D6 just in case.
00001D3A  4285                    1526          CLR.L D5
00001D3C  4286                    1527          CLR.L D6
00001D3E                          1528          ;Second argument, set D4
00001D3E  383C 0001               1529          MOVE #1, D4
00001D42                          1530      
00001D42                          1531          ; Grab the other mode
00001D42  2A00                    1532          MOVE.L D0, D5
00001D44  2C00                    1533          MOVE.L D0, D6
00001D46                          1534      
00001D46                          1535          ;and off mode
00001D46  0245 0038               1536          ANDI #56, D5
00001D4A  E685                    1537          ASR.L #3, D5
00001D4C                          1538          ;and off data
00001D4C  0246 0007               1539          ANDI #7, D6
00001D50  4EB9 00001FBA           1540          JSR EA_DECODER
00001D56                          1541          
00001D56                          1542          ;Reset D4
00001D56  4284                    1543          CLR.L D4
00001D58                          1544      
00001D58  4E75                    1545          RTS
00001D5A                          1546      
00001D5A                          1547  BRA_EA
00001D5A                          1548          ;Effectively the same as BRA
00001D5A  4EF9 00001D60           1549          JMP BSR_EA
00001D60                          1550  
00001D60                          1551  BSR_EA
00001D60  4287                    1552          CLR.L D7
00001D62  4286                    1553          CLR.L D6
00001D64  4285                    1554          CLR.L D5
00001D66  4284                    1555          CLR.L D4 
00001D68  3A3C 0007               1556          MOVE #7, D5     ; Immediate Addressing 
00001D6C                          1557  
00001D6C  3E00                    1558          MOVE D0, D7 
00001D6E  0247 00FF               1559          ANDI #255, D7
00001D72                          1560          
00001D72  BE3C 0000               1561          CMP.B  #$00, D7
00001D76  6700 001A               1562          BEQ    BSR_EA_16
00001D7A                          1563   
00001D7A  BE3C 00FF               1564          CMP.B  #$FF, D7
00001D7E  6700 0022               1565          BEQ  BSR_EA_32
00001D82                          1566          
00001D82  16FC 0020               1567          MOVE.B  #' ', (A3)+
00001D86  163C 0002               1568          MOVE.B  #2, D3
00001D8A  4EB9 00001FAE           1569          JSR EA_PRINT_IMMEDIATE_NUMBER
00001D90                          1570      
00001D90  4E75                    1571          RTS
00001D92                          1572  
00001D92                          1573  BSR_EA_16
00001D92                          1574          ;Mode 7 Word
00001D92  1C3C 0000               1575          MOVE.B  #0, D6
00001D96  183C 0000               1576          MOVE.B  #0, D4
00001D9A  4EB9 00001FBA           1577          JSR EA_DECODER
00001DA0  4E75                    1578          RTS
00001DA2                          1579  
00001DA2                          1580  BSR_EA_32
00001DA2                          1581          ;Mode 7 : Long 
00001DA2                          1582          
00001DA2  1C3C 0001               1583          MOVE.B  #1, D6
00001DA6  183C 0000               1584          MOVE.B  #0, D4
00001DAA  4EB9 00001FBA           1585          JSR EA_DECODER
00001DB0  4E75                    1586          RTS
00001DB2                          1587      
00001DB2                          1588  DIVU_EA
00001DB2                          1589          ;Practically the same as DIVS
00001DB2  4EF9 00001DB8           1590          JMP DIVS_EA
00001DB8                          1591  
00001DB8                          1592  DIVS_EA
00001DB8  2A00                    1593          MOVE.L D0, D5
00001DBA  2C00                    1594          MOVE.L D0, D6
00001DBC                          1595       
00001DBC                          1596          ;Set mode data
00001DBC  0245 0038               1597          ANDI #56, D5
00001DC0  E685                    1598          ASR.L #3, D5
00001DC2                          1599          ;and off data
00001DC2  0246 0007               1600          ANDI #7, D6
00001DC6  4EB9 00001FBA           1601          JSR EA_DECODER
00001DCC                          1602      
00001DCC  16FC 002C               1603          MOVE.B #',', (A3)+
00001DD0                          1604          ;Reset D5 and D6 just in case.
00001DD0  4285                    1605          CLR.L D5
00001DD2  4286                    1606          CLR.L D6
00001DD4                          1607          ;Second argument, set D4
00001DD4  383C 0001               1608          MOVE #1, D4
00001DD8                          1609      
00001DD8                          1610          ; Grab the other mode
00001DD8  2A00                    1611          MOVE.L D0, D5
00001DDA  2C00                    1612          MOVE.L D0, D6
00001DDC                          1613          
00001DDC                          1614          ;set mode 0
00001DDC  3A3C 0000               1615          MOVE #0, D5
00001DE0                          1616          ;and off data
00001DE0  0246 0E00               1617          ANDI #3584, D6
00001DE4  E086                    1618          ASR.L #8, D6
00001DE6  E286                    1619          ASR.L #1, D6
00001DE8  4EB9 00001FBA           1620          JSR EA_DECODER
00001DEE                          1621          
00001DEE                          1622          ;Clear D4
00001DEE  4284                    1623          CLR.L D4
00001DF0                          1624      
00001DF0  4E75                    1625          RTS
00001DF2                          1626  
00001DF2                          1627  SUB_EA
00001DF2  2A00                    1628          MOVE.L D0, D5
00001DF4  2C00                    1629          MOVE.L D0, D6
00001DF6                          1630      
00001DF6                          1631          ;and off mode
00001DF6  0245 0038               1632          ANDI #56, D5
00001DFA                          1633          ;and off data
00001DFA  0246 0007               1634          ANDI #7, D6
00001DFE  4EB9 00001FBA           1635          JSR EA_DECODER
00001E04  2C00                    1636          MOVE.L D0, D6
00001E06                          1637      
00001E06  16FC 002C               1638          MOVE.B #',', (A3)+
00001E0A                          1639          ;Reset D6 just in case.
00001E0A  4286                    1640          CLR.L D6
00001E0C                          1641          ;Second argument, set D4
00001E0C  383C 0001               1642          MOVE #1, D4
00001E10                          1643      
00001E10                          1644          ;sub only works on data registers, so we set mode to data
00001E10  4285                    1645          CLR.L D5
00001E12                          1646          ;and off data
00001E12  0246 0E00               1647          ANDI #3584, D6
00001E16  E086                    1648          ASR.L #8, D6
00001E18  E286                    1649          ASR.L #1, D6
00001E1A  4EB9 00001FBA           1650          JSR EA_DECODER
00001E20                          1651          
00001E20                          1652          ;Clear D4
00001E20  4284                    1653          CLR.L D4
00001E22                          1654  
00001E22  4E75                    1655          RTS
00001E24                          1656  
00001E24                          1657  ADDQ_EA
00001E24                          1658          ;For EA effectively SUBQ
00001E24  4EF9 00001E2A           1659          JMP SUBQ_EA
00001E2A                          1660  
00001E2A                          1661  SUBQ_EA
00001E2A  2A00                    1662          MOVE.L D0, D5
00001E2C  2E00                    1663          MOVE.L D0, D7
00001E2E                          1664          
00001E2E                          1665          
00001E2E                          1666          ;Set to immediate data;
00001E2E  3A3C 0007               1667          MOVE #7, D5
00001E32                          1668          ;Get the immediate data.
00001E32  3E00                    1669          MOVE D0, D7
00001E34  0247 0E00               1670          ANDI #3584, D7
00001E38  E087                    1671          ASR.L #8, D7
00001E3A  E287                    1672          ASR.L #1, D7
00001E3C  BE7C 0000               1673          CMP #0, D7
00001E40  6600 0004               1674          BNE SUBQ_EA_1
00001E44                          1675          
00001E44  7E08                    1676          MOVE.L #8, D7
00001E46                          1677          
00001E46                          1678  SUBQ_EA_1        
00001E46  4EB9 00001FAE           1679          JSR EA_PRINT_IMMEDIATE_NUMBER
00001E4C                          1680      
00001E4C  16FC 002C               1681          MOVE.B #',', (A3)+
00001E50                          1682          ;Reset D5 and D6 just in case.
00001E50  4285                    1683          CLR.L D5
00001E52  4286                    1684          CLR.L D6
00001E54                          1685          ;Second argument, set D4
00001E54  383C 0001               1686          MOVE #1, D4
00001E58                          1687      
00001E58  2A00                    1688          MOVE.L D0, D5
00001E5A  2C00                    1689          MOVE.L D0, D6
00001E5C                          1690      
00001E5C                          1691          ;and off mode
00001E5C  0245 0038               1692          ANDI #56, D5
00001E60  E685                    1693          ASR.L #3, D5
00001E62                          1694          ;and off data
00001E62  0246 0007               1695          ANDI #7, D6
00001E66  4EB9 00001FBA           1696          JSR EA_DECODER
00001E6C                          1697          
00001E6C                          1698          ;Clear d4
00001E6C  4284                    1699          CLR.L D4
00001E6E                          1700      
00001E6E  4E75                    1701          RTS
00001E70                          1702  
00001E70                          1703  CMP_EA
00001E70  2A00                    1704          MOVE.L D0, D5
00001E72  2C00                    1705          MOVE.L D0, D6
00001E74                          1706      
00001E74                          1707          ;and off mode
00001E74  0245 0038               1708          ANDI #56, D5
00001E78                          1709          ;and off data
00001E78  0246 0007               1710          ANDI #7, D6
00001E7C  4EB9 00001FBA           1711          JSR EA_DECODER
00001E82                          1712              
00001E82  16FC 002C               1713          MOVE.B #',', (A3)+
00001E86                          1714          ;Reset D6 just in case.
00001E86  4286                    1715          CLR.L D6
00001E88                          1716          ;Second argument, set D4
00001E88  383C 0001               1717          MOVE #1, D4
00001E8C                          1718      
00001E8C                          1719          ;Do other part of the EA
00001E8C  2A00                    1720          MOVE.L D0, D5
00001E8E  2C00                    1721          MOVE.L D0, D6
00001E90                          1722      
00001E90                          1723          ;set mode to data register
00001E90  4285                    1724          CLR.L D5
00001E92                          1725          ;and off data
00001E92  0246 0E00               1726          ANDI #3584, D6
00001E96  E086                    1727          ASR.L #8, D6
00001E98  E286                    1728          ASR.L #1, D6
00001E9A  4EB9 00001FBA           1729          JSR EA_DECODER
00001EA0                          1730          
00001EA0                          1731          ;Clear D4
00001EA0  4284                    1732          CLR.L D4
00001EA2                          1733  
00001EA2  4E75                    1734          RTS
00001EA4                          1735  
00001EA4                          1736  MULS_EA
00001EA4                          1737      ;Same as MULU
00001EA4  4EF9 00001EAA           1738      JMP MULU_EA
00001EAA                          1739  
00001EAA                          1740  MULU_EA
00001EAA  2A00                    1741          MOVE.L D0, D5
00001EAC  2E00                    1742          MOVE.L D0, D7
00001EAE                          1743      
00001EAE                          1744          ;Get mode
00001EAE  0245 0038               1745          ANDI #56, D5
00001EB2  E685                    1746          ASR.L #3, D5
00001EB4                          1747          ;and off data
00001EB4  0246 0007               1748          ANDI #7, D6
00001EB8  4EB9 00001FBA           1749          JSR EA_DECODER
00001EBE                          1750     
00001EBE  16FC 002C               1751          MOVE.B #',', (A3)+
00001EC2                          1752          ;Reset D6 just in case.
00001EC2  4286                    1753          CLR.L D6
00001EC4                          1754          ;Second argument, set D4
00001EC4  383C 0001               1755          MOVE #1, D4
00001EC8                          1756      
00001EC8  2A00                    1757          MOVE.L D0, D5
00001ECA  2C00                    1758          MOVE.L D0, D6
00001ECC                          1759      
00001ECC                          1760          ;set mode data register
00001ECC  4285                    1761          CLR.L D5
00001ECE                          1762          ;and off data for register
00001ECE  0246 0E00               1763          ANDI #3584, D6
00001ED2  E086                    1764          ASR.L #8, D6
00001ED4  E286                    1765          ASR.L #1, D6
00001ED6  4EB9 00001FBA           1766          JSR EA_DECODER
00001EDC                          1767      
00001EDC  2A00                    1768          MOVE.L D0, D5
00001EDE  2C00                    1769          MOVE.L D0, D6
00001EE0                          1770          
00001EE0                          1771          ;Clear D
00001EE0  4284                    1772          CLR.L D4
00001EE2                          1773          
00001EE2  4E75                    1774          RTS
00001EE4                          1775          
00001EE4                          1776  ADD_EA
00001EE4                          1777          ;Effective the same as ADD
00001EE4  4EF9 00001EEA           1778          JMP ADDA_EA
00001EEA                          1779  
00001EEA                          1780  ADDA_EA
00001EEA  2A00                    1781          MOVE.L D0, D5
00001EEC  2C00                    1782          MOVE.L D0, D6
00001EEE                          1783      
00001EEE                          1784          ;and off mode
00001EEE  0245 0038               1785          ANDI #56, D5
00001EF2  E685                    1786          ASR.L #3, D5
00001EF4                          1787          ;and off data
00001EF4  0246 0007               1788          ANDI #7, D6
00001EF8  4EB9 00001FBA           1789          JSR EA_DECODER
00001EFE                          1790      
00001EFE  16FC 002C               1791          MOVE.B #',', (A3)+
00001F02                          1792          ;Reset D5 and D6 just in case.
00001F02  4285                    1793          CLR.L D5
00001F04  4286                    1794          CLR.L D6
00001F06                          1795          ;Second argument, set D4
00001F06  383C 0001               1796          MOVE #1, D4
00001F0A                          1797      
00001F0A                          1798          ; Grab the other mode
00001F0A  2A00                    1799          MOVE.L D0, D5
00001F0C  2C00                    1800          MOVE.L D0, D6
00001F0E                          1801          
00001F0E                          1802          ;and off mode
00001F0E  0245 01C0               1803          ANDI #448, D5
00001F12  E085                    1804          ASR.L #8, D5
00001F14                          1805          ;and off data
00001F14  0246 0E00               1806          ANDI #3584, D6
00001F18  E086                    1807          ASR.L #8, D6
00001F1A  E286                    1808          ASR.L #1, D6
00001F1C  4EB9 00001FBA           1809          JSR EA_DECODER
00001F22                          1810          
00001F22                          1811          ;Clear D4
00001F22  4284                    1812          CLR.L D4
00001F24                          1813      
00001F24  4E75                    1814          RTS
00001F26                          1815  
00001F26                          1816  ASL_EA
00001F26                          1817          ;Practically the same as ASR
00001F26  4EF9 00001F2C           1818          JMP ASR_EA
00001F2C                          1819  
00001F2C                          1820  ASR_EA
00001F2C                          1821          ;Check bit 5 to see if its a register or count.
00001F2C  3A00                    1822          MOVE D0, D5
00001F2E  0245 0020               1823          ANDI #32, D5
00001F32  EA85                    1824          ASR.L #5, D5
00001F34  BA7C 0000               1825          CMP #0, D5
00001F38  6700 000C               1826          BEQ ASR_EA_NUM
00001F3C  BA7C 0001               1827          CMP #1, D5
00001F40  6700 003E               1828          BEQ ASR_EA_REG
00001F44                          1829      
00001F44                          1830          ;Error-handling return
00001F44  4E75                    1831          RTS
00001F46                          1832      
00001F46                          1833  ASR_EA_NUM
00001F46                          1834          ;Set to immediate data;
00001F46  3A3C 0007               1835          MOVE #7, D5
00001F4A                          1836          ;Get the immediate data.
00001F4A  3E00                    1837          MOVE D0, D7
00001F4C  0247 0E00               1838          ANDI #3584, D7
00001F50  E087                    1839          ASR.L #8, D7
00001F52  E287                    1840          ASR.L #1, D7
00001F54  BE7C 0000               1841          CMP #0, D7
00001F58  6600 0004               1842          BNE ASR_EA_NUM_1
00001F5C                          1843          
00001F5C  7E08                    1844          MOVE.L #8, D7
00001F5E                          1845          
00001F5E                          1846  ASR_EA_NUM_1        
00001F5E  4EB9 00001FAE           1847          JSR EA_PRINT_IMMEDIATE_NUMBER
00001F64                          1848      
00001F64  16FC 002C               1849          MOVE.B #',', (A3)+
00001F68                          1850          ;Reset D6 just in case.
00001F68  4286                    1851          CLR.L D6
00001F6A                          1852          ;Second argument, set D4
00001F6A  383C 0001               1853          MOVE #1, D4
00001F6E                          1854      
00001F6E                          1855          ;Set to data register
00001F6E  4285                    1856          CLR.L D5
00001F70  3C00                    1857          MOVE D0, D6
00001F72  CC7C 0007               1858          AND #7, D6
00001F76  4EB9 00001FBA           1859          JSR EA_DECODER
00001F7C                          1860  
00001F7C                          1861          ;clear D4
00001F7C  4284                    1862          CLR.L D4
00001F7E                          1863          
00001F7E  4E75                    1864          RTS    
00001F80                          1865  
00001F80                          1866  ASR_EA_REG
00001F80                          1867          ;Set to data register
00001F80  4285                    1868          CLR.L D5
00001F82  3C00                    1869          MOVE D0, D6
00001F84  CC7C 0E00               1870          AND #3584, D6
00001F88  E086                    1871          ASR.L #8, D6
00001F8A  E286                    1872          ASR.L #1, D6
00001F8C  4EB9 00001FBA           1873          JSR EA_DECODER  
00001F92                          1874      
00001F92  16FC 002C               1875          MOVE.B #',', (A3)+
00001F96                          1876          ;Reset D6 just in case.
00001F96  4286                    1877          CLR.L D6
00001F98                          1878          ;Second argument, set D4
00001F98  383C 0001               1879          MOVE #1, D4
00001F9C                          1880      
00001F9C                          1881          ;Set to data register
00001F9C  4285                    1882          CLR.L D5
00001F9E  3C00                    1883          MOVE D0, D6
00001FA0  CC7C 0007               1884          AND #7, D6
00001FA4  4EB9 00001FBA           1885          JSR EA_DECODER    
00001FAA                          1886          
00001FAA                          1887          ;Clear D4
00001FAA  4284                    1888          CLR.L D4
00001FAC                          1889          
00001FAC  4E75                    1890          RTS
00001FAE                          1891  
00001FAE                          1892  ;For the instructions that have a immediate number in the instruction itself, not in a following word/long
00001FAE                          1893  EA_PRINT_IMMEDIATE_NUMBER
00001FAE  16FC 0023               1894      MOVE.B #'#', (A3)+
00001FB2  4EB9 000022F6           1895      JSR ITOA
00001FB8  4E75                    1896      RTS
00001FBA                          1897  
00001FBA                          1898  
00001FBA                          1899  EA_DECODER:
00001FBA                          1900          ;Add space.
00001FBA  16FC 0020               1901          MOVE.B #' ', (A3)+
00001FBE                          1902          ;Jump to the Mode given.
00001FBE  41F9 00001FCC           1903          LEA EAJUMPTABLE, A0
00001FC4  CAFC 0006               1904          MULU #6, D5
00001FC8  4EF0 5000               1905          JMP 0(A0,D5)
00001FCC                          1906          
00001FCC                          1907      ;   This is a jump table that will jump to certain sub-functions based on what the mode is.
00001FCC                          1908  EAJUMPTABLE
00001FCC  4EF9 00001FFC           1909          JMP MODE0       
00001FD2  4EF9 0000203E           1910          JMP MODE1      
00001FD8  4EF9 00002080           1911          JMP MODE2       
00001FDE  4EF9 000020CA           1912          JMP MODE3       
00001FE4  4EF9 00002118           1913          JMP MODE4       
00001FEA  4EF9 00002166           1914          JMP MODE5       
00001FF0  4EF9 00002168           1915          JMP MODE6       
00001FF6  4EF9 0000216A           1916          JMP MODE7      
00001FFC                          1917      
00001FFC                          1918  MODE0      
00001FFC                          1919          ; Figure the  that relate to it op codes 
00001FFC                          1920          
00001FFC  BC7C 0000               1921          CMP #0, D6
00002000  6700 0234               1922          BEQ APPEND_D0
00002004                          1923      
00002004  BC7C 0001               1924          CMP #1, D6
00002008  6700 0236               1925          BEQ APPEND_D1
0000200C                          1926      
0000200C  BC7C 0002               1927          CMP #2, D6
00002010  6700 0238               1928          BEQ APPEND_D2
00002014                          1929      
00002014  BC7C 0003               1930          CMP #3, D6
00002018  6700 023A               1931          BEQ APPEND_D3
0000201C                          1932      
0000201C  BC7C 0004               1933          CMP #4, D6
00002020  6700 023C               1934          BEQ APPEND_D4
00002024                          1935          
00002024  BC7C 0005               1936          CMP #5, D6
00002028  6700 023E               1937          BEQ APPEND_D5
0000202C                          1938      
0000202C  BC7C 0006               1939          CMP #6, D6
00002030  6700 0240               1940          BEQ APPEND_D6
00002034                          1941      
00002034  BC7C 0007               1942          CMP #7, D6
00002038  6700 0242               1943          BEQ APPEND_D7
0000203C                          1944      
0000203C                          1945          ;Return
0000203C  4E75                    1946          RTS
0000203E                          1947  
0000203E                          1948  MODE1
0000203E  BC7C 0000               1949          CMP #0, D6
00002042  6700 0242               1950          BEQ APPEND_A0
00002046                          1951      
00002046  BC7C 0001               1952          CMP #1, D6
0000204A  6700 0244               1953          BEQ APPEND_A1
0000204E                          1954      
0000204E  BC7C 0002               1955          CMP #2, D6
00002052  6700 0246               1956          BEQ APPEND_A2
00002056                          1957      
00002056  BC7C 0003               1958          CMP #3, D6
0000205A  6700 0248               1959          BEQ APPEND_A3
0000205E                          1960      
0000205E  BC7C 0004               1961          CMP #4, D6
00002062  6700 024A               1962          BEQ APPEND_A4
00002066                          1963      
00002066  BC7C 0005               1964          CMP #5, D6
0000206A  6700 024C               1965          BEQ APPEND_A5
0000206E                          1966      
0000206E  BC7C 0006               1967          CMP #6, D6
00002072  6700 024E               1968          BEQ APPEND_A6
00002076                          1969      
00002076  BC7C 0007               1970          CMP #7, D6
0000207A  6700 0250               1971          BEQ APPEND_A7
0000207E                          1972      
0000207E                          1973          ;Return
0000207E  4E75                    1974          RTS
00002080                          1975  
00002080                          1976  MODE2
00002080  16FC 0028               1977          MOVE.B #'(', (A3)+
00002084                          1978  
00002084  BC7C 0000               1979          CMP #0, D6
00002088  6700 01FC               1980          BEQ APPEND_A0
0000208C                          1981      
0000208C  BC7C 0001               1982          CMP #1, D6
00002090  6700 01FE               1983          BEQ APPEND_A1
00002094                          1984      
00002094  BC7C 0002               1985          CMP #2, D6
00002098  6700 0200               1986          BEQ APPEND_A2
0000209C                          1987      
0000209C  BC7C 0003               1988          CMP #3, D6
000020A0  6700 0202               1989          BEQ APPEND_A3
000020A4                          1990      
000020A4  BC7C 0004               1991          CMP #4, D6
000020A8  6700 0204               1992          BEQ APPEND_A4
000020AC                          1993      
000020AC  BC7C 0005               1994          CMP #5, D6
000020B0  6700 0206               1995          BEQ APPEND_A5
000020B4                          1996      
000020B4  BC7C 0006               1997          CMP #6, D6
000020B8  6700 0208               1998          BEQ APPEND_A6
000020BC                          1999      
000020BC  BC7C 0007               2000          CMP #7, D6
000020C0  6700 020A               2001          BEQ APPEND_A7
000020C4                          2002          
000020C4  16FC 0029               2003          MOVE.B #')', (A3)+
000020C8                          2004      
000020C8                          2005          ;Return
000020C8  4E75                    2006          RTS
000020CA                          2007  
000020CA                          2008  MODE3
000020CA  16FC 0028               2009          MOVE.B #'(', (A3)+
000020CE                          2010  
000020CE  BC7C 0000               2011          CMP #0, D6
000020D2  6700 01B2               2012          BEQ APPEND_A0
000020D6                          2013      
000020D6  BC7C 0001               2014          CMP #1, D6
000020DA  6700 01B4               2015          BEQ APPEND_A1
000020DE                          2016      
000020DE  BC7C 0002               2017          CMP #2, D6
000020E2  6700 01B6               2018          BEQ APPEND_A2
000020E6                          2019      
000020E6  BC7C 0003               2020          CMP #3, D6
000020EA  6700 01B8               2021          BEQ APPEND_A3
000020EE                          2022      
000020EE  BC7C 0004               2023          CMP #4, D6
000020F2  6700 01BA               2024          BEQ APPEND_A4
000020F6                          2025      
000020F6  BC7C 0005               2026          CMP #5, D6
000020FA  6700 01BC               2027          BEQ APPEND_A5
000020FE                          2028      
000020FE  BC7C 0006               2029          CMP #6, D6
00002102  6700 01BE               2030          BEQ APPEND_A6
00002106                          2031      
00002106  BC7C 0007               2032          CMP #7, D6
0000210A  6700 01C0               2033          BEQ APPEND_A7
0000210E                          2034      
0000210E  16FC 0029               2035          MOVE.B #')', (A3)+
00002112  16FC 002B               2036          MOVE.B #'+', (A3)+
00002116                          2037      
00002116                          2038          ;Return
00002116  4E75                    2039          RTS
00002118                          2040  
00002118                          2041  MODE4
00002118  16FC 002D               2042          MOVE.B #'-', (A3)+
0000211C  16FC 0028               2043          MOVE.B #'(', (A3)+
00002120                          2044  
00002120  BC7C 0000               2045          CMP #0, D6
00002124  6700 0160               2046          BEQ APPEND_A0
00002128                          2047      
00002128  BC7C 0001               2048          CMP #1, D6
0000212C  6700 0162               2049          BEQ APPEND_A1
00002130                          2050      
00002130  BC7C 0002               2051          CMP #2, D6
00002134  6700 0164               2052          BEQ APPEND_A2
00002138                          2053      
00002138  BC7C 0003               2054          CMP #3, D6
0000213C  6700 0166               2055          BEQ APPEND_A3
00002140                          2056      
00002140  BC7C 0004               2057          CMP #4, D6
00002144  6700 0168               2058          BEQ APPEND_A4
00002148                          2059      
00002148  BC7C 0005               2060          CMP #5, D6
0000214C  6700 016A               2061          BEQ APPEND_A5
00002150                          2062      
00002150  BC7C 0006               2063          CMP #6, D6
00002154  6700 016C               2064          BEQ APPEND_A6
00002158                          2065      
00002158  BC7C 0007               2066          CMP #7, D6
0000215C  6700 016E               2067          BEQ APPEND_A7
00002160                          2068      
00002160  16FC 0029               2069          MOVE.B #')', (A3)+
00002164                          2070      
00002164                          2071          ;Return
00002164  4E75                    2072          RTS
00002166                          2073  
00002166                          2074  MODE5
00002166                          2075          ;Error-handling mode.
00002166  4E75                    2076          RTS
00002168                          2077      
00002168                          2078  MODE6
00002168                          2079          ;Error-handling mode.
00002168  4E75                    2080          RTS
0000216A                          2081      
0000216A                          2082  MODE7
0000216A  4287                    2083          CLR.L D7
0000216C  BC7C 0000               2084          CMP #0, D6
00002170  6700 0014               2085          BEQ MODE_7_SHORT
00002174                          2086      
00002174  BC7C 0001               2087          CMP #1, D6
00002178  6700 003E               2088          BEQ MODE_7_LONG
0000217C                          2089      
0000217C  BC7C 0004               2090          CMP #4, D6
00002180  6700 0068               2091          BEQ MODE_7_IMM_WORD
00002184                          2092      
00002184  4E75                    2093          RTS
00002186                          2094          
00002186                          2095  ;MODE 7 WHEN IT IS WORD
00002186                          2096  ;======================
00002186                          2097  MODE_7_SHORT
00002186  B87C 0000               2098          CMP #0, D4
0000218A  6700 0006               2099          BEQ MODE_7_SHORT_1
0000218E                          2100          
0000218E  16FC 0028               2101          MOVE.B #'(', (A3)+
00002192                          2102  
00002192                          2103  MODE_7_SHORT_1
00002192  16FC 0024               2104          MOVE.B #'$', (A3)+
00002196  3E1D                    2105          MOVE.W (A5)+, D7
00002198  363C 0004               2106          MOVE #4, D3
0000219C  4EB9 000022F6           2107          JSR ITOA
000021A2                          2108      
000021A2  B87C 0000               2109          CMP #0, D4
000021A6  6700 000E               2110          BEQ MODE_7_SHORT_2
000021AA                          2111          
000021AA  16FC 0029               2112          MOVE.B #')', (A3)+
000021AE  16FC 002E               2113          MOVE.B #'.', (A3)+
000021B2  16FC 0057               2114          MOVE.B #'W', (A3)+
000021B6                          2115  MODE_7_SHORT_2        
000021B6  4E75                    2116          RTS
000021B8                          2117  
000021B8                          2118  ;MODE 7 WHEN IT IS LONG
000021B8                          2119  ;======================    
000021B8                          2120  MODE_7_LONG
000021B8  B87C 0000               2121          CMP #0, D4
000021BC  6700 0006               2122          BEQ MODE_7_LONG_1
000021C0                          2123          
000021C0  16FC 0028               2124          MOVE.B #'(', (A3)+
000021C4                          2125  
000021C4                          2126  MODE_7_LONG_1
000021C4  16FC 0024               2127          MOVE.B #'$', (A3)+
000021C8  2E1D                    2128          MOVE.L (A5)+, D7
000021CA  363C 0008               2129          MOVE #8, D3
000021CE  4EB9 000022F6           2130          JSR ITOA
000021D4                          2131          
000021D4  B87C 0000               2132          CMP #0, D4
000021D8  6700 000E               2133          BEQ MODE_7_LONG_2
000021DC                          2134          
000021DC  16FC 0029               2135          MOVE.B #')', (A3)+
000021E0  16FC 002E               2136          MOVE.B #'.', (A3)+
000021E4  16FC 004C               2137          MOVE.B #'L', (A3)+
000021E8                          2138  MODE_7_LONG_2  
000021E8  4E75                    2139          RTS
000021EA                          2140  
000021EA                          2141  ;MODE 7 WHEN IT IS IMMEDIATE WORD
000021EA                          2142  ;================================
000021EA                          2143  MODE_7_IMM_WORD
000021EA                          2144          ;Immediate data can't be written to.
000021EA  B87C 0001               2145          CMP #1, D4
000021EE  6700 00E6               2146          BEQ DATA_ERROR
000021F2                          2147       
000021F2                          2148          ;If the instruction is a long, we belong in next operation.
000021F2  B67C 0004               2149          CMP #4, D3
000021F6  6700 0018               2150          BEQ MODE_7_IMM_LONG   
000021FA                          2151       
000021FA  16FC 0023               2152          MOVE.B #'#',(A3)+
000021FE  16FC 0024               2153          MOVE.B #'$',(A3)+
00002202  3E1D                    2154          MOVE.W (A5)+, D7
00002204  363C 0004               2155          MOVE #4, D3
00002208  4EB9 000022F6           2156          JSR ITOA
0000220E                          2157          
0000220E  4E75                    2158          RTS
00002210                          2159  
00002210                          2160  ;MODE 7 WHEN IT IS IMMEDIATE LONG
00002210                          2161  ;================================
00002210                          2162  MODE_7_IMM_LONG
00002210  16FC 0023               2163          MOVE.B #'#',(A3)+
00002214  16FC 0024               2164          MOVE.B #'$',(A3)+
00002218  2E1D                    2165          MOVE.L (A5)+, D7
0000221A  363C 0008               2166          MOVE #8, D3
0000221E  4EB9 000022F6           2167          JSR ITOA
00002224                          2168          
00002224  4E75                    2169          RTS
00002226                          2170  
00002226                          2171  MODE_7_2NDARG_START
00002226  16FC 0028               2172          MOVE.B #'(', (A3)+
0000222A  4E75                    2173          RTS
0000222C                          2174  
0000222C                          2175  MODE_7_2NDARG_END
0000222C  16FC 0029               2176          MOVE.B #')', (A3)+
00002230  16FC 002E               2177          MOVE.B #'.', (A3)+
00002234  4E75                    2178          RTS
00002236                          2179  
00002236                          2180  APPEND_D0
00002236  16FC 0044               2181          MOVE.B  #'D', (A3)+
0000223A  16FC 0030               2182          MOVE.B  #'0', (A3)+
0000223E  4E75                    2183          RTS
00002240                          2184  
00002240                          2185  APPEND_D1
00002240  16FC 0044               2186          MOVE.B  #'D', (A3)+
00002244  16FC 0031               2187          MOVE.B  #'1', (A3)+
00002248  4E75                    2188          RTS
0000224A                          2189  
0000224A                          2190  APPEND_D2
0000224A  16FC 0044               2191          MOVE.B  #'D', (A3)+
0000224E  16FC 0032               2192          MOVE.B  #'2', (A3)+
00002252  4E75                    2193          RTS
00002254                          2194  
00002254                          2195  APPEND_D3
00002254  16FC 0044               2196          MOVE.B  #'D', (A3)+
00002258  16FC 0033               2197          MOVE.B  #'3', (A3)+
0000225C  4E75                    2198          RTS
0000225E                          2199  
0000225E                          2200  APPEND_D4
0000225E  16FC 0044               2201          MOVE.B  #'D', (A3)+
00002262  16FC 0034               2202          MOVE.B  #'4', (A3)+
00002266  4E75                    2203          RTS
00002268                          2204  
00002268                          2205  APPEND_D5
00002268  16FC 0044               2206          MOVE.B  #'D', (A3)+
0000226C  16FC 0035               2207          MOVE.B  #'5', (A3)+
00002270  4E75                    2208          RTS
00002272                          2209  
00002272                          2210  APPEND_D6
00002272  16FC 0044               2211          MOVE.B  #'D', (A3)+
00002276  16FC 0036               2212          MOVE.B  #'6', (A3)+
0000227A  4E75                    2213          RTS
0000227C                          2214  
0000227C                          2215  APPEND_D7
0000227C  16FC 0044               2216          MOVE.B  #'D', (A3)+
00002280  16FC 0037               2217          MOVE.B  #'7', (A3)+
00002284  4E75                    2218          RTS
00002286                          2219      
00002286                          2220  APPEND_A0
00002286  16FC 0041               2221          MOVE.B  #'A', (A3)+
0000228A  16FC 0030               2222          MOVE.B  #'0', (A3)+
0000228E  4E75                    2223          RTS
00002290                          2224  
00002290                          2225  APPEND_A1
00002290  16FC 0041               2226          MOVE.B  #'A', (A3)+
00002294  16FC 0031               2227          MOVE.B  #'1', (A3)+
00002298  4E75                    2228          RTS
0000229A                          2229  
0000229A                          2230  APPEND_A2
0000229A  16FC 0041               2231          MOVE.B  #'A', (A3)+
0000229E  16FC 0032               2232          MOVE.B  #'2', (A3)+
000022A2  4E75                    2233          RTS
000022A4                          2234  
000022A4                          2235  APPEND_A3
000022A4  16FC 0041               2236          MOVE.B  #'A', (A3)+
000022A8  16FC 0033               2237          MOVE.B  #'3', (A3)+
000022AC  4E75                    2238          RTS
000022AE                          2239  
000022AE                          2240  APPEND_A4
000022AE  16FC 0041               2241          MOVE.B  #'A', (A3)+
000022B2  16FC 0034               2242          MOVE.B  #'4', (A3)+
000022B6  4E75                    2243          RTS
000022B8                          2244  
000022B8                          2245  APPEND_A5
000022B8  16FC 0041               2246          MOVE.B  #'A', (A3)+
000022BC  16FC 0035               2247          MOVE.B  #'5', (A3)+
000022C0  4E75                    2248          RTS
000022C2                          2249  
000022C2                          2250  APPEND_A6
000022C2  16FC 0041               2251          MOVE.B  #'A', (A3)+
000022C6  16FC 0036               2252          MOVE.B  #'6', (A3)+
000022CA  4E75                    2253          RTS
000022CC                          2254      
000022CC                          2255  APPEND_A7
000022CC  16FC 0041               2256          MOVE.B  #'A', (A3)+
000022D0  16FC 0037               2257          MOVE.B  #'7', (A3)+
000022D4  4E75                    2258          RTS
000022D6                          2259  
000022D6                          2260          
000022D6                          2261  ; -------------------------------------------------------------
000022D6                          2262  ;   ERROR when Data has incorrect Addressing MODE
000022D6                          2263  ; -------------------------------------------------------------          
000022D6                          2264  DATA_ERROR:      
000022D6  43F9 00002687           2265          LEA     DECODE_OP_ERROR, A1
000022DC  103C 000E               2266          MOVE.B  #task14,D0
000022E0  4E4F                    2267          TRAP    #15           Display  Error Message
000022E2  4EF8 1018               2268          JMP     RESTART_PROGRAM
000022E6                          2269  
000022E6                          2270  DATA_UNSUPPORTED:      
000022E6  43F9 0000271B           2271          LEA     DECODE_EA_UNSUPPORT, A1
000022EC  103C 000E               2272          MOVE.B  #task14,D0
000022F0  4E4F                    2273          TRAP    #15           Display  Error Message
000022F2  4EF8 1018               2274          JMP     RESTART_PROGRAM
000022F6                          2275   
000022F6                          2276  *-------------------------------------------------------------------        
000022F6                          2277      * ITOA CONVERT for IMMEDIATE DATA
000022F6                          2278      ;Iteration Byte = 2 ITOA Loops, Word = 4 ITOA Loops, Long = 8 Loops 
000022F6                          2279      *D3 = # of ITOA Loop ITERATION
000022F6                          2280      *D7 = immediate address 
000022F6                          2281      *D6 = LSR Moving count
000022F6                          2282      *D0 = Data that is shifted
000022F6                          2283  *-------------------------------------------------------------------   
000022F6                          2284  ITOA:                       ; Converts hex string into int 
000022F6                          2285          ; D7 has the immediate address
000022F6  2F00                    2286          MOVE.L D0, -(SP)  
000022F8  4EB9 00002302           2287          JSR     ITOA_LOOP
000022FE  201F                    2288          MOVE.L (SP)+, D0
00002300  4E75                    2289          RTS
00002302                          2290          
00002302                          2291  ITOA_LOOP:
00002302  4280                    2292          CLR.L   D0 
00002304  4281                    2293          CLR.L   D1
00002306                          2294          
00002306  5303                    2295          SUB.B   #1, D3  
00002308  2007                    2296          MOVE.L  D7, D0
0000230A  1203                    2297          MOVE.B  D3, D1
0000230C                          2298  
0000230C  C2FC 0004               2299          MULU    #4, D1      ; The amount that we shift 
00002310  E2A8                    2300          LSR.L   D1, D0       ; Shift D0 with iteration Loop * 4
00002312                          2301          
00002312  0280 0000000F           2302          ANDI.L  #$F, D0          ; Last 4 bits in hex 
00002318                          2303          
00002318                          2304          ; Convert Hex into ASCII 
00002318  4EB9 00002332           2305          JSR     ITOA_CONVERT
0000231E                          2306          
0000231E                          2307          ; ADD to A3 Counter 
0000231E  4EB9 00002346           2308          JSR     ITOA_ADD_CHAR                  
00002324                          2309          ; Checks if counter is empty, ITOA is completed 
00002324  B63C 0000               2310          CMP.B   #0,D3
00002328  6700 0006               2311          BEQ     ITOA_DONE
0000232C                          2312          
0000232C  4EF8 2302               2313          JMP     ITOA_LOOP   ; Continue Reading more bits from immediate data         
00002330                          2314                         
00002330                          2315  ITOA_DONE:          
00002330  4E75                    2316          RTS         ; Returns back to last JSR 
00002332                          2317  
00002332                          2318  ITOA_CONVERT: 
00002332  B03C 0009               2319          CMP.B       #9,D0
00002336  6300 0008               2320          BLS         ITOA_CONVERT_N
0000233A                          2321          
0000233A  0640 0037               2322          ADDI.W      #$37, D0
0000233E  4E75                    2323          RTS 
00002340                          2324          
00002340                          2325  ITOA_CONVERT_N
00002340  0640 0030               2326          ADDI.W     #$30,D0
00002344  4E75                    2327          RTS
00002346                          2328          
00002346                          2329  ITOA_ADD_CHAR: 
00002346  B03C 0030               2330          CMP.B   #$30, D0
0000234A  6700 007A               2331          BEQ     CHAR_0
0000234E                          2332          
0000234E  B03C 0031               2333          CMP.B   #$31, D0
00002352  6700 007C               2334          BEQ     CHAR_1
00002356                          2335          
00002356  B03C 0032               2336          CMP.B   #$32, D0
0000235A  6700 007E               2337          BEQ     CHAR_2
0000235E                          2338          
0000235E  B03C 0033               2339          CMP.B   #$33, D0
00002362  6700 0080               2340          BEQ     CHAR_3
00002366                          2341          
00002366  B03C 0034               2342          CMP.B   #$34, D0
0000236A  6700 0082               2343          BEQ     CHAR_4
0000236E                          2344          
0000236E  B03C 0035               2345          CMP.B   #$35, D0
00002372  6700 0084               2346          BEQ     CHAR_5
00002376                          2347          
00002376  B03C 0036               2348          CMP.B   #$36, D0
0000237A  6700 0086               2349          BEQ     CHAR_6
0000237E                          2350          
0000237E  B03C 0037               2351          CMP.B   #$37, D0
00002382  6700 0088               2352          BEQ     CHAR_7
00002386                          2353          
00002386  B03C 0038               2354          CMP.B   #$38, D0
0000238A  6700 008A               2355          BEQ     CHAR_8
0000238E                          2356          
0000238E  B03C 0039               2357          CMP.B   #$39, D0
00002392  6700 008C               2358          BEQ     CHAR_9
00002396                          2359          
00002396  B03C 0041               2360          CMP.B   #$41, D0
0000239A  6700 008E               2361          BEQ     CHAR_A
0000239E                          2362          
0000239E  B03C 0042               2363          CMP.B   #$42, D0
000023A2  6700 0090               2364          BEQ     CHAR_B        
000023A6                          2365          
000023A6  B03C 0043               2366          CMP.B   #$43, D0
000023AA  6700 0092               2367          BEQ     CHAR_C
000023AE                          2368          
000023AE  B03C 0044               2369          CMP.B   #$44, D0
000023B2  6700 0094               2370          BEQ     CHAR_D
000023B6                          2371          
000023B6  B03C 0045               2372          CMP.B   #$45, D0
000023BA  6700 0096               2373          BEQ     CHAR_E
000023BE                          2374          
000023BE  B03C 0046               2375          CMP.B   #$46, D0
000023C2  6700 0098               2376          BEQ     CHAR_F  
000023C6                          2377          
000023C6                          2378  CHAR_0:
000023C6  16FC 0030               2379          MOVE.B  #'0', (A3)+ 
000023CA  4EF9 00002466           2380          JMP     ITOA_ADD_CHAR_DONE        
000023D0                          2381  CHAR_1:
000023D0  16FC 0031               2382          MOVE.B  #'1', (A3)+ 
000023D4  4EF9 00002466           2383          JMP     ITOA_ADD_CHAR_DONE
000023DA                          2384  CHAR_2:
000023DA  16FC 0032               2385          MOVE.B  #'2', (A3)+ 
000023DE  4EF9 00002466           2386          JMP     ITOA_ADD_CHAR_DONE
000023E4                          2387  CHAR_3:
000023E4  16FC 0033               2388          MOVE.B  #'3', (A3)+ 
000023E8  4EF9 00002466           2389          JMP     ITOA_ADD_CHAR_DONE
000023EE                          2390  CHAR_4:
000023EE  16FC 0034               2391          MOVE.B  #'4', (A3)+ 
000023F2  4EF9 00002466           2392          JMP     ITOA_ADD_CHAR_DONE
000023F8                          2393  CHAR_5:
000023F8  16FC 0035               2394          MOVE.B  #'5', (A3)+ 
000023FC  4EF9 00002466           2395          JMP     ITOA_ADD_CHAR_DONE
00002402                          2396  CHAR_6:
00002402  16FC 0036               2397          MOVE.B  #'6', (A3)+ 
00002406  4EF9 00002466           2398          JMP     ITOA_ADD_CHAR_DONE
0000240C                          2399  CHAR_7:
0000240C  16FC 0037               2400          MOVE.B  #'7', (A3)+ 
00002410  4EF9 00002466           2401          JMP     ITOA_ADD_CHAR_DONE
00002416                          2402  CHAR_8:
00002416  16FC 0038               2403          MOVE.B  #'8', (A3)+ 
0000241A  4EF9 00002466           2404          JMP     ITOA_ADD_CHAR_DONE
00002420                          2405  CHAR_9:
00002420  16FC 0039               2406          MOVE.B  #'9', (A3)+ 
00002424  4EF9 00002466           2407          JMP     ITOA_ADD_CHAR_DONE
0000242A                          2408  CHAR_A:
0000242A  16FC 0041               2409          MOVE.B  #'A', (A3)+ 
0000242E  4EF9 00002466           2410          JMP     ITOA_ADD_CHAR_DONE
00002434                          2411  CHAR_B:
00002434  16FC 0042               2412          MOVE.B  #'B', (A3)+ 
00002438  4EF9 00002466           2413          JMP     ITOA_ADD_CHAR_DONE
0000243E                          2414  CHAR_C:
0000243E  16FC 0043               2415          MOVE.B  #'C', (A3)+ 
00002442  4EF9 00002466           2416          JMP     ITOA_ADD_CHAR_DONE
00002448                          2417  CHAR_D:
00002448  16FC 0044               2418          MOVE.B  #'D', (A3)+ 
0000244C  4EF9 00002466           2419          JMP     ITOA_ADD_CHAR_DONE
00002452                          2420  CHAR_E:
00002452  16FC 0045               2421          MOVE.B  #'E', (A3)+ 
00002456  4EF9 00002466           2422          JMP     ITOA_ADD_CHAR_DONE
0000245C                          2423  CHAR_F:
0000245C  16FC 0046               2424          MOVE.B  #'F', (A3)+ 
00002460  4EF9 00002466           2425          JMP     ITOA_ADD_CHAR_DONE
00002466                          2426          
00002466                          2427  ITOA_ADD_CHAR_DONE:
00002466  4E75                    2428          RTS                
00002468                          2429  ; -------------------------------------------------------------
00002468                          2430  ;   Converts User string input into HEX 
00002468                          2431  ; -------------------------------------------------------------         
00002468                          2432  ATOI:                       ; Converts hex string into int 
00002468  4EB9 00002470           2433          JSR     ATOI_LOOP
0000246E  4E75                    2434          RTS
00002470                          2435          
00002470                          2436  ATOI_LOOP: 
00002470  1219                    2437          MOVE.B  (A1)+, D1
00002472                          2438          
00002472                          2439          ; Checks if it is 00/ NULL, Reading is done
00002472  B23C 0000               2440          CMP.B   #0,D1
00002476  6700 004C               2441          BEQ     ATOI_DONE
0000247A                          2442          
0000247A  B23C 0030               2443          CMP.B   #$30, D1         ; Error / non valid input
0000247E  6D34                    2444          BLT.B    ATOI_ERROR
00002480                          2445          
00002480  B23C 0040               2446          CMP.B   #$40,D1          ; Checks for value in range of num (0 - 9) 
00002484  6D16                    2447          BLT.B   ATOI_NUM_VALUE
00002486                          2448          
00002486  B23C 0041               2449          CMP.B   #$41, D1         ; Error / non valid input
0000248A  6D00 0028               2450          BLT     ATOI_ERROR                
0000248E                          2451          
0000248E  B23C 0047               2452          CMP.B   #$47, D1          
00002492  6D00 0014               2453          BLT     ATOI_CAP_LETTR_VALUE   ; Checks for value in range of A-F
00002496                          2454          
00002496  4EF9 000024B4           2455          JMP     ATOI_ERROR      ;Error if it reaches all the way to the end
0000249C                          2456                  
0000249C                          2457  ATOI_NUM_VALUE: 
0000249C  E98B                    2458          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
0000249E  0401 0030               2459          SUBI.B  #$30, D1        ; ASCI Value subtracts 30 
000024A2  D681                    2460          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000024A4  4EF8 2470               2461          JMP     ATOI_LOOP
000024A8                          2462          
000024A8                          2463  
000024A8                          2464  ATOI_CAP_LETTR_VALUE: 
000024A8  E98B                    2465          LSL.L   #$4, D3          ; Shift 4 bits to the left for D3
000024AA  0401 0037               2466          SUBI.B  #$37, D1        ; ASCI Value subtracts 30 
000024AE  D681                    2467          ADD.L   D1, D3          ; Add  Hex value into D1 into D3 
000024B0  4EF8 2470               2468          JMP     ATOI_LOOP
000024B4                          2469                  
000024B4                          2470  ATOI_ERROR: 
000024B4  43F9 00002592           2471          LEA     ATOI_MESS_ERROR, A1
000024BA  103C 000E               2472          MOVE.B  #task14,D0
000024BE  4E4F                    2473          TRAP    #15           Display  Error Message
000024C0  4EF8 1012               2474          JMP     USER_INPUT
000024C4                          2475          
000024C4                          2476  ATOI_DONE: 
000024C4  4E75                    2477          RTS
000024C6                          2478         
000024C6                          2479  ERROR_START_ADDR:   
000024C6  43F9 000025C5           2480          LEA     START_ADDR_ERROR , A1
000024CC  103C 000E               2481          MOVE.B  #task14,D0
000024D0  4E4F                    2482          TRAP    #15           Display  Error Message
000024D2  4EF8 1018               2483          JMP     RESTART_PROGRAM
000024D6                          2484          
000024D6                          2485  ERROR_END_ADDR:   
000024D6  43F9 000025F0           2486          LEA     END_ADDR_ERROR , A1
000024DC  103C 000E               2487          MOVE.B  #task14,D0
000024E0  4E4F                    2488          TRAP    #15           Display  Error Message
000024E2  4EF8 1018               2489          JMP     RESTART_PROGRAM       
000024E6                          2490                  
000024E6                          2491  DONE:
000024E6  103C 0009               2492          MOVE.B  #9, D0
000024EA  4E4F                    2493          TRAP    #15             Halt Simulator   
000024EC                          2494          
000024EC                          2495  * Put variables and constants here
000024EC  =0000000D               2496  CR      EQU     $0D
000024EC  =0000000A               2497  LF      EQU     $0A
000024EC= 0D 0A 00                2498  BLANK                   DC.B    '',CR,LF,0
000024EF= 57 65 6C 63 6F 6D ...   2499  WELCOME_MESS            DC.B    'Welcome to the disassembler program',CR,LF,0
00002515= 45 6E 74 65 72 20 ...   2500  START_MESS              DC.B    'Enter a start address',CR,LF,0
0000252D= 45 6E 74 65 72 20 ...   2501  REPEAT_MESS             DC.B    'Enter Y to disassemble another program, N to quit',CR,LF,0
00002561= 57 72 6F 6E 67 20 ...   2502  INVALID_MESS            DC.B    'Wrong Input, Try again', CR,LF,0
0000257A= 45 6E 74 65 72 20 ...   2503  END_MESS                DC.B    'Enter the end address',CR,LF,0
00002592= 49 6E 76 61 6C 69 ...   2504  ATOI_MESS_ERROR         DC.B    'Invalid inputs for HEX values, Please try again',CR,LF,LF,0
000025C5= 49 6E 76 61 6C 69 ...   2505  START_ADDR_ERROR        DC.B    'Invalid start address, Please try again',CR,LF,LF,0
000025F0= 49 6E 76 61 6C 69 ...   2506  END_ADDR_ERROR          DC.B    'Invalid end address, Please try again',CR,LF,LF,0
00002619                          2507  buffer                  DS.B    bufferSize
00002659= 50 72 65 73 73 20 ...   2508  MAX_SCREEN_OUTPUT       DC.B    'Press enter any key to continue the program',CR,LF,0
00002687= 45 72 72 6F 72 20 ...   2509  DECODE_OP_ERROR         DC.B    'Error in reading the instruction. Invalid Op code readings', CR, LF,0
000026C4= 45 72 72 6F 72 20 ...   2510  DECODE_EA_ERROR         DC.B    'Error in reading the instruction. Invalid EA readings', CR, LF,0
000026FC= 55 6E 73 75 70 70 ...   2511  DECODE_OP_UNSUPPORT     DC.B    'Unsupported Op code readings', CR, LF,0
0000271B= 55 6E 73 75 70 70 ...   2512  DECODE_EA_UNSUPPORT     DC.B    'Unsupported EA code readings', CR, LF,0
0000273A                          2513          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_EA             1EEA
ADDQ_EA             1E24
ADD_EA              1EE4
APPEND_A0           2286
APPEND_A1           2290
APPEND_A2           229A
APPEND_A3           22A4
APPEND_A4           22AE
APPEND_A5           22B8
APPEND_A6           22C2
APPEND_A7           22CC
APPEND_D0           2236
APPEND_D1           2240
APPEND_D2           224A
APPEND_D3           2254
APPEND_D4           225E
APPEND_D5           2268
APPEND_D6           2272
APPEND_D7           227C
ASL_EA              1F26
ASR_EA              1F2C
ASR_EA_NUM          1F46
ASR_EA_NUM_1        1F5E
ASR_EA_REG          1F80
ATOI                2468
ATOI_CAP_LETTR_VALUE  24A8
ATOI_DONE           24C4
ATOI_ERROR          24B4
ATOI_LOOP           2470
ATOI_MESS_ERROR     2592
ATOI_NUM_VALUE      249C
BLANK               24EC
BRA_EA              1D5A
BSR_EA              1D60
BSR_EA_16           1D92
BSR_EA_32           1DA2
BUFFER              2619
BUFFERSIZE          40
CHAR_0              23C6
CHAR_1              23D0
CHAR_2              23DA
CHAR_3              23E4
CHAR_4              23EE
CHAR_5              23F8
CHAR_6              2402
CHAR_7              240C
CHAR_8              2416
CHAR_9              2420
CHAR_A              242A
CHAR_B              2434
CHAR_C              243E
CHAR_D              2448
CHAR_E              2452
CHAR_F              245C
CLEAR_SCREEN        1102
CMP_EA              1E70
CR                  D
DATA_ERROR          22D6
DATA_UNSUPPORTED    22E6
DECODE_EA_ERROR     26C4
DECODE_EA_UNSUPPORT  271B
DECODE_LOOP         10C2
DECODE_OP_ERROR     2687
DECODE_OP_UNSUPPORT  26FC
DECODE_PAUSE        10E8
DECODE_START        10C0
DESTMODE            1C0
DIVS_EA             1DB8
DIVU_EA             1DB2
DONE                24E6
EAJUMPTABLE         1FCC
EA_DECODER          1FBA
EA_PRINT_IMMEDIATE_NUMBER  1FAE
END_ADDR            106E
END_ADDR_ERROR      25F0
END_MESS            257A
END_PROGRAM         11BA
ERROR_END_ADDR      24D6
ERROR_START_ADDR    24C6
HELPER_ADDA_L       1954
HELPER_ADDA_W       1968
HELPER_ADDSUBQ_CONVERT_B  18A6
HELPER_ADDSUBQ_CONVERT_L  187E
HELPER_ADDSUBQ_CONVERT_W  1892
HELPER_ADD_CONVERT_B  19DE
HELPER_ADD_CONVERT_L  19B6
HELPER_ADD_CONVERT_W  19CA
HELPER_ADD_SIZE_CAL  198C
HELPER_CMP_CONVERT_B  1AB8
HELPER_CMP_CONVERT_L  1A90
HELPER_CMP_CONVERT_W  1AA4
HELPER_CMP_SIZE_CAL  1A74
HELPER_ORIB         168A
HELPER_ORIL         16B2
HELPER_ORIW         169E
HELPER_SUB_CONVERT_B  1912
HELPER_SUB_CONVERT_L  18EA
HELPER_SUB_CONVERT_W  18FE
HELPER_SUB_SIZE_CAL  18C0
HELPER__ADDSUBQ_SIZE_CAL  1854
IMMEDIATE_EA        1BF0
INDEX0000           1220
INDEX0001           123E
INDEX0010           1266
INDEX0011           12A6
INDEX0100           12E6
INDEX0101           1304
INDEX0110           1320
INDEX0111           133E
INDEX1000           1362
INDEX1001           1382
INDEX1010           1398
INDEX1011           139E
INDEX1100           13C2
INDEX1101           13EE
INDEX1110           1408
INDEX1110_MEM       1428
INDEX1111           1446
INPUT_N             4E
INPUT_NL            4E
INPUT_Y             59
INPUT_YL            79
INVALID_MESS        2561
ITOA                22F6
ITOA_ADD_CHAR       2346
ITOA_ADD_CHAR_DONE  2466
ITOA_CONVERT        2332
ITOA_CONVERT_N      2340
ITOA_DONE           2330
ITOA_LOOP           2302
LEA_EA              1D1E
LF                  A
LINESONSCREEN       1D
MAIN                1000
MAX_SCREEN_OUTPUT   2659
MODE0               1FFC
MODE1               203E
MODE2               2080
MODE3               20CA
MODE4               2118
MODE5               2166
MODE6               2168
MODE7               216A
MODE_7_2NDARG_END   222C
MODE_7_2NDARG_START  2226
MODE_7_IMM_LONG     2210
MODE_7_IMM_WORD     21EA
MODE_7_LONG         21B8
MODE_7_LONG_1       21C4
MODE_7_LONG_2       21E8
MODE_7_SHORT        2186
MODE_7_SHORT_1      2192
MODE_7_SHORT_2      21B6
MOVEA_EA            1C4C
MOVEM_EA            1C8E
MOVEM_FINISH        1CE4
MOVEM_L             1784
MOVEM_POST          1CCC
MOVEM_PRE           1CE2
MOVEM_REG_TO_MEM    1CBE
MOVEM_SIZE_CALC     1752
MOVEM_SWITCH        1CE0
MOVEM_W             1770
MOVEQ_EA            1CE6
MOVE_EA             1C52
MOVE_IMM_DATA       1C3C
MOVE_POST_LOOP      1CCE
MULS_EA             1EA4
MULU_EA             1EAA
NIBBLE2             F00
NIBBLE3             F0
OP_0000_TABLE       144C
OP_01000_TABLE      14AC
OP_0110_TABLE       150C
OP_1110_TABLE       156C
OP_ADD              197C
OP_ADDA             1926
OP_ADDI             1616
OP_ADDQ             183A
OP_ANDI             15E2
OP_ASL_ADDER        1BB0
OP_ASL_M            1ACC
OP_ASR_ADDER        1BC0
OP_ASR_M            1AE8
OP_BRA              1A08
OP_BSR              19F2
OP_CMP              1A6E
OP_CMPI             164A
OP_DATA_CLR         113E
OP_DATA_CLR_LOOP    1154
OP_DIVS             1A3A
OP_DIVU             1A54
OP_EORI             1630
OP_ERROR            1BE0
OP_FINISH           1138
OP_JMP_TABLE        11C0
OP_LEA              16F2
OP_MOVEAL           16DC
OP_MOVEAW           16C6
OP_MOVEM0           1730
OP_MOVEM1           170E
OP_MULS             1A2C
OP_MULU             1A1E
OP_NOP              17DC
OP_NOP_RTS_RTE      1798
OP_ORI              15CC
OP_ORI_SIZE_EXTACT  1664
OP_ROTATION_CHECK   1B04
OP_ROTATION_HELP    1B32
OP_ROTATION_SIZE_B  1B68
OP_ROTATION_SIZE_HELP  1B50
OP_ROTATION_SIZE_L  1B98
OP_ROTATION_SIZE_W  1B80
OP_RTE              1800
OP_RTS              1810
OP_START            1112
OP_STOP             17EC
OP_SUB              18BA
OP_SUBI             15FC
OP_SUBQ             1820
OP_UNSUPPORTED      1BD0
REPEAT_MESS         252D
REPEAT_PROGRAM      1162
RESTART_PROGRAM     1018
RESTART_PROGRAM_START  11B2
RIGHT12             C
RIGHT3              3
RIGHT4              4
RIGHT6              6
RIGHT8              8
SHIFT               C
SHIFT16             1C48
SIZE                C0
SRCMODE             38
STACK               A0000
START               1000
START_ADDR          1036
START_ADDR_ERROR    25C5
START_MESS          2515
SUBQ_EA             1E2A
SUBQ_EA_1           1E46
SUB_EA              1DF2
TASK1               1
TASK13              D
TASK14              E
TASK2               2
TASK5               5
USER_INPUT          1012
WELCOME             1006
WELCOME_MESS        24EF
